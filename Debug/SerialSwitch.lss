
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00001786  0000181a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000139  00800114  00800114  000018ce  2**0
                  ALLOC
  3 .stab         00001bb4  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa7  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000442b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_4>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 31 03 	jmp	0x662	; 0x662 <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d4 e0       	ldi	r29, 0x04	; 4
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	11 e0       	ldi	r17, 0x01	; 1
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e6 e8       	ldi	r30, 0x86	; 134
      74:	f7 e1       	ldi	r31, 0x17	; 23
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a4 31       	cpi	r26, 0x14	; 20
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	22 e0       	ldi	r18, 0x02	; 2
      84:	a4 e1       	ldi	r26, 0x14	; 20
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	ad 34       	cpi	r26, 0x4D	; 77
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 15 05 	call	0xa2a	; 0xa2a <main>
      96:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      9e:	cf 92       	push	r12
      a0:	df 92       	push	r13
      a2:	ef 92       	push	r14
      a4:	ff 92       	push	r15
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	28 97       	sbiw	r28, 0x08	; 8
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      c0:	fc 01       	movw	r30, r24
      c2:	51 81       	ldd	r21, Z+1	; 0x01
      c4:	85 2f       	mov	r24, r21
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	9c 01       	movw	r18, r24
      ca:	20 53       	subi	r18, 0x30	; 48
      cc:	31 09       	sbc	r19, r1
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	2d 83       	std	Y+5, r18	; 0x05
	switch (code[0]) {
      d2:	40 81       	ld	r20, Z
      d4:	45 34       	cpi	r20, 0x45	; 69
      d6:	09 f4       	brne	.+2      	; 0xda <runCmd+0x3c>
      d8:	dc c0       	rjmp	.+440    	; 0x292 <runCmd+0x1f4>
      da:	30 f4       	brcc	.+12     	; 0xe8 <runCmd+0x4a>
      dc:	41 34       	cpi	r20, 0x41	; 65
      de:	71 f0       	breq	.+28     	; 0xfc <runCmd+0x5e>
      e0:	43 34       	cpi	r20, 0x43	; 67
      e2:	09 f4       	brne	.+2      	; 0xe6 <runCmd+0x48>
      e4:	73 c0       	rjmp	.+230    	; 0x1cc <runCmd+0x12e>
      e6:	23 c2       	rjmp	.+1094   	; 0x52e <__stack+0xcf>
      e8:	44 35       	cpi	r20, 0x54	; 84
      ea:	09 f4       	brne	.+2      	; 0xee <runCmd+0x50>
      ec:	64 c1       	rjmp	.+712    	; 0x3b6 <runCmd+0x318>
      ee:	45 35       	cpi	r20, 0x55	; 85
      f0:	09 f4       	brne	.+2      	; 0xf4 <runCmd+0x56>
      f2:	c2 c1       	rjmp	.+900    	; 0x478 <__stack+0x19>
      f4:	42 35       	cpi	r20, 0x52	; 82
      f6:	09 f0       	breq	.+2      	; 0xfa <runCmd+0x5c>
      f8:	1a c2       	rjmp	.+1076   	; 0x52e <__stack+0xcf>
      fa:	18 c2       	rjmp	.+1072   	; 0x52c <__stack+0xcd>
	case 'A':		// control port a
		if (code[2] - '0') {
      fc:	f8 01       	movw	r30, r16
      fe:	82 81       	ldd	r24, Z+2	; 0x02
     100:	80 33       	cpi	r24, 0x30	; 48
     102:	31 f1       	breq	.+76     	; 0x150 <runCmd+0xb2>
			writeEEPROM(addr, '1');
     104:	61 e3       	ldi	r22, 0x31	; 49
     106:	c9 01       	movw	r24, r18
     108:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			PORTA |= 1 << addr;
     10c:	2b b3       	in	r18, 0x1b	; 27
     10e:	ee 24       	eor	r14, r14
     110:	e3 94       	inc	r14
     112:	f1 2c       	mov	r15, r1
     114:	c7 01       	movw	r24, r14
     116:	0d 80       	ldd	r0, Y+5	; 0x05
     118:	02 c0       	rjmp	.+4      	; 0x11e <runCmd+0x80>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <runCmd+0x7c>
     122:	28 2b       	or	r18, r24
     124:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     126:	f8 01       	movw	r30, r16
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	1f 92       	push	r1
     12c:	8f 93       	push	r24
     12e:	82 e6       	ldi	r24, 0x62	; 98
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	9f 93       	push	r25
     134:	8f 93       	push	r24
     136:	8b e1       	ldi	r24, 0x1B	; 27
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	9f 93       	push	r25
     13c:	8f 93       	push	r24
     13e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
			status |= 1 << addr;
     142:	0d 80       	ldd	r0, Y+5	; 0x05
     144:	02 c0       	rjmp	.+4      	; 0x14a <runCmd+0xac>
     146:	ee 0c       	add	r14, r14
     148:	ff 1c       	adc	r15, r15
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <runCmd+0xa8>
     14e:	69 c0       	rjmp	.+210    	; 0x222 <runCmd+0x184>
		} else {
			writeEEPROM(addr, '0');
     150:	60 e3       	ldi	r22, 0x30	; 48
     152:	c9 01       	movw	r24, r18
     154:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			PORTA &= ~(1 << addr);
     158:	2b b3       	in	r18, 0x1b	; 27
     15a:	ee 24       	eor	r14, r14
     15c:	e3 94       	inc	r14
     15e:	f1 2c       	mov	r15, r1
     160:	c7 01       	movw	r24, r14
     162:	0d 80       	ldd	r0, Y+5	; 0x05
     164:	02 c0       	rjmp	.+4      	; 0x16a <runCmd+0xcc>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	0a 94       	dec	r0
     16c:	e2 f7       	brpl	.-8      	; 0x166 <runCmd+0xc8>
     16e:	80 95       	com	r24
     170:	82 23       	and	r24, r18
     172:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     174:	f8 01       	movw	r30, r16
     176:	81 81       	ldd	r24, Z+1	; 0x01
     178:	1f 92       	push	r1
     17a:	8f 93       	push	r24
     17c:	8e e6       	ldi	r24, 0x6E	; 110
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	9f 93       	push	r25
     182:	8f 93       	push	r24
     184:	8b e1       	ldi	r24, 0x1B	; 27
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	9f 93       	push	r25
     18a:	8f 93       	push	r24
     18c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
			status &= ~(1 << addr);
     190:	97 01       	movw	r18, r14
     192:	0d 80       	ldd	r0, Y+5	; 0x05
     194:	02 c0       	rjmp	.+4      	; 0x19a <runCmd+0xfc>
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <runCmd+0xf8>
     19e:	20 95       	com	r18
     1a0:	30 95       	com	r19
     1a2:	80 91 c1 01 	lds	r24, 0x01C1
     1a6:	90 91 c2 01 	lds	r25, 0x01C2
     1aa:	82 23       	and	r24, r18
     1ac:	93 23       	and	r25, r19
     1ae:	90 93 c2 01 	sts	0x01C2, r25
     1b2:	80 93 c1 01 	sts	0x01C1, r24
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
		}
		runCmd(buf);
     1c2:	8b e1       	ldi	r24, 0x1B	; 27
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
		break;
     1ca:	c7 c1       	rjmp	.+910    	; 0x55a <__stack+0xfb>
	case 'C':		// control port c
		if (code[2] - '0') {
     1cc:	f8 01       	movw	r30, r16
     1ce:	22 81       	ldd	r18, Z+2	; 0x02
     1d0:	88 97       	sbiw	r24, 0x28	; 40
     1d2:	20 33       	cpi	r18, 0x30	; 48
     1d4:	69 f1       	breq	.+90     	; 0x230 <runCmd+0x192>
			writeEEPROM(8 + addr, '1');
     1d6:	61 e3       	ldi	r22, 0x31	; 49
     1d8:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			PORTC |= 1 << addr;
     1dc:	25 b3       	in	r18, 0x15	; 21
     1de:	ee 24       	eor	r14, r14
     1e0:	e3 94       	inc	r14
     1e2:	f1 2c       	mov	r15, r1
     1e4:	c7 01       	movw	r24, r14
     1e6:	0d 80       	ldd	r0, Y+5	; 0x05
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <runCmd+0x150>
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	0a 94       	dec	r0
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <runCmd+0x14c>
     1f2:	28 2b       	or	r18, r24
     1f4:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     1f6:	f8 01       	movw	r30, r16
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	1f 92       	push	r1
     1fc:	8f 93       	push	r24
     1fe:	8a e7       	ldi	r24, 0x7A	; 122
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	9f 93       	push	r25
     204:	8f 93       	push	r24
     206:	8b e1       	ldi	r24, 0x1B	; 27
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	9f 93       	push	r25
     20c:	8f 93       	push	r24
     20e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
			status |= 1 << (8 + addr);
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	9e 81       	ldd	r25, Y+6	; 0x06
     216:	08 96       	adiw	r24, 0x08	; 8
     218:	02 c0       	rjmp	.+4      	; 0x21e <runCmd+0x180>
     21a:	ee 0c       	add	r14, r14
     21c:	ff 1c       	adc	r15, r15
     21e:	8a 95       	dec	r24
     220:	e2 f7       	brpl	.-8      	; 0x21a <runCmd+0x17c>
     222:	80 91 c1 01 	lds	r24, 0x01C1
     226:	90 91 c2 01 	lds	r25, 0x01C2
     22a:	8e 29       	or	r24, r14
     22c:	9f 29       	or	r25, r15
     22e:	bf cf       	rjmp	.-130    	; 0x1ae <runCmd+0x110>
		} else {
			writeEEPROM(8 + addr, '0');
     230:	60 e3       	ldi	r22, 0x30	; 48
     232:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			PORTC &= ~(1 << addr);
     236:	25 b3       	in	r18, 0x15	; 21
     238:	ee 24       	eor	r14, r14
     23a:	e3 94       	inc	r14
     23c:	f1 2c       	mov	r15, r1
     23e:	c7 01       	movw	r24, r14
     240:	0d 80       	ldd	r0, Y+5	; 0x05
     242:	02 c0       	rjmp	.+4      	; 0x248 <runCmd+0x1aa>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	0a 94       	dec	r0
     24a:	e2 f7       	brpl	.-8      	; 0x244 <runCmd+0x1a6>
     24c:	80 95       	com	r24
     24e:	82 23       	and	r24, r18
     250:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     252:	f8 01       	movw	r30, r16
     254:	81 81       	ldd	r24, Z+1	; 0x01
     256:	1f 92       	push	r1
     258:	8f 93       	push	r24
     25a:	86 e8       	ldi	r24, 0x86	; 134
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	9f 93       	push	r25
     260:	8f 93       	push	r24
     262:	8b e1       	ldi	r24, 0x1B	; 27
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	9f 93       	push	r25
     268:	8f 93       	push	r24
     26a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
			status ^= ~(1 << (8 + addr));
     26e:	8d 81       	ldd	r24, Y+5	; 0x05
     270:	9e 81       	ldd	r25, Y+6	; 0x06
     272:	08 96       	adiw	r24, 0x08	; 8
     274:	97 01       	movw	r18, r14
     276:	02 c0       	rjmp	.+4      	; 0x27c <runCmd+0x1de>
     278:	22 0f       	add	r18, r18
     27a:	33 1f       	adc	r19, r19
     27c:	8a 95       	dec	r24
     27e:	e2 f7       	brpl	.-8      	; 0x278 <runCmd+0x1da>
     280:	20 95       	com	r18
     282:	30 95       	com	r19
     284:	80 91 c1 01 	lds	r24, 0x01C1
     288:	90 91 c2 01 	lds	r25, 0x01C2
     28c:	82 27       	eor	r24, r18
     28e:	93 27       	eor	r25, r19
     290:	8e cf       	rjmp	.-228    	; 0x1ae <runCmd+0x110>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     292:	f8 01       	movw	r30, r16
     294:	62 81       	ldd	r22, Z+2	; 0x02
     296:	69 36       	cpi	r22, 0x69	; 105
     298:	79 f4       	brne	.+30     	; 0x2b8 <runCmd+0x21a>
     29a:	e1 2c       	mov	r14, r1
     29c:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++)
				writeEEPROM(i, code[1]);
     29e:	f8 01       	movw	r30, r16
     2a0:	61 81       	ldd	r22, Z+1	; 0x01
     2a2:	c7 01       	movw	r24, r14
     2a4:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
			for (i = 0; i < 16; i++)
     2a8:	ff ef       	ldi	r31, 0xFF	; 255
     2aa:	ef 1a       	sub	r14, r31
     2ac:	ff 0a       	sbc	r15, r31
     2ae:	20 e1       	ldi	r18, 0x10	; 16
     2b0:	e2 16       	cp	r14, r18
     2b2:	f1 04       	cpc	r15, r1
     2b4:	a1 f7       	brne	.-24     	; 0x29e <runCmd+0x200>
     2b6:	51 c1       	rjmp	.+674    	; 0x55a <__stack+0xfb>
				writeEEPROM(i, code[1]);
		else if (code[2] == 'f')
     2b8:	66 36       	cpi	r22, 0x66	; 102
     2ba:	c1 f4       	brne	.+48     	; 0x2ec <runCmd+0x24e>
		{
			if(code[1] == 'a')
     2bc:	51 36       	cpi	r21, 0x61	; 97
     2be:	19 f4       	brne	.+6      	; 0x2c6 <runCmd+0x228>
				addr = EEPROM_SIZE;
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <runCmd+0x22c>
			else
				addr = 16;
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9e 83       	std	Y+6, r25	; 0x06
     2cc:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     2ce:	00 e0       	ldi	r16, 0x00	; 0
     2d0:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2d2:	8d 81       	ldd	r24, Y+5	; 0x05
     2d4:	9e 81       	ldd	r25, Y+6	; 0x06
     2d6:	08 17       	cp	r16, r24
     2d8:	19 07       	cpc	r17, r25
     2da:	08 f0       	brcs	.+2      	; 0x2de <runCmd+0x240>
     2dc:	3e c1       	rjmp	.+636    	; 0x55a <__stack+0xfb>
				writeEEPROM(i, 0xff);
     2de:	6f ef       	ldi	r22, 0xFF	; 255
     2e0:	c8 01       	movw	r24, r16
     2e2:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	f3 cf       	rjmp	.-26     	; 0x2d2 <runCmd+0x234>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
     2ec:	62 37       	cpi	r22, 0x72	; 114
     2ee:	29 f4       	brne	.+10     	; 0x2fa <runCmd+0x25c>
			PORTA = ~readEEPROM(code[1]);
     2f0:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     2f4:	80 95       	com	r24
     2f6:	8b bb       	out	0x1b, r24	; 27
     2f8:	30 c1       	rjmp	.+608    	; 0x55a <__stack+0xfb>
		else if (code[1] == 'R') {
     2fa:	52 35       	cpi	r21, 0x52	; 82
     2fc:	09 f0       	breq	.+2      	; 0x300 <runCmd+0x262>
     2fe:	b4 c0       	rjmp	.+360    	; 0x468 <__stack+0x9>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     300:	ce 01       	movw	r24, r28
     302:	05 96       	adiw	r24, 0x05	; 5
     304:	9f 93       	push	r25
     306:	8f 93       	push	r24
     308:	84 eb       	ldi	r24, 0xB4	; 180
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9f 93       	push	r25
     30e:	8f 93       	push	r24
     310:	0e 5f       	subi	r16, 0xFE	; 254
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	1f 93       	push	r17
     316:	0f 93       	push	r16
     318:	0e 94 d7 05 	call	0xbae	; 0xbae <sscanf>
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f4       	brne	.+60     	; 0x368 <runCmd+0x2ca>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     32c:	8d 81       	ldd	r24, Y+5	; 0x05
     32e:	9e 81       	ldd	r25, Y+6	; 0x06
     330:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
     338:	8e 81       	ldd	r24, Y+6	; 0x06
     33a:	8f 93       	push	r24
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	8f 93       	push	r24
     340:	82 e9       	ldi	r24, 0x92	; 146
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	9f 93       	push	r25
     346:	8f 93       	push	r24
     348:	8b e1       	ldi	r24, 0x1B	; 27
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
				print(buf);
     354:	8b e1       	ldi	r24, 0x1B	; 27
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	f9 c0       	rjmp	.+498    	; 0x55a <__stack+0xfb>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
			PORTA = ~readEEPROM(code[1]);
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     368:	00 e0       	ldi	r16, 0x00	; 0
     36a:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     36c:	32 e9       	ldi	r19, 0x92	; 146
     36e:	c3 2e       	mov	r12, r19
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	d3 2e       	mov	r13, r19
     374:	4b e1       	ldi	r20, 0x1B	; 27
     376:	e4 2e       	mov	r14, r20
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     37c:	c8 01       	movw	r24, r16
     37e:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     382:	1f 92       	push	r1
     384:	8f 93       	push	r24
     386:	1f 93       	push	r17
     388:	0f 93       	push	r16
     38a:	df 92       	push	r13
     38c:	cf 92       	push	r12
     38e:	ff 92       	push	r15
     390:	ef 92       	push	r14
     392:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
						readEEPROM(i));
					print(buf);
     396:	8b e1       	ldi	r24, 0x1B	; 27
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	01 15       	cp	r16, r1
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
     3b0:	1f 07       	cpc	r17, r31
     3b2:	21 f7       	brne	.-56     	; 0x37c <runCmd+0x2de>
     3b4:	d2 c0       	rjmp	.+420    	; 0x55a <__stack+0xfb>
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3b6:	1f 93       	push	r17
     3b8:	0f 93       	push	r16
     3ba:	ce 01       	movw	r24, r28
     3bc:	03 96       	adiw	r24, 0x03	; 3
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	89 e9       	ldi	r24, 0x99	; 153
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	1f 93       	push	r17
     3cc:	0f 93       	push	r16
     3ce:	0e 94 d7 05 	call	0xbae	; 0xbae <sscanf>
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	02 97       	sbiw	r24, 0x02	; 2
     3de:	09 f0       	breq	.+2      	; 0x3e2 <runCmd+0x344>
     3e0:	46 c0       	rjmp	.+140    	; 0x46e <__stack+0xf>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3e2:	6c 81       	ldd	r22, Y+4	; 0x04
     3e4:	80 91 7f 01 	lds	r24, 0x017F
     3e8:	90 91 80 01 	lds	r25, 0x0180
     3ec:	9c 01       	movw	r18, r24
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	31 09       	sbc	r19, r1
     3f2:	30 93 80 01 	sts	0x0180, r19
     3f6:	20 93 7f 01 	sts	0x017F, r18
     3fa:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     3fe:	6b 81       	ldd	r22, Y+3	; 0x03
     400:	80 91 7f 01 	lds	r24, 0x017F
     404:	90 91 80 01 	lds	r25, 0x0180
     408:	9c 01       	movw	r18, r24
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	31 09       	sbc	r19, r1
     40e:	30 93 80 01 	sts	0x0180, r19
     412:	20 93 7f 01 	sts	0x017F, r18
     416:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     41a:	78 01       	movw	r14, r16
     41c:	f8 01       	movw	r30, r16
     41e:	01 90       	ld	r0, Z+
     420:	00 20       	and	r0, r0
     422:	e9 f7       	brne	.-6      	; 0x41e <runCmd+0x380>
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	e0 1b       	sub	r30, r16
     428:	f1 0b       	sbc	r31, r17
     42a:	80 91 7f 01 	lds	r24, 0x017F
     42e:	90 91 80 01 	lds	r25, 0x0180
     432:	97 01       	movw	r18, r14
     434:	20 1b       	sub	r18, r16
     436:	31 0b       	sbc	r19, r17
     438:	2e 17       	cp	r18, r30
     43a:	3f 07       	cpc	r19, r31
     43c:	68 f4       	brcc	.+26     	; 0x458 <runCmd+0x3ba>
				writeEEPROM(stackTail--, code[i]);
     43e:	f7 01       	movw	r30, r14
     440:	61 91       	ld	r22, Z+
     442:	7f 01       	movw	r14, r30
     444:	9c 01       	movw	r18, r24
     446:	21 50       	subi	r18, 0x01	; 1
     448:	31 09       	sbc	r19, r1
     44a:	30 93 80 01 	sts	0x0180, r19
     44e:	20 93 7f 01 	sts	0x017F, r18
     452:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
     456:	e2 cf       	rjmp	.-60     	; 0x41c <runCmd+0x37e>
			}
			writeEEPROM(stackTail--, '\n');
     458:	9c 01       	movw	r18, r24
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	31 09       	sbc	r19, r1
     45e:	30 93 80 01 	sts	0x0180, r19
     462:	20 93 7f 01 	sts	0x017F, r18
     466:	6a e0       	ldi	r22, 0x0A	; 10
     468:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     46c:	76 c0       	rjmp	.+236    	; 0x55a <__stack+0xfb>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     46e:	8f e9       	ldi	r24, 0x9F	; 159
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
			return;
     476:	71 c0       	rjmp	.+226    	; 0x55a <__stack+0xfb>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     478:	ce 01       	movw	r24, r28
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	02 96       	adiw	r24, 0x02	; 2
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	04 96       	adiw	r24, 0x04	; 4
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	8c ea       	ldi	r24, 0xAC	; 172
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	1f 93       	push	r17
     49c:	0f 93       	push	r16
     49e:	0e 94 d7 05 	call	0xbae	; 0xbae <sscanf>
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	04 97       	sbiw	r24, 0x04	; 4
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <__stack+0x53>
     4b0:	54 c0       	rjmp	.+168    	; 0x55a <__stack+0xfb>
			if (port == 'A')
     4b2:	88 85       	ldd	r24, Y+8	; 0x08
     4b4:	81 34       	cpi	r24, 0x41	; 65
     4b6:	19 f4       	brne	.+6      	; 0x4be <__stack+0x5f>
				addr = 16;
     4b8:	80 e1       	ldi	r24, 0x10	; 16
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
			else if (port == 'C')
     4be:	83 34       	cpi	r24, 0x43	; 67
     4c0:	b1 f4       	brne	.+44     	; 0x4ee <__stack+0x8f>
				addr = 48;
     4c2:	80 e3       	ldi	r24, 0x30	; 48
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9e 83       	std	Y+6, r25	; 0x06
     4c8:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4ca:	8f 81       	ldd	r24, Y+7	; 0x07
     4cc:	90 ed       	ldi	r25, 0xD0	; 208
     4ce:	98 0f       	add	r25, r24
     4d0:	9a 30       	cpi	r25, 0x0A	; 10
     4d2:	90 f4       	brcc	.+36     	; 0x4f8 <__stack+0x99>
				addr += (pin - '0') * 4;
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	c0 97       	sbiw	r24, 0x30	; 48
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	2d 81       	ldd	r18, Y+5	; 0x05
     4e2:	3e 81       	ldd	r19, Y+6	; 0x06
     4e4:	28 0f       	add	r18, r24
     4e6:	39 1f       	adc	r19, r25
     4e8:	3e 83       	std	Y+6, r19	; 0x06
     4ea:	2d 83       	std	Y+5, r18	; 0x05
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__stack+0x99>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4ee:	87 eb       	ldi	r24, 0xB7	; 183
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 88 05 	call	0xb10	; 0xb10 <puts>
				return;
     4f6:	31 c0       	rjmp	.+98     	; 0x55a <__stack+0xfb>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     4f8:	6c 81       	ldd	r22, Y+4	; 0x04
     4fa:	8d 81       	ldd	r24, Y+5	; 0x05
     4fc:	9e 81       	ldd	r25, Y+6	; 0x06
     4fe:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			writeEEPROM(addr + 1, time);
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	9e 81       	ldd	r25, Y+6	; 0x06
     506:	6b 81       	ldd	r22, Y+3	; 0x03
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     50e:	6a 81       	ldd	r22, Y+2	; 0x02
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	9e 81       	ldd	r25, Y+6	; 0x06
     514:	02 96       	adiw	r24, 0x02	; 2
     516:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     51a:	8d 81       	ldd	r24, Y+5	; 0x05
     51c:	9e 81       	ldd	r25, Y+6	; 0x06
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	03 96       	adiw	r24, 0x03	; 3
     522:	0e 94 bc 02 	call	0x578	; 0x578 <writeEEPROM>
			setDuty();
     526:	0e 94 cb 02 	call	0x596	; 0x596 <setDuty>
     52a:	17 c0       	rjmp	.+46     	; 0x55a <__stack+0xfb>
     52c:	ff cf       	rjmp	.-2      	; 0x52c <__stack+0xcd>
		break;
	case 'R':		// Reboot
		while (1);
		break;
	default:
		sprintf(buf, "Unrecognised code:%s\n", code);
     52e:	1f 93       	push	r17
     530:	0f 93       	push	r16
     532:	82 ec       	ldi	r24, 0xC2	; 194
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	8b e1       	ldi	r24, 0x1B	; 27
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	0e 94 b5 05 	call	0xb6a	; 0xb6a <sprintf>
		print(buf);
     546:	8b e1       	ldi	r24, 0x1B	; 27
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
		break;
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
	}
}
     55a:	28 96       	adiw	r28, 0x08	; 8
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     578:	e1 99       	sbic	0x1c, 1	; 28
     57a:	fe cf       	rjmp	.-4      	; 0x578 <writeEEPROM>
	EEAR = addr;
     57c:	9f bb       	out	0x1f, r25	; 31
     57e:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     580:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     582:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     584:	e1 9a       	sbi	0x1c, 1	; 28
     586:	08 95       	ret

00000588 <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     588:	e1 99       	sbic	0x1c, 1	; 28
     58a:	fe cf       	rjmp	.-4      	; 0x588 <readEEPROM>
	EEAR = addr;
     58c:	9f bb       	out	0x1f, r25	; 31
     58e:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     590:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     592:	8d b3       	in	r24, 0x1d	; 29
}
     594:	08 95       	ret

00000596 <setDuty>:

void setDuty()
{
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	c0 e0       	ldi	r28, 0x00	; 0
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5a4:	8e 01       	movw	r16, r28
     5a6:	15 95       	asr	r17
     5a8:	07 95       	ror	r16
     5aa:	15 95       	asr	r17
     5ac:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5ae:	ce 01       	movw	r24, r28
     5b0:	40 96       	adiw	r24, 0x10	; 16
     5b2:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     5b6:	f8 2e       	mov	r15, r24
     5b8:	ce 01       	movw	r24, r28
     5ba:	41 96       	adiw	r24, 0x11	; 17
     5bc:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5c0:	00 0f       	add	r16, r16
     5c2:	11 1f       	adc	r17, r17
     5c4:	f8 01       	movw	r30, r16
     5c6:	ef 57       	subi	r30, 0x7F	; 127
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5ca:	2f 2d       	mov	r18, r15
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	32 2f       	mov	r19, r18
     5d0:	22 27       	eor	r18, r18
     5d2:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5d4:	31 83       	std	Z+1, r19	; 0x01
     5d6:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5d8:	ce 01       	movw	r24, r28
     5da:	42 96       	adiw	r24, 0x12	; 18
     5dc:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     5e0:	f8 2e       	mov	r15, r24
     5e2:	ce 01       	movw	r24, r28
     5e4:	43 96       	adiw	r24, 0x13	; 19
     5e6:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5ea:	f8 01       	movw	r30, r16
     5ec:	ef 55       	subi	r30, 0x5F	; 95
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5f0:	2f 2d       	mov	r18, r15
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	32 2f       	mov	r19, r18
     5f6:	22 27       	eor	r18, r18
     5f8:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5fa:	31 83       	std	Z+1, r19	; 0x01
     5fc:	20 83       	st	Z, r18
     5fe:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     600:	c0 34       	cpi	r28, 0x40	; 64
     602:	d1 05       	cpc	r29, r1
     604:	79 f6       	brne	.-98     	; 0x5a4 <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     606:	40 91 c1 01 	lds	r20, 0x01C1
     60a:	50 91 c2 01 	lds	r21, 0x01C2
     60e:	c1 e8       	ldi	r28, 0x81	; 129
     610:	d1 e0       	ldi	r29, 0x01	; 1
     612:	e3 ec       	ldi	r30, 0xC3	; 195
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	a1 ea       	ldi	r26, 0xA1	; 161
     618:	b1 e0       	ldi	r27, 0x01	; 1
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	9b 01       	movw	r18, r22
     624:	08 2e       	mov	r0, r24
     626:	02 c0       	rjmp	.+4      	; 0x62c <setDuty+0x96>
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <setDuty+0x92>
     630:	24 23       	and	r18, r20
     632:	35 23       	and	r19, r21
     634:	23 2b       	or	r18, r19
     636:	19 f0       	breq	.+6      	; 0x63e <setDuty+0xa8>
			m[i] = dutyH[i];
     638:	28 81       	ld	r18, Y
     63a:	39 81       	ldd	r19, Y+1	; 0x01
     63c:	03 c0       	rjmp	.+6      	; 0x644 <setDuty+0xae>
		else
			m[i] = dutyL[i];
     63e:	2d 91       	ld	r18, X+
     640:	3c 91       	ld	r19, X
     642:	11 97       	sbiw	r26, 0x01	; 1
     644:	31 83       	std	Z+1, r19	; 0x01
     646:	20 83       	st	Z, r18
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	22 96       	adiw	r28, 0x02	; 2
     64c:	32 96       	adiw	r30, 0x02	; 2
     64e:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     650:	80 31       	cpi	r24, 0x10	; 16
     652:	91 05       	cpc	r25, r1
     654:	31 f7       	brne	.-52     	; 0x622 <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	08 95       	ret

00000662 <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	cf 92       	push	r12
     66e:	df 92       	push	r13
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	c4 56       	subi	r28, 0x64	; 100
     69a:	d1 09       	sbc	r29, r1
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     6a0:	80 91 19 01 	lds	r24, 0x0119
     6a4:	90 91 1a 01 	lds	r25, 0x011A
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	90 93 1a 01 	sts	0x011A, r25
     6ae:	80 93 19 01 	sts	0x0119, r24
	if (t > F_CPU / 256 / 1024) {
     6b2:	04 97       	sbiw	r24, 0x04	; 4
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <__vector_9+0x56>
     6b6:	6e c0       	rjmp	.+220    	; 0x794 <__vector_9+0x132>
		t = 0;
     6b8:	10 92 1a 01 	sts	0x011A, r1
     6bc:	10 92 19 01 	sts	0x0119, r1
		seconds++;
     6c0:	80 91 17 01 	lds	r24, 0x0117
     6c4:	90 91 18 01 	lds	r25, 0x0118
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	90 93 18 01 	sts	0x0118, r25
     6ce:	80 93 17 01 	sts	0x0117, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6d2:	80 91 60 00 	lds	r24, 0x0060
     6d6:	90 91 61 00 	lds	r25, 0x0061
     6da:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     6de:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     6e0:	80 91 60 00 	lds	r24, 0x0060
     6e4:	90 91 61 00 	lds	r25, 0x0061
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6ee:	21 2f       	mov	r18, r17
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	32 2f       	mov	r19, r18
     6f4:	22 27       	eor	r18, r18

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     6f6:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     6f8:	2f 3f       	cpi	r18, 0xFF	; 255
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	38 07       	cpc	r19, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <__vector_9+0xa0>
     700:	49 c0       	rjmp	.+146    	; 0x794 <__vector_9+0x132>
			if (seconds >= time) {
     702:	80 91 17 01 	lds	r24, 0x0117
     706:	90 91 18 01 	lds	r25, 0x0118
     70a:	82 17       	cp	r24, r18
     70c:	93 07       	cpc	r25, r19
     70e:	08 f4       	brcc	.+2      	; 0x712 <__vector_9+0xb0>
     710:	41 c0       	rjmp	.+130    	; 0x794 <__vector_9+0x132>
				p -= 2;
     712:	80 91 60 00 	lds	r24, 0x0060
     716:	90 91 61 00 	lds	r25, 0x0061
     71a:	02 97       	sbiw	r24, 0x02	; 2
     71c:	90 93 61 00 	sts	0x0061, r25
     720:	80 93 60 00 	sts	0x0060, r24
     724:	8e 01       	movw	r16, r28
     726:	0f 5f       	subi	r16, 0xFF	; 255
     728:	1f 4f       	sbci	r17, 0xFF	; 255
     72a:	78 01       	movw	r14, r16
     72c:	68 01       	movw	r12, r16
     72e:	ce 18       	sub	r12, r14
     730:	df 08       	sbc	r13, r15
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     732:	80 91 60 00 	lds	r24, 0x0060
     736:	90 91 61 00 	lds	r25, 0x0061
     73a:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     73e:	f8 01       	movw	r30, r16
     740:	81 93       	st	Z+, r24
     742:	8f 01       	movw	r16, r30
     744:	20 91 60 00 	lds	r18, 0x0060
     748:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     74c:	8a 30       	cpi	r24, 0x0A	; 10
     74e:	c9 f4       	brne	.+50     	; 0x782 <__vector_9+0x120>
					    cmd[i + 1] = 0;
     750:	fe 01       	movw	r30, r28
     752:	ec 0d       	add	r30, r12
     754:	fd 1d       	adc	r31, r13
     756:	12 82       	std	Z+2, r1	; 0x02
						p--;
     758:	21 50       	subi	r18, 0x01	; 1
     75a:	31 09       	sbc	r19, r1
     75c:	30 93 61 00 	sts	0x0061, r19
     760:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				print("Auto running command:");
     764:	88 ed       	ldi	r24, 0xD8	; 216
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
				print(cmd);
     76c:	c7 01       	movw	r24, r14
     76e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
				runCmd(cmd);
     772:	c7 01       	movw	r24, r14
     774:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
				seconds = 0;
     778:	10 92 18 01 	sts	0x0118, r1
     77c:	10 92 17 01 	sts	0x0117, r1
     780:	09 c0       	rjmp	.+18     	; 0x794 <__vector_9+0x132>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     782:	83 31       	cpi	r24, 0x13	; 19
     784:	29 f3       	breq	.-54     	; 0x750 <__vector_9+0xee>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     786:	21 50       	subi	r18, 0x01	; 1
     788:	31 09       	sbc	r19, r1
     78a:	30 93 61 00 	sts	0x0061, r19
     78e:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     792:	cc cf       	rjmp	.-104    	; 0x72c <__vector_9+0xca>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     794:	cc 59       	subi	r28, 0x9C	; 156
     796:	df 4f       	sbci	r29, 0xFF	; 255
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	7f 91       	pop	r23
     7b4:	6f 91       	pop	r22
     7b6:	5f 91       	pop	r21
     7b8:	4f 91       	pop	r20
     7ba:	3f 91       	pop	r19
     7bc:	2f 91       	pop	r18
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	4f 93       	push	r20
     7e8:	5f 93       	push	r21
     7ea:	6f 93       	push	r22
     7ec:	7f 93       	push	r23
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	af 93       	push	r26
     7f4:	bf 93       	push	r27
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     7fe:	80 91 15 01 	lds	r24, 0x0115
     802:	90 91 16 01 	lds	r25, 0x0116
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	90 93 16 01 	sts	0x0116, r25
     80c:	80 93 15 01 	sts	0x0115, r24
	if (t > F_CPU / 256 / 1024) {
     810:	04 97       	sbiw	r24, 0x04	; 4
     812:	08 f4       	brcc	.+2      	; 0x816 <__vector_4+0x42>
     814:	61 c0       	rjmp	.+194    	; 0x8d8 <__vector_4+0x104>
		t = 0;
     816:	10 92 16 01 	sts	0x0116, r1
     81a:	10 92 15 01 	sts	0x0115, r1
		sec++;
     81e:	80 91 14 01 	lds	r24, 0x0114
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	80 93 14 01 	sts	0x0114, r24
		if (sec >= 60) {
     828:	8c 33       	cpi	r24, 0x3C	; 60
     82a:	08 f4       	brcc	.+2      	; 0x82e <__vector_4+0x5a>
     82c:	55 c0       	rjmp	.+170    	; 0x8d8 <__vector_4+0x104>
			sec = 0;
     82e:	10 92 14 01 	sts	0x0114, r1
     832:	e3 ec       	ldi	r30, 0xC3	; 195
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	c1 ea       	ldi	r28, 0xA1	; 161
     838:	d1 e0       	ldi	r29, 0x01	; 1
     83a:	a1 e8       	ldi	r26, 0x81	; 129
     83c:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     846:	40 81       	ld	r20, Z
     848:	51 81       	ldd	r21, Z+1	; 0x01
     84a:	41 15       	cp	r20, r1
     84c:	51 05       	cpc	r21, r1
     84e:	29 f0       	breq	.+10     	; 0x85a <__vector_4+0x86>
					m[i]--;
     850:	41 50       	subi	r20, 0x01	; 1
     852:	51 09       	sbc	r21, r1
     854:	51 83       	std	Z+1, r21	; 0x01
     856:	40 83       	st	Z, r20
     858:	37 c0       	rjmp	.+110    	; 0x8c8 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	91 05       	cpc	r25, r1
     85e:	50 f4       	brcc	.+20     	; 0x874 <__vector_4+0xa0>
						PORTA ^= 1 << i;
     860:	6b b3       	in	r22, 0x1b	; 27
     862:	a9 01       	movw	r20, r18
     864:	08 2e       	mov	r0, r24
     866:	01 c0       	rjmp	.+2      	; 0x86a <__vector_4+0x96>
     868:	44 0f       	add	r20, r20
     86a:	0a 94       	dec	r0
     86c:	ea f7       	brpl	.-6      	; 0x868 <__vector_4+0x94>
     86e:	64 27       	eor	r22, r20
     870:	6b bb       	out	0x1b, r22	; 27
     872:	0c c0       	rjmp	.+24     	; 0x88c <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     874:	65 b3       	in	r22, 0x15	; 21
     876:	ac 01       	movw	r20, r24
     878:	48 50       	subi	r20, 0x08	; 8
     87a:	51 09       	sbc	r21, r1
     87c:	89 01       	movw	r16, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__vector_4+0xb0>
     880:	00 0f       	add	r16, r16
     882:	11 1f       	adc	r17, r17
     884:	4a 95       	dec	r20
     886:	e2 f7       	brpl	.-8      	; 0x880 <__vector_4+0xac>
     888:	60 27       	eor	r22, r16
     88a:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     88c:	60 91 c1 01 	lds	r22, 0x01C1
     890:	70 91 c2 01 	lds	r23, 0x01C2
     894:	a9 01       	movw	r20, r18
     896:	08 2e       	mov	r0, r24
     898:	02 c0       	rjmp	.+4      	; 0x89e <__vector_4+0xca>
     89a:	44 0f       	add	r20, r20
     89c:	55 1f       	adc	r21, r21
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__vector_4+0xc6>
     8a2:	8a 01       	movw	r16, r20
     8a4:	06 23       	and	r16, r22
     8a6:	17 23       	and	r17, r23
     8a8:	01 2b       	or	r16, r17
     8aa:	19 f0       	breq	.+6      	; 0x8b2 <__vector_4+0xde>
						m[i] = dutyL[i];
     8ac:	08 81       	ld	r16, Y
     8ae:	19 81       	ldd	r17, Y+1	; 0x01
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     8b2:	0d 91       	ld	r16, X+
     8b4:	1c 91       	ld	r17, X
     8b6:	11 97       	sbiw	r26, 0x01	; 1
     8b8:	11 83       	std	Z+1, r17	; 0x01
     8ba:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     8bc:	46 27       	eor	r20, r22
     8be:	57 27       	eor	r21, r23
     8c0:	50 93 c2 01 	sts	0x01C2, r21
     8c4:	40 93 c1 01 	sts	0x01C1, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	32 96       	adiw	r30, 0x02	; 2
     8cc:	22 96       	adiw	r28, 0x02	; 2
     8ce:	12 96       	adiw	r26, 0x02	; 2
     8d0:	80 31       	cpi	r24, 0x10	; 16
     8d2:	91 05       	cpc	r25, r1
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__vector_4+0x104>
     8d6:	b7 cf       	rjmp	.-146    	; 0x846 <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <__vector_11>:

ISR(USART_RXC_vect)
{
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	2f 93       	push	r18
     91a:	3f 93       	push	r19
     91c:	4f 93       	push	r20
     91e:	5f 93       	push	r21
     920:	6f 93       	push	r22
     922:	7f 93       	push	r23
     924:	8f 93       	push	r24
     926:	9f 93       	push	r25
     928:	af 93       	push	r26
     92a:	bf 93       	push	r27
     92c:	ef 93       	push	r30
     92e:	ff 93       	push	r31
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	c4 56       	subi	r28, 0x64	; 100
     93a:	d1 09       	sbc	r29, r1
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	7c 01       	movw	r14, r24
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     94a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <receiveUSART>
     94e:	f7 01       	movw	r30, r14
     950:	81 93       	st	Z+, r24
     952:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     954:	83 31       	cpi	r24, 0x13	; 19
     956:	41 f4       	brne	.+16     	; 0x968 <__vector_11+0x66>
			codeUSART[i] = '\0';
     958:	e1 e0       	ldi	r30, 0x01	; 1
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	ec 0f       	add	r30, r28
     95e:	fd 1f       	adc	r31, r29
     960:	e0 0f       	add	r30, r16
     962:	f1 1f       	adc	r31, r17
     964:	10 82       	st	Z, r1
			break;
     966:	07 c0       	rjmp	.+14     	; 0x976 <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     968:	8a 30       	cpi	r24, 0x0A	; 10
     96a:	b1 f3       	breq	.-20     	; 0x958 <__vector_11+0x56>
     96c:	0f 5f       	subi	r16, 0xFF	; 255
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     970:	04 36       	cpi	r16, 0x64	; 100
     972:	11 05       	cpc	r17, r1
     974:	51 f7       	brne	.-44     	; 0x94a <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 23       	and	r24, r24
     97a:	e1 f0       	breq	.+56     	; 0x9b4 <__vector_11+0xb2>
		print("\nReceived:\n");
     97c:	8e ee       	ldi	r24, 0xEE	; 238
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
     984:	6e 01       	movw	r12, r28
     986:	f5 e6       	ldi	r31, 0x65	; 101
     988:	cf 0e       	add	r12, r31
     98a:	d1 1c       	adc	r13, r1
     98c:	8e 01       	movw	r16, r28
     98e:	0f 5f       	subi	r16, 0xFF	; 255
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     994:	f8 01       	movw	r30, r16
     996:	81 91       	ld	r24, Z+
     998:	8f 01       	movw	r16, r30
     99a:	0e 94 74 05 	call	0xae8	; 0xae8 <sendUSART>
			if (codeUSART[i] == '\0')
     99e:	f7 01       	movw	r30, r14
     9a0:	80 81       	ld	r24, Z
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     9a6:	0c 15       	cp	r16, r12
     9a8:	1d 05       	cpc	r17, r13
     9aa:	99 f7       	brne	.-26     	; 0x992 <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     9ac:	8a ea       	ldi	r24, 0xAA	; 170
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
	}

	runCmd(codeUSART);
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
}
     9bc:	cc 59       	subi	r28, 0x9C	; 156
     9be:	df 4f       	sbci	r29, 0xFF	; 255
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <initUSART>:

void initUSART()
{
	UCSRA |= (1 << U2X);
     9fc:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     9fe:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;		// 9600Hz on 1MHz F_CPU
     a00:	8c e0       	ldi	r24, 0x0C	; 12
     a02:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     a04:	88 e9       	ldi	r24, 0x98	; 152
     a06:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     a08:	86 e8       	ldi	r24, 0x86	; 134
     a0a:	80 bd       	out	0x20, r24	; 32
     a0c:	08 95       	ret

00000a0e <initTimer0>:
}

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     a12:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     a14:	89 b7       	in	r24, 0x39	; 57
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	89 bf       	out	0x39, r24	; 57
     a1a:	08 95       	ret

00000a1c <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     a20:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     a22:	89 b7       	in	r24, 0x39	; 57
     a24:	80 64       	ori	r24, 0x40	; 64
     a26:	89 bf       	out	0x39, r24	; 57
     a28:	08 95       	ret

00000a2a <main>:

int main()
{
	uint8_t i;

	wdt_enable(WDTO_30MS);
     a2a:	29 e0       	ldi	r18, 0x09	; 9
     a2c:	88 e1       	ldi	r24, 0x18	; 24
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	a8 95       	wdr
     a36:	81 bd       	out	0x21, r24	; 33
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	21 bd       	out	0x21, r18	; 33

	PORTA = 0x00;
     a3c:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
     a3e:	15 ba       	out	0x15, r1	; 21
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     a44:	8b b3       	in	r24, 0x1b	; 27
     a46:	86 95       	lsr	r24
     a48:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a4a:	1b b3       	in	r17, 0x1b	; 27
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     a52:	20 e8       	ldi	r18, 0x80	; 128
     a54:	82 9f       	mul	r24, r18
     a56:	c0 01       	movw	r24, r0
     a58:	11 24       	eor	r1, r1
     a5a:	81 2b       	or	r24, r17
     a5c:	8b bb       	out	0x1b, r24	; 27
     a5e:	21 96       	adiw	r28, 0x01	; 1
	wdt_enable(WDTO_30MS);

	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
     a60:	c8 30       	cpi	r28, 0x08	; 8
     a62:	d1 05       	cpc	r29, r1
     a64:	79 f7       	brne	.-34     	; 0xa44 <main+0x1a>
     a66:	c8 e0       	ldi	r28, 0x08	; 8
     a68:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     a6a:	85 b3       	in	r24, 0x15	; 21
     a6c:	86 95       	lsr	r24
     a6e:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a70:	15 b3       	in	r17, 0x15	; 21
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     a78:	20 e8       	ldi	r18, 0x80	; 128
     a7a:	82 9f       	mul	r24, r18
     a7c:	c0 01       	movw	r24, r0
     a7e:	11 24       	eor	r1, r1
     a80:	81 2b       	or	r24, r17
     a82:	85 bb       	out	0x15, r24	; 21
     a84:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     a86:	c0 31       	cpi	r28, 0x10	; 16
     a88:	d1 05       	cpc	r29, r1
     a8a:	79 f7       	brne	.-34     	; 0xa6a <main+0x40>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	DDRA = 0xff;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     a90:	84 bb       	out	0x14, r24	; 20

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	90 93 80 01 	sts	0x0180, r25
     a9a:	80 93 7f 01 	sts	0x017F, r24
     a9e:	80 91 7f 01 	lds	r24, 0x017F
     aa2:	90 91 80 01 	lds	r25, 0x0180
     aa6:	0e 94 c4 02 	call	0x588	; 0x588 <readEEPROM>
     aaa:	8f 3f       	cpi	r24, 0xFF	; 255
     aac:	31 f0       	breq	.+12     	; 0xaba <main+0x90>
     aae:	80 91 7f 01 	lds	r24, 0x017F
     ab2:	90 91 80 01 	lds	r25, 0x0180
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	ee cf       	rjmp	.-36     	; 0xa96 <main+0x6c>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     aba:	25 b3       	in	r18, 0x15	; 21
     abc:	8b b3       	in	r24, 0x1b	; 27
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	92 2b       	or	r25, r18
     ac2:	90 93 c2 01 	sts	0x01C2, r25
     ac6:	80 93 c1 01 	sts	0x01C1, r24

	initUSART();
     aca:	0e 94 fe 04 	call	0x9fc	; 0x9fc <initUSART>

	setDuty();
     ace:	0e 94 cb 02 	call	0x596	; 0x596 <setDuty>

	initTimer0();
     ad2:	0e 94 07 05 	call	0xa0e	; 0xa0e <initTimer0>

	initTimer2();
     ad6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <initTimer2>

	sei();
     ada:	78 94       	sei

	print("\nEntering the main loop\n");
     adc:	8a ef       	ldi	r24, 0xFA	; 250
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print>
	while (1)
		wdt_reset();
     ae4:	a8 95       	wdr
     ae6:	fe cf       	rjmp	.-4      	; 0xae4 <main+0xba>

00000ae8 <sendUSART>:

#include "usart.h"

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE))) ;
     ae8:	5d 9b       	sbis	0x0b, 5	; 11
     aea:	fe cf       	rjmp	.-4      	; 0xae8 <sendUSART>
	UDR = data;
     aec:	8c b9       	out	0x0c, r24	; 12
     aee:	08 95       	ret

00000af0 <receiveUSART>:
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC))) ;
     af0:	5f 9b       	sbis	0x0b, 7	; 11
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <receiveUSART>
	return UDR;
     af4:	8c b1       	in	r24, 0x0c	; 12
}
     af6:	08 95       	ret

00000af8 <print>:

void print(char *s)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
	while (*s) {
     afe:	89 91       	ld	r24, Y+
     b00:	88 23       	and	r24, r24
     b02:	19 f0       	breq	.+6      	; 0xb0a <print+0x12>
		sendUSART(*s);
     b04:	0e 94 74 05 	call	0xae8	; 0xae8 <sendUSART>
     b08:	fa cf       	rjmp	.-12     	; 0xafe <print+0x6>
		s++;
	}
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <puts>:
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	e0 91 49 02 	lds	r30, 0x0249
     b1c:	f0 91 4a 02 	lds	r31, 0x024A
     b20:	23 81       	ldd	r18, Z+3	; 0x03
     b22:	21 ff       	sbrs	r18, 1
     b24:	1b c0       	rjmp	.+54     	; 0xb5c <puts+0x4c>
     b26:	ec 01       	movw	r28, r24
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	89 91       	ld	r24, Y+
     b2e:	60 91 49 02 	lds	r22, 0x0249
     b32:	70 91 4a 02 	lds	r23, 0x024A
     b36:	db 01       	movw	r26, r22
     b38:	18 96       	adiw	r26, 0x08	; 8
     b3a:	ed 91       	ld	r30, X+
     b3c:	fc 91       	ld	r31, X
     b3e:	19 97       	sbiw	r26, 0x09	; 9
     b40:	88 23       	and	r24, r24
     b42:	31 f0       	breq	.+12     	; 0xb50 <puts+0x40>
     b44:	09 95       	icall
     b46:	89 2b       	or	r24, r25
     b48:	89 f3       	breq	.-30     	; 0xb2c <puts+0x1c>
     b4a:	0f ef       	ldi	r16, 0xFF	; 255
     b4c:	1f ef       	ldi	r17, 0xFF	; 255
     b4e:	ee cf       	rjmp	.-36     	; 0xb2c <puts+0x1c>
     b50:	8a e0       	ldi	r24, 0x0A	; 10
     b52:	09 95       	icall
     b54:	89 2b       	or	r24, r25
     b56:	11 f4       	brne	.+4      	; 0xb5c <puts+0x4c>
     b58:	c8 01       	movw	r24, r16
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <puts+0x50>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	9f ef       	ldi	r25, 0xFF	; 255
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <sprintf>:
     b6a:	ae e0       	ldi	r26, 0x0E	; 14
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb eb       	ldi	r30, 0xBB	; 187
     b70:	f5 e0       	ldi	r31, 0x05	; 5
     b72:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__prologue_saves__+0x1c>
     b76:	0d 89       	ldd	r16, Y+21	; 0x15
     b78:	1e 89       	ldd	r17, Y+22	; 0x16
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	8c 83       	std	Y+4, r24	; 0x04
     b7e:	1a 83       	std	Y+2, r17	; 0x02
     b80:	09 83       	std	Y+1, r16	; 0x01
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	9f e7       	ldi	r25, 0x7F	; 127
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	8d 83       	std	Y+5, r24	; 0x05
     b8a:	ae 01       	movw	r20, r28
     b8c:	47 5e       	subi	r20, 0xE7	; 231
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
     b90:	6f 89       	ldd	r22, Y+23	; 0x17
     b92:	78 8d       	ldd	r23, Y+24	; 0x18
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <vfprintf>
     b9c:	ef 81       	ldd	r30, Y+7	; 0x07
     b9e:	f8 85       	ldd	r31, Y+8	; 0x08
     ba0:	e0 0f       	add	r30, r16
     ba2:	f1 1f       	adc	r31, r17
     ba4:	10 82       	st	Z, r1
     ba6:	2e 96       	adiw	r28, 0x0e	; 14
     ba8:	e4 e0       	ldi	r30, 0x04	; 4
     baa:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__epilogue_restores__+0x1c>

00000bae <sscanf>:
     bae:	ae e0       	ldi	r26, 0x0E	; 14
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ed ed       	ldi	r30, 0xDD	; 221
     bb4:	f5 e0       	ldi	r31, 0x05	; 5
     bb6:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__prologue_saves__+0x20>
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	8c 83       	std	Y+4, r24	; 0x04
     bbe:	8b 89       	ldd	r24, Y+19	; 0x13
     bc0:	9c 89       	ldd	r25, Y+20	; 0x14
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	ae 01       	movw	r20, r28
     bc8:	49 5e       	subi	r20, 0xE9	; 233
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	6d 89       	ldd	r22, Y+21	; 0x15
     bce:	7e 89       	ldd	r23, Y+22	; 0x16
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 40 09 	call	0x1280	; 0x1280 <vfscanf>
     bd8:	2e 96       	adiw	r28, 0x0e	; 14
     bda:	e2 e0       	ldi	r30, 0x02	; 2
     bdc:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__epilogue_restores__+0x20>

00000be0 <vfprintf>:
     be0:	ac e0       	ldi	r26, 0x0C	; 12
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 ef       	ldi	r30, 0xF6	; 246
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__prologue_saves__>
     bec:	7c 01       	movw	r14, r24
     bee:	6b 01       	movw	r12, r22
     bf0:	8a 01       	movw	r16, r20
     bf2:	fc 01       	movw	r30, r24
     bf4:	17 82       	std	Z+7, r1	; 0x07
     bf6:	16 82       	std	Z+6, r1	; 0x06
     bf8:	83 81       	ldd	r24, Z+3	; 0x03
     bfa:	81 ff       	sbrs	r24, 1
     bfc:	bd c1       	rjmp	.+890    	; 0xf78 <vfprintf+0x398>
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	4c 01       	movw	r8, r24
     c04:	f7 01       	movw	r30, r14
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	f6 01       	movw	r30, r12
     c0a:	93 fd       	sbrc	r25, 3
     c0c:	85 91       	lpm	r24, Z+
     c0e:	93 ff       	sbrs	r25, 3
     c10:	81 91       	ld	r24, Z+
     c12:	6f 01       	movw	r12, r30
     c14:	88 23       	and	r24, r24
     c16:	09 f4       	brne	.+2      	; 0xc1a <vfprintf+0x3a>
     c18:	ab c1       	rjmp	.+854    	; 0xf70 <vfprintf+0x390>
     c1a:	85 32       	cpi	r24, 0x25	; 37
     c1c:	39 f4       	brne	.+14     	; 0xc2c <vfprintf+0x4c>
     c1e:	93 fd       	sbrc	r25, 3
     c20:	85 91       	lpm	r24, Z+
     c22:	93 ff       	sbrs	r25, 3
     c24:	81 91       	ld	r24, Z+
     c26:	6f 01       	movw	r12, r30
     c28:	85 32       	cpi	r24, 0x25	; 37
     c2a:	29 f4       	brne	.+10     	; 0xc36 <vfprintf+0x56>
     c2c:	b7 01       	movw	r22, r14
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     c34:	e7 cf       	rjmp	.-50     	; 0xc04 <vfprintf+0x24>
     c36:	51 2c       	mov	r5, r1
     c38:	31 2c       	mov	r3, r1
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	20 32       	cpi	r18, 0x20	; 32
     c3e:	a0 f4       	brcc	.+40     	; 0xc68 <vfprintf+0x88>
     c40:	8b 32       	cpi	r24, 0x2B	; 43
     c42:	69 f0       	breq	.+26     	; 0xc5e <vfprintf+0x7e>
     c44:	30 f4       	brcc	.+12     	; 0xc52 <vfprintf+0x72>
     c46:	80 32       	cpi	r24, 0x20	; 32
     c48:	59 f0       	breq	.+22     	; 0xc60 <vfprintf+0x80>
     c4a:	83 32       	cpi	r24, 0x23	; 35
     c4c:	69 f4       	brne	.+26     	; 0xc68 <vfprintf+0x88>
     c4e:	20 61       	ori	r18, 0x10	; 16
     c50:	2c c0       	rjmp	.+88     	; 0xcaa <vfprintf+0xca>
     c52:	8d 32       	cpi	r24, 0x2D	; 45
     c54:	39 f0       	breq	.+14     	; 0xc64 <vfprintf+0x84>
     c56:	80 33       	cpi	r24, 0x30	; 48
     c58:	39 f4       	brne	.+14     	; 0xc68 <vfprintf+0x88>
     c5a:	21 60       	ori	r18, 0x01	; 1
     c5c:	26 c0       	rjmp	.+76     	; 0xcaa <vfprintf+0xca>
     c5e:	22 60       	ori	r18, 0x02	; 2
     c60:	24 60       	ori	r18, 0x04	; 4
     c62:	23 c0       	rjmp	.+70     	; 0xcaa <vfprintf+0xca>
     c64:	28 60       	ori	r18, 0x08	; 8
     c66:	21 c0       	rjmp	.+66     	; 0xcaa <vfprintf+0xca>
     c68:	27 fd       	sbrc	r18, 7
     c6a:	27 c0       	rjmp	.+78     	; 0xcba <vfprintf+0xda>
     c6c:	30 ed       	ldi	r19, 0xD0	; 208
     c6e:	38 0f       	add	r19, r24
     c70:	3a 30       	cpi	r19, 0x0A	; 10
     c72:	78 f4       	brcc	.+30     	; 0xc92 <vfprintf+0xb2>
     c74:	26 ff       	sbrs	r18, 6
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <vfprintf+0xa4>
     c78:	fa e0       	ldi	r31, 0x0A	; 10
     c7a:	5f 9e       	mul	r5, r31
     c7c:	30 0d       	add	r19, r0
     c7e:	11 24       	eor	r1, r1
     c80:	53 2e       	mov	r5, r19
     c82:	13 c0       	rjmp	.+38     	; 0xcaa <vfprintf+0xca>
     c84:	8a e0       	ldi	r24, 0x0A	; 10
     c86:	38 9e       	mul	r3, r24
     c88:	30 0d       	add	r19, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	33 2e       	mov	r3, r19
     c8e:	20 62       	ori	r18, 0x20	; 32
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <vfprintf+0xca>
     c92:	8e 32       	cpi	r24, 0x2E	; 46
     c94:	21 f4       	brne	.+8      	; 0xc9e <vfprintf+0xbe>
     c96:	26 fd       	sbrc	r18, 6
     c98:	6b c1       	rjmp	.+726    	; 0xf70 <vfprintf+0x390>
     c9a:	20 64       	ori	r18, 0x40	; 64
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0xca>
     c9e:	8c 36       	cpi	r24, 0x6C	; 108
     ca0:	11 f4       	brne	.+4      	; 0xca6 <vfprintf+0xc6>
     ca2:	20 68       	ori	r18, 0x80	; 128
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0xca>
     ca6:	88 36       	cpi	r24, 0x68	; 104
     ca8:	41 f4       	brne	.+16     	; 0xcba <vfprintf+0xda>
     caa:	f6 01       	movw	r30, r12
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	6f 01       	movw	r12, r30
     cb6:	81 11       	cpse	r24, r1
     cb8:	c1 cf       	rjmp	.-126    	; 0xc3c <vfprintf+0x5c>
     cba:	98 2f       	mov	r25, r24
     cbc:	9f 7d       	andi	r25, 0xDF	; 223
     cbe:	95 54       	subi	r25, 0x45	; 69
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	28 f4       	brcc	.+10     	; 0xcce <vfprintf+0xee>
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	ff e3       	ldi	r31, 0x3F	; 63
     cca:	f9 83       	std	Y+1, r31	; 0x01
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x108>
     cce:	83 36       	cpi	r24, 0x63	; 99
     cd0:	31 f0       	breq	.+12     	; 0xcde <vfprintf+0xfe>
     cd2:	83 37       	cpi	r24, 0x73	; 115
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <vfprintf+0x112>
     cd6:	83 35       	cpi	r24, 0x53	; 83
     cd8:	09 f0       	breq	.+2      	; 0xcdc <vfprintf+0xfc>
     cda:	5b c0       	rjmp	.+182    	; 0xd92 <vfprintf+0x1b2>
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <vfprintf+0x142>
     cde:	f8 01       	movw	r30, r16
     ce0:	80 81       	ld	r24, Z
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	0e 5f       	subi	r16, 0xFE	; 254
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	44 24       	eor	r4, r4
     cea:	43 94       	inc	r4
     cec:	51 2c       	mov	r5, r1
     cee:	54 01       	movw	r10, r8
     cf0:	15 c0       	rjmp	.+42     	; 0xd1c <vfprintf+0x13c>
     cf2:	38 01       	movw	r6, r16
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	6f 0e       	add	r6, r31
     cf8:	71 1c       	adc	r7, r1
     cfa:	f8 01       	movw	r30, r16
     cfc:	a0 80       	ld	r10, Z
     cfe:	b1 80       	ldd	r11, Z+1	; 0x01
     d00:	26 ff       	sbrs	r18, 6
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <vfprintf+0x12a>
     d04:	65 2d       	mov	r22, r5
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x12e>
     d0a:	6f ef       	ldi	r22, 0xFF	; 255
     d0c:	7f ef       	ldi	r23, 0xFF	; 255
     d0e:	c5 01       	movw	r24, r10
     d10:	2c 87       	std	Y+12, r18	; 0x0c
     d12:	0e 94 95 0a 	call	0x152a	; 0x152a <strnlen>
     d16:	2c 01       	movw	r4, r24
     d18:	83 01       	movw	r16, r6
     d1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d1c:	2f 77       	andi	r18, 0x7F	; 127
     d1e:	22 2e       	mov	r2, r18
     d20:	17 c0       	rjmp	.+46     	; 0xd50 <vfprintf+0x170>
     d22:	38 01       	movw	r6, r16
     d24:	f2 e0       	ldi	r31, 0x02	; 2
     d26:	6f 0e       	add	r6, r31
     d28:	71 1c       	adc	r7, r1
     d2a:	f8 01       	movw	r30, r16
     d2c:	a0 80       	ld	r10, Z
     d2e:	b1 80       	ldd	r11, Z+1	; 0x01
     d30:	26 ff       	sbrs	r18, 6
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <vfprintf+0x15a>
     d34:	65 2d       	mov	r22, r5
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <vfprintf+0x15e>
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	7f ef       	ldi	r23, 0xFF	; 255
     d3e:	c5 01       	movw	r24, r10
     d40:	2c 87       	std	Y+12, r18	; 0x0c
     d42:	0e 94 8a 0a 	call	0x1514	; 0x1514 <strnlen_P>
     d46:	2c 01       	movw	r4, r24
     d48:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4a:	20 68       	ori	r18, 0x80	; 128
     d4c:	22 2e       	mov	r2, r18
     d4e:	83 01       	movw	r16, r6
     d50:	23 fc       	sbrc	r2, 3
     d52:	1b c0       	rjmp	.+54     	; 0xd8a <vfprintf+0x1aa>
     d54:	83 2d       	mov	r24, r3
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	48 16       	cp	r4, r24
     d5a:	59 06       	cpc	r5, r25
     d5c:	b0 f4       	brcc	.+44     	; 0xd8a <vfprintf+0x1aa>
     d5e:	b7 01       	movw	r22, r14
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     d68:	3a 94       	dec	r3
     d6a:	f4 cf       	rjmp	.-24     	; 0xd54 <vfprintf+0x174>
     d6c:	f5 01       	movw	r30, r10
     d6e:	27 fc       	sbrc	r2, 7
     d70:	85 91       	lpm	r24, Z+
     d72:	27 fe       	sbrs	r2, 7
     d74:	81 91       	ld	r24, Z+
     d76:	5f 01       	movw	r10, r30
     d78:	b7 01       	movw	r22, r14
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     d80:	31 10       	cpse	r3, r1
     d82:	3a 94       	dec	r3
     d84:	f1 e0       	ldi	r31, 0x01	; 1
     d86:	4f 1a       	sub	r4, r31
     d88:	51 08       	sbc	r5, r1
     d8a:	41 14       	cp	r4, r1
     d8c:	51 04       	cpc	r5, r1
     d8e:	71 f7       	brne	.-36     	; 0xd6c <vfprintf+0x18c>
     d90:	e5 c0       	rjmp	.+458    	; 0xf5c <vfprintf+0x37c>
     d92:	84 36       	cpi	r24, 0x64	; 100
     d94:	11 f0       	breq	.+4      	; 0xd9a <vfprintf+0x1ba>
     d96:	89 36       	cpi	r24, 0x69	; 105
     d98:	39 f5       	brne	.+78     	; 0xde8 <vfprintf+0x208>
     d9a:	f8 01       	movw	r30, r16
     d9c:	27 ff       	sbrs	r18, 7
     d9e:	07 c0       	rjmp	.+14     	; 0xdae <vfprintf+0x1ce>
     da0:	60 81       	ld	r22, Z
     da2:	71 81       	ldd	r23, Z+1	; 0x01
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	93 81       	ldd	r25, Z+3	; 0x03
     da8:	0c 5f       	subi	r16, 0xFC	; 252
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <vfprintf+0x1de>
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	88 27       	eor	r24, r24
     db4:	77 fd       	sbrc	r23, 7
     db6:	80 95       	com	r24
     db8:	98 2f       	mov	r25, r24
     dba:	0e 5f       	subi	r16, 0xFE	; 254
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	2f 76       	andi	r18, 0x6F	; 111
     dc0:	b2 2e       	mov	r11, r18
     dc2:	97 ff       	sbrs	r25, 7
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <vfprintf+0x1f8>
     dc6:	90 95       	com	r25
     dc8:	80 95       	com	r24
     dca:	70 95       	com	r23
     dcc:	61 95       	neg	r22
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	8f 4f       	sbci	r24, 0xFF	; 255
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	20 68       	ori	r18, 0x80	; 128
     dd6:	b2 2e       	mov	r11, r18
     dd8:	2a e0       	ldi	r18, 0x0A	; 10
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	a4 01       	movw	r20, r8
     dde:	0e 94 29 0b 	call	0x1652	; 0x1652 <__ultoa_invert>
     de2:	a8 2e       	mov	r10, r24
     de4:	a8 18       	sub	r10, r8
     de6:	44 c0       	rjmp	.+136    	; 0xe70 <vfprintf+0x290>
     de8:	85 37       	cpi	r24, 0x75	; 117
     dea:	29 f4       	brne	.+10     	; 0xdf6 <vfprintf+0x216>
     dec:	2f 7e       	andi	r18, 0xEF	; 239
     dee:	b2 2e       	mov	r11, r18
     df0:	2a e0       	ldi	r18, 0x0A	; 10
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	25 c0       	rjmp	.+74     	; 0xe40 <vfprintf+0x260>
     df6:	f2 2f       	mov	r31, r18
     df8:	f9 7f       	andi	r31, 0xF9	; 249
     dfa:	bf 2e       	mov	r11, r31
     dfc:	8f 36       	cpi	r24, 0x6F	; 111
     dfe:	c1 f0       	breq	.+48     	; 0xe30 <vfprintf+0x250>
     e00:	18 f4       	brcc	.+6      	; 0xe08 <vfprintf+0x228>
     e02:	88 35       	cpi	r24, 0x58	; 88
     e04:	79 f0       	breq	.+30     	; 0xe24 <vfprintf+0x244>
     e06:	b4 c0       	rjmp	.+360    	; 0xf70 <vfprintf+0x390>
     e08:	80 37       	cpi	r24, 0x70	; 112
     e0a:	19 f0       	breq	.+6      	; 0xe12 <vfprintf+0x232>
     e0c:	88 37       	cpi	r24, 0x78	; 120
     e0e:	21 f0       	breq	.+8      	; 0xe18 <vfprintf+0x238>
     e10:	af c0       	rjmp	.+350    	; 0xf70 <vfprintf+0x390>
     e12:	2f 2f       	mov	r18, r31
     e14:	20 61       	ori	r18, 0x10	; 16
     e16:	b2 2e       	mov	r11, r18
     e18:	b4 fe       	sbrs	r11, 4
     e1a:	0d c0       	rjmp	.+26     	; 0xe36 <vfprintf+0x256>
     e1c:	8b 2d       	mov	r24, r11
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	b8 2e       	mov	r11, r24
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x256>
     e24:	24 ff       	sbrs	r18, 4
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <vfprintf+0x25c>
     e28:	9f 2f       	mov	r25, r31
     e2a:	96 60       	ori	r25, 0x06	; 6
     e2c:	b9 2e       	mov	r11, r25
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0x25c>
     e30:	28 e0       	ldi	r18, 0x08	; 8
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <vfprintf+0x260>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x260>
     e3c:	20 e1       	ldi	r18, 0x10	; 16
     e3e:	32 e0       	ldi	r19, 0x02	; 2
     e40:	f8 01       	movw	r30, r16
     e42:	b7 fe       	sbrs	r11, 7
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <vfprintf+0x274>
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	0c 5f       	subi	r16, 0xFC	; 252
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <vfprintf+0x280>
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 5f       	subi	r16, 0xFE	; 254
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	a4 01       	movw	r20, r8
     e62:	0e 94 29 0b 	call	0x1652	; 0x1652 <__ultoa_invert>
     e66:	a8 2e       	mov	r10, r24
     e68:	a8 18       	sub	r10, r8
     e6a:	fb 2d       	mov	r31, r11
     e6c:	ff 77       	andi	r31, 0x7F	; 127
     e6e:	bf 2e       	mov	r11, r31
     e70:	b6 fe       	sbrs	r11, 6
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <vfprintf+0x2aa>
     e74:	2b 2d       	mov	r18, r11
     e76:	2e 7f       	andi	r18, 0xFE	; 254
     e78:	a5 14       	cp	r10, r5
     e7a:	50 f4       	brcc	.+20     	; 0xe90 <vfprintf+0x2b0>
     e7c:	b4 fe       	sbrs	r11, 4
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <vfprintf+0x2b4>
     e80:	b2 fc       	sbrc	r11, 2
     e82:	08 c0       	rjmp	.+16     	; 0xe94 <vfprintf+0x2b4>
     e84:	2b 2d       	mov	r18, r11
     e86:	2e 7e       	andi	r18, 0xEE	; 238
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <vfprintf+0x2b4>
     e8a:	7a 2c       	mov	r7, r10
     e8c:	2b 2d       	mov	r18, r11
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <vfprintf+0x2b6>
     e90:	7a 2c       	mov	r7, r10
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x2b6>
     e94:	75 2c       	mov	r7, r5
     e96:	24 ff       	sbrs	r18, 4
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <vfprintf+0x2d4>
     e9a:	fe 01       	movw	r30, r28
     e9c:	ea 0d       	add	r30, r10
     e9e:	f1 1d       	adc	r31, r1
     ea0:	80 81       	ld	r24, Z
     ea2:	80 33       	cpi	r24, 0x30	; 48
     ea4:	11 f4       	brne	.+4      	; 0xeaa <vfprintf+0x2ca>
     ea6:	29 7e       	andi	r18, 0xE9	; 233
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <vfprintf+0x2dc>
     eaa:	22 ff       	sbrs	r18, 2
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0x2da>
     eae:	73 94       	inc	r7
     eb0:	73 94       	inc	r7
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <vfprintf+0x2dc>
     eb4:	82 2f       	mov	r24, r18
     eb6:	86 78       	andi	r24, 0x86	; 134
     eb8:	09 f0       	breq	.+2      	; 0xebc <vfprintf+0x2dc>
     eba:	73 94       	inc	r7
     ebc:	23 fd       	sbrc	r18, 3
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <vfprintf+0x306>
     ec0:	20 ff       	sbrs	r18, 0
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0x2f0>
     ec4:	5a 2c       	mov	r5, r10
     ec6:	73 14       	cp	r7, r3
     ec8:	18 f4       	brcc	.+6      	; 0xed0 <vfprintf+0x2f0>
     eca:	53 0c       	add	r5, r3
     ecc:	57 18       	sub	r5, r7
     ece:	73 2c       	mov	r7, r3
     ed0:	73 14       	cp	r7, r3
     ed2:	68 f4       	brcc	.+26     	; 0xeee <vfprintf+0x30e>
     ed4:	b7 01       	movw	r22, r14
     ed6:	80 e2       	ldi	r24, 0x20	; 32
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2c 87       	std	Y+12, r18	; 0x0c
     edc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     ee0:	73 94       	inc	r7
     ee2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee4:	f5 cf       	rjmp	.-22     	; 0xed0 <vfprintf+0x2f0>
     ee6:	73 14       	cp	r7, r3
     ee8:	10 f4       	brcc	.+4      	; 0xeee <vfprintf+0x30e>
     eea:	37 18       	sub	r3, r7
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <vfprintf+0x310>
     eee:	31 2c       	mov	r3, r1
     ef0:	24 ff       	sbrs	r18, 4
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <vfprintf+0x338>
     ef4:	b7 01       	movw	r22, r14
     ef6:	80 e3       	ldi	r24, 0x30	; 48
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	2c 87       	std	Y+12, r18	; 0x0c
     efc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     f00:	2c 85       	ldd	r18, Y+12	; 0x0c
     f02:	22 ff       	sbrs	r18, 2
     f04:	17 c0       	rjmp	.+46     	; 0xf34 <vfprintf+0x354>
     f06:	21 ff       	sbrs	r18, 1
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <vfprintf+0x330>
     f0a:	88 e5       	ldi	r24, 0x58	; 88
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <vfprintf+0x334>
     f10:	88 e7       	ldi	r24, 0x78	; 120
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	b7 01       	movw	r22, r14
     f16:	0c c0       	rjmp	.+24     	; 0xf30 <vfprintf+0x350>
     f18:	82 2f       	mov	r24, r18
     f1a:	86 78       	andi	r24, 0x86	; 134
     f1c:	59 f0       	breq	.+22     	; 0xf34 <vfprintf+0x354>
     f1e:	21 fd       	sbrc	r18, 1
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x346>
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <vfprintf+0x348>
     f26:	8b e2       	ldi	r24, 0x2B	; 43
     f28:	27 fd       	sbrc	r18, 7
     f2a:	8d e2       	ldi	r24, 0x2D	; 45
     f2c:	b7 01       	movw	r22, r14
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     f34:	a5 14       	cp	r10, r5
     f36:	38 f4       	brcc	.+14     	; 0xf46 <vfprintf+0x366>
     f38:	b7 01       	movw	r22, r14
     f3a:	80 e3       	ldi	r24, 0x30	; 48
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     f42:	5a 94       	dec	r5
     f44:	f7 cf       	rjmp	.-18     	; 0xf34 <vfprintf+0x354>
     f46:	aa 94       	dec	r10
     f48:	f4 01       	movw	r30, r8
     f4a:	ea 0d       	add	r30, r10
     f4c:	f1 1d       	adc	r31, r1
     f4e:	80 81       	ld	r24, Z
     f50:	b7 01       	movw	r22, r14
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     f58:	a1 10       	cpse	r10, r1
     f5a:	f5 cf       	rjmp	.-22     	; 0xf46 <vfprintf+0x366>
     f5c:	33 20       	and	r3, r3
     f5e:	09 f4       	brne	.+2      	; 0xf62 <vfprintf+0x382>
     f60:	51 ce       	rjmp	.-862    	; 0xc04 <vfprintf+0x24>
     f62:	b7 01       	movw	r22, r14
     f64:	80 e2       	ldi	r24, 0x20	; 32
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 de 0a 	call	0x15bc	; 0x15bc <fputc>
     f6c:	3a 94       	dec	r3
     f6e:	f6 cf       	rjmp	.-20     	; 0xf5c <vfprintf+0x37c>
     f70:	f7 01       	movw	r30, r14
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	97 81       	ldd	r25, Z+7	; 0x07
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x39c>
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
     f7c:	2c 96       	adiw	r28, 0x0c	; 12
     f7e:	e2 e1       	ldi	r30, 0x12	; 18
     f80:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__epilogue_restores__>

00000f84 <putval>:
     f84:	20 fd       	sbrc	r18, 0
     f86:	09 c0       	rjmp	.+18     	; 0xf9a <putval+0x16>
     f88:	fc 01       	movw	r30, r24
     f8a:	23 fd       	sbrc	r18, 3
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <putval+0x14>
     f8e:	22 ff       	sbrs	r18, 2
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <putval+0x12>
     f92:	73 83       	std	Z+3, r23	; 0x03
     f94:	62 83       	std	Z+2, r22	; 0x02
     f96:	51 83       	std	Z+1, r21	; 0x01
     f98:	40 83       	st	Z, r20
     f9a:	08 95       	ret

00000f9c <mulacc>:
     f9c:	44 fd       	sbrc	r20, 4
     f9e:	10 c0       	rjmp	.+32     	; 0xfc0 <mulacc+0x24>
     fa0:	46 fd       	sbrc	r20, 6
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <mulacc+0x28>
     fa4:	db 01       	movw	r26, r22
     fa6:	fc 01       	movw	r30, r24
     fa8:	aa 0f       	add	r26, r26
     faa:	bb 1f       	adc	r27, r27
     fac:	ee 1f       	adc	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	10 94       	com	r1
     fb2:	d1 f7       	brne	.-12     	; 0xfa8 <mulacc+0xc>
     fb4:	6a 0f       	add	r22, r26
     fb6:	7b 1f       	adc	r23, r27
     fb8:	8e 1f       	adc	r24, r30
     fba:	9f 1f       	adc	r25, r31
     fbc:	31 e0       	ldi	r19, 0x01	; 1
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <mulacc+0x2a>
     fc0:	33 e0       	ldi	r19, 0x03	; 3
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <mulacc+0x2a>
     fc4:	34 e0       	ldi	r19, 0x04	; 4
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	31 50       	subi	r19, 0x01	; 1
     fd0:	d1 f7       	brne	.-12     	; 0xfc6 <mulacc+0x2a>
     fd2:	62 0f       	add	r22, r18
     fd4:	71 1d       	adc	r23, r1
     fd6:	81 1d       	adc	r24, r1
     fd8:	91 1d       	adc	r25, r1
     fda:	08 95       	ret

00000fdc <skip_spaces>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	8c 01       	movw	r16, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
     fec:	ec 01       	movw	r28, r24
     fee:	97 fd       	sbrc	r25, 7
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <skip_spaces+0x26>
     ff2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <isspace>
     ff6:	89 2b       	or	r24, r25
     ff8:	b1 f7       	brne	.-20     	; 0xfe6 <skip_spaces+0xa>
     ffa:	b8 01       	movw	r22, r16
     ffc:	ce 01       	movw	r24, r28
     ffe:	0e 94 10 0b 	call	0x1620	; 0x1620 <ungetc>
    1002:	ce 01       	movw	r24, r28
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <conv_int>:
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
    1026:	a6 2e       	mov	r10, r22
    1028:	4a 01       	movw	r8, r20
    102a:	02 2f       	mov	r16, r18
    102c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    1030:	ac 01       	movw	r20, r24
    1032:	55 27       	eor	r21, r21
    1034:	4b 32       	cpi	r20, 0x2B	; 43
    1036:	51 05       	cpc	r21, r1
    1038:	21 f0       	breq	.+8      	; 0x1042 <conv_int+0x34>
    103a:	4d 32       	cpi	r20, 0x2D	; 45
    103c:	51 05       	cpc	r21, r1
    103e:	51 f4       	brne	.+20     	; 0x1054 <conv_int+0x46>
    1040:	00 68       	ori	r16, 0x80	; 128
    1042:	aa 94       	dec	r10
    1044:	11 f4       	brne	.+4      	; 0x104a <conv_int+0x3c>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	67 c0       	rjmp	.+206    	; 0x1118 <conv_int+0x10a>
    104a:	ce 01       	movw	r24, r28
    104c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    1050:	97 fd       	sbrc	r25, 7
    1052:	f9 cf       	rjmp	.-14     	; 0x1046 <conv_int+0x38>
    1054:	10 2f       	mov	r17, r16
    1056:	1d 7f       	andi	r17, 0xFD	; 253
    1058:	30 2f       	mov	r19, r16
    105a:	30 73       	andi	r19, 0x30	; 48
    105c:	01 f5       	brne	.+64     	; 0x109e <conv_int+0x90>
    105e:	80 33       	cpi	r24, 0x30	; 48
    1060:	f1 f4       	brne	.+60     	; 0x109e <conv_int+0x90>
    1062:	ff 24       	eor	r15, r15
    1064:	fa 94       	dec	r15
    1066:	fa 0c       	add	r15, r10
    1068:	09 f4       	brne	.+2      	; 0x106c <conv_int+0x5e>
    106a:	42 c0       	rjmp	.+132    	; 0x10f0 <conv_int+0xe2>
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    1072:	97 fd       	sbrc	r25, 7
    1074:	3d c0       	rjmp	.+122    	; 0x10f0 <conv_int+0xe2>
    1076:	38 2f       	mov	r19, r24
    1078:	3f 7d       	andi	r19, 0xDF	; 223
    107a:	38 35       	cpi	r19, 0x58	; 88
    107c:	51 f4       	brne	.+20     	; 0x1092 <conv_int+0x84>
    107e:	12 64       	ori	r17, 0x42	; 66
    1080:	aa 94       	dec	r10
    1082:	aa 94       	dec	r10
    1084:	a9 f1       	breq	.+106    	; 0x10f0 <conv_int+0xe2>
    1086:	ce 01       	movw	r24, r28
    1088:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    108c:	97 ff       	sbrs	r25, 7
    108e:	07 c0       	rjmp	.+14     	; 0x109e <conv_int+0x90>
    1090:	2f c0       	rjmp	.+94     	; 0x10f0 <conv_int+0xe2>
    1092:	06 ff       	sbrs	r16, 6
    1094:	02 c0       	rjmp	.+4      	; 0x109a <conv_int+0x8c>
    1096:	12 60       	ori	r17, 0x02	; 2
    1098:	01 c0       	rjmp	.+2      	; 0x109c <conv_int+0x8e>
    109a:	12 61       	ori	r17, 0x12	; 18
    109c:	af 2c       	mov	r10, r15
    109e:	c1 2c       	mov	r12, r1
    10a0:	d1 2c       	mov	r13, r1
    10a2:	76 01       	movw	r14, r12
    10a4:	20 ed       	ldi	r18, 0xD0	; 208
    10a6:	28 0f       	add	r18, r24
    10a8:	28 30       	cpi	r18, 0x08	; 8
    10aa:	80 f0       	brcs	.+32     	; 0x10cc <conv_int+0xbe>
    10ac:	14 ff       	sbrs	r17, 4
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <conv_int+0xaa>
    10b0:	be 01       	movw	r22, r28
    10b2:	0e 94 10 0b 	call	0x1620	; 0x1620 <ungetc>
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <conv_int+0xdc>
    10b8:	2a 30       	cpi	r18, 0x0A	; 10
    10ba:	40 f0       	brcs	.+16     	; 0x10cc <conv_int+0xbe>
    10bc:	16 ff       	sbrs	r17, 6
    10be:	f8 cf       	rjmp	.-16     	; 0x10b0 <conv_int+0xa2>
    10c0:	2f 7d       	andi	r18, 0xDF	; 223
    10c2:	3f ee       	ldi	r19, 0xEF	; 239
    10c4:	32 0f       	add	r19, r18
    10c6:	36 30       	cpi	r19, 0x06	; 6
    10c8:	98 f7       	brcc	.-26     	; 0x10b0 <conv_int+0xa2>
    10ca:	27 50       	subi	r18, 0x07	; 7
    10cc:	41 2f       	mov	r20, r17
    10ce:	c7 01       	movw	r24, r14
    10d0:	b6 01       	movw	r22, r12
    10d2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <mulacc>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	12 60       	ori	r17, 0x02	; 2
    10dc:	aa 94       	dec	r10
    10de:	59 f0       	breq	.+22     	; 0x10f6 <conv_int+0xe8>
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    10e6:	97 ff       	sbrs	r25, 7
    10e8:	dd cf       	rjmp	.-70     	; 0x10a4 <conv_int+0x96>
    10ea:	11 fd       	sbrc	r17, 1
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <conv_int+0xe8>
    10ee:	ab cf       	rjmp	.-170    	; 0x1046 <conv_int+0x38>
    10f0:	c1 2c       	mov	r12, r1
    10f2:	d1 2c       	mov	r13, r1
    10f4:	76 01       	movw	r14, r12
    10f6:	17 ff       	sbrs	r17, 7
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <conv_int+0xfc>
    10fa:	f0 94       	com	r15
    10fc:	e0 94       	com	r14
    10fe:	d0 94       	com	r13
    1100:	c0 94       	com	r12
    1102:	c1 1c       	adc	r12, r1
    1104:	d1 1c       	adc	r13, r1
    1106:	e1 1c       	adc	r14, r1
    1108:	f1 1c       	adc	r15, r1
    110a:	21 2f       	mov	r18, r17
    110c:	b7 01       	movw	r22, r14
    110e:	a6 01       	movw	r20, r12
    1110:	c4 01       	movw	r24, r8
    1112:	0e 94 c2 07 	call	0xf84	; 0xf84 <putval>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	af 90       	pop	r10
    112a:	9f 90       	pop	r9
    112c:	8f 90       	pop	r8
    112e:	08 95       	ret

00001130 <conv_brk>:
    1130:	a1 e2       	ldi	r26, 0x21	; 33
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ee e9       	ldi	r30, 0x9E	; 158
    1136:	f8 e0       	ldi	r31, 0x08	; 8
    1138:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__prologue_saves__+0xa>
    113c:	5c 01       	movw	r10, r24
    113e:	7a 01       	movw	r14, r20
    1140:	8e 01       	movw	r16, r28
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	68 01       	movw	r12, r16
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	d8 01       	movw	r26, r16
    114c:	1d 92       	st	X+, r1
    114e:	8a 95       	dec	r24
    1150:	e9 f7       	brne	.-6      	; 0x114c <conv_brk+0x1c>
    1152:	f5 01       	movw	r30, r10
    1154:	73 80       	ldd	r7, Z+3	; 0x03
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	81 2c       	mov	r8, r1
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	91 2c       	mov	r9, r1
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	f9 01       	movw	r30, r18
    1166:	73 fc       	sbrc	r7, 3
    1168:	a5 91       	lpm	r26, Z+
    116a:	73 fe       	sbrs	r7, 3
    116c:	a1 91       	ld	r26, Z+
    116e:	8f 01       	movw	r16, r30
    1170:	7a 2f       	mov	r23, r26
    1172:	9f 01       	movw	r18, r30
    1174:	a1 11       	cpse	r26, r1
    1176:	03 c0       	rjmp	.+6      	; 0x117e <conv_brk+0x4e>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	7d c0       	rjmp	.+250    	; 0x1278 <conv_brk+0x148>
    117e:	ae 35       	cpi	r26, 0x5E	; 94
    1180:	19 f4       	brne	.+6      	; 0x1188 <conv_brk+0x58>
    1182:	41 15       	cp	r20, r1
    1184:	51 05       	cpc	r21, r1
    1186:	59 f1       	breq	.+86     	; 0x11de <conv_brk+0xae>
    1188:	e9 2d       	mov	r30, r9
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	e4 17       	cp	r30, r20
    118e:	f5 07       	cpc	r31, r21
    1190:	3c f4       	brge	.+14     	; 0x11a0 <conv_brk+0x70>
    1192:	ad 35       	cpi	r26, 0x5D	; 93
    1194:	69 f1       	breq	.+90     	; 0x11f0 <conv_brk+0xc0>
    1196:	ad 32       	cpi	r26, 0x2D	; 45
    1198:	19 f4       	brne	.+6      	; 0x11a0 <conv_brk+0x70>
    119a:	bb 23       	and	r27, r27
    119c:	19 f1       	breq	.+70     	; 0x11e4 <conv_brk+0xb4>
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <conv_brk+0x76>
    11a0:	b1 11       	cpse	r27, r1
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <conv_brk+0x76>
    11a4:	8a 2e       	mov	r8, r26
    11a6:	e7 2f       	mov	r30, r23
    11a8:	e6 95       	lsr	r30
    11aa:	e6 95       	lsr	r30
    11ac:	e6 95       	lsr	r30
    11ae:	86 01       	movw	r16, r12
    11b0:	0e 0f       	add	r16, r30
    11b2:	11 1d       	adc	r17, r1
    11b4:	f8 01       	movw	r30, r16
    11b6:	a7 2f       	mov	r26, r23
    11b8:	a7 70       	andi	r26, 0x07	; 7
    11ba:	8c 01       	movw	r16, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <conv_brk+0x92>
    11be:	00 0f       	add	r16, r16
    11c0:	11 1f       	adc	r17, r17
    11c2:	aa 95       	dec	r26
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <conv_brk+0x8e>
    11c6:	d8 01       	movw	r26, r16
    11c8:	b0 81       	ld	r27, Z
    11ca:	ba 2b       	or	r27, r26
    11cc:	b0 83       	st	Z, r27
    11ce:	78 15       	cp	r23, r8
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <conv_brk+0xb8>
    11d2:	78 15       	cp	r23, r8
    11d4:	10 f4       	brcc	.+4      	; 0x11da <conv_brk+0xaa>
    11d6:	7f 5f       	subi	r23, 0xFF	; 255
    11d8:	e6 cf       	rjmp	.-52     	; 0x11a6 <conv_brk+0x76>
    11da:	71 50       	subi	r23, 0x01	; 1
    11dc:	e4 cf       	rjmp	.-56     	; 0x11a6 <conv_brk+0x76>
    11de:	99 24       	eor	r9, r9
    11e0:	93 94       	inc	r9
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <conv_brk+0xba>
    11e4:	b1 e0       	ldi	r27, 0x01	; 1
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <conv_brk+0xba>
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	4f 5f       	subi	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	ba cf       	rjmp	.-140    	; 0x1164 <conv_brk+0x34>
    11f0:	bb 23       	and	r27, r27
    11f2:	19 f0       	breq	.+6      	; 0x11fa <conv_brk+0xca>
    11f4:	8e 81       	ldd	r24, Y+6	; 0x06
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8e 83       	std	Y+6, r24	; 0x06
    11fa:	91 10       	cpse	r9, r1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <conv_brk+0xd4>
    11fe:	99 24       	eor	r9, r9
    1200:	93 94       	inc	r9
    1202:	15 c0       	rjmp	.+42     	; 0x122e <conv_brk+0xfe>
    1204:	f6 01       	movw	r30, r12
    1206:	ce 01       	movw	r24, r28
    1208:	81 96       	adiw	r24, 0x21	; 33
    120a:	20 81       	ld	r18, Z
    120c:	20 95       	com	r18
    120e:	21 93       	st	Z+, r18
    1210:	e8 17       	cp	r30, r24
    1212:	f9 07       	cpc	r31, r25
    1214:	d1 f7       	brne	.-12     	; 0x120a <conv_brk+0xda>
    1216:	f3 cf       	rjmp	.-26     	; 0x11fe <conv_brk+0xce>
    1218:	e1 14       	cp	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	29 f0       	breq	.+10     	; 0x1228 <conv_brk+0xf8>
    121e:	d7 01       	movw	r26, r14
    1220:	8c 93       	st	X, r24
    1222:	f7 01       	movw	r30, r14
    1224:	31 96       	adiw	r30, 0x01	; 1
    1226:	7f 01       	movw	r14, r30
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	01 f1       	breq	.+64     	; 0x126c <conv_brk+0x13c>
    122c:	91 2c       	mov	r9, r1
    122e:	c5 01       	movw	r24, r10
    1230:	69 a3       	std	Y+33, r22	; 0x21
    1232:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    1236:	69 a1       	ldd	r22, Y+33	; 0x21
    1238:	97 fd       	sbrc	r25, 7
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <conv_brk+0x138>
    123c:	28 2f       	mov	r18, r24
    123e:	26 95       	lsr	r18
    1240:	26 95       	lsr	r18
    1242:	26 95       	lsr	r18
    1244:	f6 01       	movw	r30, r12
    1246:	e2 0f       	add	r30, r18
    1248:	f1 1d       	adc	r31, r1
    124a:	20 81       	ld	r18, Z
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	ac 01       	movw	r20, r24
    1250:	47 70       	andi	r20, 0x07	; 7
    1252:	55 27       	eor	r21, r21
    1254:	02 c0       	rjmp	.+4      	; 0x125a <conv_brk+0x12a>
    1256:	35 95       	asr	r19
    1258:	27 95       	ror	r18
    125a:	4a 95       	dec	r20
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <conv_brk+0x126>
    125e:	20 fd       	sbrc	r18, 0
    1260:	db cf       	rjmp	.-74     	; 0x1218 <conv_brk+0xe8>
    1262:	b5 01       	movw	r22, r10
    1264:	0e 94 10 0b 	call	0x1620	; 0x1620 <ungetc>
    1268:	91 10       	cpse	r9, r1
    126a:	86 cf       	rjmp	.-244    	; 0x1178 <conv_brk+0x48>
    126c:	e1 14       	cp	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	11 f0       	breq	.+4      	; 0x1276 <conv_brk+0x146>
    1272:	d7 01       	movw	r26, r14
    1274:	1c 92       	st	X, r1
    1276:	c8 01       	movw	r24, r16
    1278:	a1 96       	adiw	r28, 0x21	; 33
    127a:	ed e0       	ldi	r30, 0x0D	; 13
    127c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__epilogue_restores__+0xa>

00001280 <vfscanf>:
    1280:	4f 92       	push	r4
    1282:	5f 92       	push	r5
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	1f 92       	push	r1
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8c 01       	movw	r16, r24
    12a6:	2b 01       	movw	r4, r22
    12a8:	7a 01       	movw	r14, r20
    12aa:	fc 01       	movw	r30, r24
    12ac:	17 82       	std	Z+7, r1	; 0x07
    12ae:	16 82       	std	Z+6, r1	; 0x06
    12b0:	a1 2c       	mov	r10, r1
    12b2:	f8 01       	movw	r30, r16
    12b4:	d3 80       	ldd	r13, Z+3	; 0x03
    12b6:	f2 01       	movw	r30, r4
    12b8:	d3 fc       	sbrc	r13, 3
    12ba:	85 91       	lpm	r24, Z+
    12bc:	d3 fe       	sbrs	r13, 3
    12be:	81 91       	ld	r24, Z+
    12c0:	38 2f       	mov	r19, r24
    12c2:	2f 01       	movw	r4, r30
    12c4:	88 23       	and	r24, r24
    12c6:	09 f4       	brne	.+2      	; 0x12ca <vfscanf+0x4a>
    12c8:	fc c0       	rjmp	.+504    	; 0x14c2 <vfscanf+0x242>
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	39 83       	std	Y+1, r19	; 0x01
    12ce:	0e 94 77 0a 	call	0x14ee	; 0x14ee <isspace>
    12d2:	39 81       	ldd	r19, Y+1	; 0x01
    12d4:	89 2b       	or	r24, r25
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <vfscanf+0x60>
    12d8:	c8 01       	movw	r24, r16
    12da:	0e 94 ee 07 	call	0xfdc	; 0xfdc <skip_spaces>
    12de:	e9 cf       	rjmp	.-46     	; 0x12b2 <vfscanf+0x32>
    12e0:	35 32       	cpi	r19, 0x25	; 37
    12e2:	41 f4       	brne	.+16     	; 0x12f4 <vfscanf+0x74>
    12e4:	f2 01       	movw	r30, r4
    12e6:	d3 fc       	sbrc	r13, 3
    12e8:	35 91       	lpm	r19, Z+
    12ea:	d3 fe       	sbrs	r13, 3
    12ec:	31 91       	ld	r19, Z+
    12ee:	2f 01       	movw	r4, r30
    12f0:	35 32       	cpi	r19, 0x25	; 37
    12f2:	69 f4       	brne	.+26     	; 0x130e <vfscanf+0x8e>
    12f4:	c8 01       	movw	r24, r16
    12f6:	39 83       	std	Y+1, r19	; 0x01
    12f8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    12fc:	39 81       	ldd	r19, Y+1	; 0x01
    12fe:	97 fd       	sbrc	r25, 7
    1300:	de c0       	rjmp	.+444    	; 0x14be <vfscanf+0x23e>
    1302:	38 17       	cp	r19, r24
    1304:	b1 f2       	breq	.-84     	; 0x12b2 <vfscanf+0x32>
    1306:	b8 01       	movw	r22, r16
    1308:	0e 94 10 0b 	call	0x1620	; 0x1620 <ungetc>
    130c:	da c0       	rjmp	.+436    	; 0x14c2 <vfscanf+0x242>
    130e:	3a 32       	cpi	r19, 0x2A	; 42
    1310:	41 f4       	brne	.+16     	; 0x1322 <vfscanf+0xa2>
    1312:	d3 fc       	sbrc	r13, 3
    1314:	35 91       	lpm	r19, Z+
    1316:	d3 fe       	sbrs	r13, 3
    1318:	31 91       	ld	r19, Z+
    131a:	2f 01       	movw	r4, r30
    131c:	bb 24       	eor	r11, r11
    131e:	b3 94       	inc	r11
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <vfscanf+0xa4>
    1322:	b1 2c       	mov	r11, r1
    1324:	71 2c       	mov	r7, r1
    1326:	20 ed       	ldi	r18, 0xD0	; 208
    1328:	23 0f       	add	r18, r19
    132a:	2a 30       	cpi	r18, 0x0A	; 10
    132c:	90 f4       	brcc	.+36     	; 0x1352 <vfscanf+0xd2>
    132e:	fb 2d       	mov	r31, r11
    1330:	f2 60       	ori	r31, 0x02	; 2
    1332:	bf 2e       	mov	r11, r31
    1334:	67 2d       	mov	r22, r7
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <mulacc>
    1342:	76 2e       	mov	r7, r22
    1344:	f2 01       	movw	r30, r4
    1346:	d3 fc       	sbrc	r13, 3
    1348:	35 91       	lpm	r19, Z+
    134a:	d3 fe       	sbrs	r13, 3
    134c:	31 91       	ld	r19, Z+
    134e:	2f 01       	movw	r4, r30
    1350:	ea cf       	rjmp	.-44     	; 0x1326 <vfscanf+0xa6>
    1352:	b1 fe       	sbrs	r11, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfscanf+0xdc>
    1356:	71 10       	cpse	r7, r1
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <vfscanf+0xe0>
    135a:	b3 c0       	rjmp	.+358    	; 0x14c2 <vfscanf+0x242>
    135c:	77 24       	eor	r7, r7
    135e:	7a 94       	dec	r7
    1360:	38 36       	cpi	r19, 0x68	; 104
    1362:	19 f0       	breq	.+6      	; 0x136a <vfscanf+0xea>
    1364:	3c 36       	cpi	r19, 0x6C	; 108
    1366:	61 f0       	breq	.+24     	; 0x1380 <vfscanf+0x100>
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <vfscanf+0x112>
    136a:	f2 01       	movw	r30, r4
    136c:	d3 fc       	sbrc	r13, 3
    136e:	35 91       	lpm	r19, Z+
    1370:	d3 fe       	sbrs	r13, 3
    1372:	31 91       	ld	r19, Z+
    1374:	2f 01       	movw	r4, r30
    1376:	38 36       	cpi	r19, 0x68	; 104
    1378:	61 f4       	brne	.+24     	; 0x1392 <vfscanf+0x112>
    137a:	fb 2d       	mov	r31, r11
    137c:	f8 60       	ori	r31, 0x08	; 8
    137e:	bf 2e       	mov	r11, r31
    1380:	8b 2d       	mov	r24, r11
    1382:	84 60       	ori	r24, 0x04	; 4
    1384:	b8 2e       	mov	r11, r24
    1386:	f2 01       	movw	r30, r4
    1388:	d3 fc       	sbrc	r13, 3
    138a:	35 91       	lpm	r19, Z+
    138c:	d3 fe       	sbrs	r13, 3
    138e:	31 91       	ld	r19, Z+
    1390:	2f 01       	movw	r4, r30
    1392:	33 23       	and	r19, r19
    1394:	09 f4       	brne	.+2      	; 0x1398 <vfscanf+0x118>
    1396:	95 c0       	rjmp	.+298    	; 0x14c2 <vfscanf+0x242>
    1398:	63 2f       	mov	r22, r19
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	84 e5       	ldi	r24, 0x54	; 84
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	39 83       	std	Y+1, r19	; 0x01
    13a2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <strchr_P>
    13a6:	39 81       	ldd	r19, Y+1	; 0x01
    13a8:	89 2b       	or	r24, r25
    13aa:	09 f4       	brne	.+2      	; 0x13ae <vfscanf+0x12e>
    13ac:	8a c0       	rjmp	.+276    	; 0x14c2 <vfscanf+0x242>
    13ae:	b0 fc       	sbrc	r11, 0
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <vfscanf+0x140>
    13b2:	f7 01       	movw	r30, r14
    13b4:	c0 80       	ld	r12, Z
    13b6:	d1 80       	ldd	r13, Z+1	; 0x01
    13b8:	c7 01       	movw	r24, r14
    13ba:	02 96       	adiw	r24, 0x02	; 2
    13bc:	7c 01       	movw	r14, r24
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <vfscanf+0x144>
    13c0:	c1 2c       	mov	r12, r1
    13c2:	d1 2c       	mov	r13, r1
    13c4:	3e 36       	cpi	r19, 0x6E	; 110
    13c6:	51 f4       	brne	.+20     	; 0x13dc <vfscanf+0x15c>
    13c8:	f8 01       	movw	r30, r16
    13ca:	46 81       	ldd	r20, Z+6	; 0x06
    13cc:	57 81       	ldd	r21, Z+7	; 0x07
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	2b 2d       	mov	r18, r11
    13d4:	c6 01       	movw	r24, r12
    13d6:	0e 94 c2 07 	call	0xf84	; 0xf84 <putval>
    13da:	6b cf       	rjmp	.-298    	; 0x12b2 <vfscanf+0x32>
    13dc:	33 36       	cpi	r19, 0x63	; 99
    13de:	a1 f4       	brne	.+40     	; 0x1408 <vfscanf+0x188>
    13e0:	b1 fc       	sbrc	r11, 1
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfscanf+0x168>
    13e4:	77 24       	eor	r7, r7
    13e6:	73 94       	inc	r7
    13e8:	c8 01       	movw	r24, r16
    13ea:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    13ee:	97 fd       	sbrc	r25, 7
    13f0:	66 c0       	rjmp	.+204    	; 0x14be <vfscanf+0x23e>
    13f2:	c1 14       	cp	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	29 f0       	breq	.+10     	; 0x1402 <vfscanf+0x182>
    13f8:	f6 01       	movw	r30, r12
    13fa:	80 83       	st	Z, r24
    13fc:	c6 01       	movw	r24, r12
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	6c 01       	movw	r12, r24
    1402:	7a 94       	dec	r7
    1404:	89 f7       	brne	.-30     	; 0x13e8 <vfscanf+0x168>
    1406:	57 c0       	rjmp	.+174    	; 0x14b6 <vfscanf+0x236>
    1408:	3b 35       	cpi	r19, 0x5B	; 91
    140a:	59 f4       	brne	.+22     	; 0x1422 <vfscanf+0x1a2>
    140c:	92 01       	movw	r18, r4
    140e:	a6 01       	movw	r20, r12
    1410:	67 2d       	mov	r22, r7
    1412:	c8 01       	movw	r24, r16
    1414:	0e 94 98 08 	call	0x1130	; 0x1130 <conv_brk>
    1418:	2c 01       	movw	r4, r24
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	09 f0       	breq	.+2      	; 0x1420 <vfscanf+0x1a0>
    141e:	4b c0       	rjmp	.+150    	; 0x14b6 <vfscanf+0x236>
    1420:	45 c0       	rjmp	.+138    	; 0x14ac <vfscanf+0x22c>
    1422:	c8 01       	movw	r24, r16
    1424:	39 83       	std	Y+1, r19	; 0x01
    1426:	0e 94 ee 07 	call	0xfdc	; 0xfdc <skip_spaces>
    142a:	39 81       	ldd	r19, Y+1	; 0x01
    142c:	97 fd       	sbrc	r25, 7
    142e:	47 c0       	rjmp	.+142    	; 0x14be <vfscanf+0x23e>
    1430:	3f 36       	cpi	r19, 0x6F	; 111
    1432:	69 f1       	breq	.+90     	; 0x148e <vfscanf+0x20e>
    1434:	28 f4       	brcc	.+10     	; 0x1440 <vfscanf+0x1c0>
    1436:	34 36       	cpi	r19, 0x64	; 100
    1438:	31 f1       	breq	.+76     	; 0x1486 <vfscanf+0x206>
    143a:	39 36       	cpi	r19, 0x69	; 105
    143c:	79 f1       	breq	.+94     	; 0x149c <vfscanf+0x21c>
    143e:	2b c0       	rjmp	.+86     	; 0x1496 <vfscanf+0x216>
    1440:	33 37       	cpi	r19, 0x73	; 115
    1442:	69 f0       	breq	.+26     	; 0x145e <vfscanf+0x1de>
    1444:	35 37       	cpi	r19, 0x75	; 117
    1446:	f9 f0       	breq	.+62     	; 0x1486 <vfscanf+0x206>
    1448:	26 c0       	rjmp	.+76     	; 0x1496 <vfscanf+0x216>
    144a:	c1 14       	cp	r12, r1
    144c:	d1 04       	cpc	r13, r1
    144e:	29 f0       	breq	.+10     	; 0x145a <vfscanf+0x1da>
    1450:	f6 01       	movw	r30, r12
    1452:	80 82       	st	Z, r8
    1454:	c6 01       	movw	r24, r12
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	6c 01       	movw	r12, r24
    145a:	7a 94       	dec	r7
    145c:	71 f0       	breq	.+28     	; 0x147a <vfscanf+0x1fa>
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 a0 0a 	call	0x1540	; 0x1540 <fgetc>
    1464:	4c 01       	movw	r8, r24
    1466:	97 fd       	sbrc	r25, 7
    1468:	08 c0       	rjmp	.+16     	; 0x147a <vfscanf+0x1fa>
    146a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <isspace>
    146e:	89 2b       	or	r24, r25
    1470:	61 f3       	breq	.-40     	; 0x144a <vfscanf+0x1ca>
    1472:	b8 01       	movw	r22, r16
    1474:	c4 01       	movw	r24, r8
    1476:	0e 94 10 0b 	call	0x1620	; 0x1620 <ungetc>
    147a:	c1 14       	cp	r12, r1
    147c:	d1 04       	cpc	r13, r1
    147e:	d9 f0       	breq	.+54     	; 0x14b6 <vfscanf+0x236>
    1480:	f6 01       	movw	r30, r12
    1482:	10 82       	st	Z, r1
    1484:	18 c0       	rjmp	.+48     	; 0x14b6 <vfscanf+0x236>
    1486:	fb 2d       	mov	r31, r11
    1488:	f0 62       	ori	r31, 0x20	; 32
    148a:	bf 2e       	mov	r11, r31
    148c:	07 c0       	rjmp	.+14     	; 0x149c <vfscanf+0x21c>
    148e:	8b 2d       	mov	r24, r11
    1490:	80 61       	ori	r24, 0x10	; 16
    1492:	b8 2e       	mov	r11, r24
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfscanf+0x21c>
    1496:	9b 2d       	mov	r25, r11
    1498:	90 64       	ori	r25, 0x40	; 64
    149a:	b9 2e       	mov	r11, r25
    149c:	2b 2d       	mov	r18, r11
    149e:	a6 01       	movw	r20, r12
    14a0:	67 2d       	mov	r22, r7
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 07 08 	call	0x100e	; 0x100e <conv_int>
    14a8:	81 11       	cpse	r24, r1
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <vfscanf+0x236>
    14ac:	f8 01       	movw	r30, r16
    14ae:	83 81       	ldd	r24, Z+3	; 0x03
    14b0:	80 73       	andi	r24, 0x30	; 48
    14b2:	29 f4       	brne	.+10     	; 0x14be <vfscanf+0x23e>
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfscanf+0x242>
    14b6:	b0 fc       	sbrc	r11, 0
    14b8:	fc ce       	rjmp	.-520    	; 0x12b2 <vfscanf+0x32>
    14ba:	a3 94       	inc	r10
    14bc:	fa ce       	rjmp	.-524    	; 0x12b2 <vfscanf+0x32>
    14be:	aa 20       	and	r10, r10
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <vfscanf+0x248>
    14c2:	8a 2d       	mov	r24, r10
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfscanf+0x24c>
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	bf 90       	pop	r11
    14e0:	af 90       	pop	r10
    14e2:	9f 90       	pop	r9
    14e4:	8f 90       	pop	r8
    14e6:	7f 90       	pop	r7
    14e8:	5f 90       	pop	r5
    14ea:	4f 90       	pop	r4
    14ec:	08 95       	ret

000014ee <isspace>:
    14ee:	91 11       	cpse	r25, r1
    14f0:	0e c1       	rjmp	.+540    	; 0x170e <__ctype_isfalse>
    14f2:	80 32       	cpi	r24, 0x20	; 32
    14f4:	19 f0       	breq	.+6      	; 0x14fc <isspace+0xe>
    14f6:	89 50       	subi	r24, 0x09	; 9
    14f8:	85 50       	subi	r24, 0x05	; 5
    14fa:	d0 f7       	brcc	.-12     	; 0x14f0 <isspace+0x2>
    14fc:	08 95       	ret

000014fe <strchr_P>:
    14fe:	fc 01       	movw	r30, r24
    1500:	05 90       	lpm	r0, Z+
    1502:	06 16       	cp	r0, r22
    1504:	21 f0       	breq	.+8      	; 0x150e <strchr_P+0x10>
    1506:	00 20       	and	r0, r0
    1508:	d9 f7       	brne	.-10     	; 0x1500 <strchr_P+0x2>
    150a:	c0 01       	movw	r24, r0
    150c:	08 95       	ret
    150e:	31 97       	sbiw	r30, 0x01	; 1
    1510:	cf 01       	movw	r24, r30
    1512:	08 95       	ret

00001514 <strnlen_P>:
    1514:	fc 01       	movw	r30, r24
    1516:	05 90       	lpm	r0, Z+
    1518:	61 50       	subi	r22, 0x01	; 1
    151a:	70 40       	sbci	r23, 0x00	; 0
    151c:	01 10       	cpse	r0, r1
    151e:	d8 f7       	brcc	.-10     	; 0x1516 <strnlen_P+0x2>
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	8e 0f       	add	r24, r30
    1526:	9f 1f       	adc	r25, r31
    1528:	08 95       	ret

0000152a <strnlen>:
    152a:	fc 01       	movw	r30, r24
    152c:	61 50       	subi	r22, 0x01	; 1
    152e:	70 40       	sbci	r23, 0x00	; 0
    1530:	01 90       	ld	r0, Z+
    1532:	01 10       	cpse	r0, r1
    1534:	d8 f7       	brcc	.-10     	; 0x152c <strnlen+0x2>
    1536:	80 95       	com	r24
    1538:	90 95       	com	r25
    153a:	8e 0f       	add	r24, r30
    153c:	9f 1f       	adc	r25, r31
    153e:	08 95       	ret

00001540 <fgetc>:
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ec 01       	movw	r28, r24
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	20 ff       	sbrs	r18, 0
    154a:	33 c0       	rjmp	.+102    	; 0x15b2 <fgetc+0x72>
    154c:	26 ff       	sbrs	r18, 6
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <fgetc+0x24>
    1550:	2f 7b       	andi	r18, 0xBF	; 191
    1552:	2b 83       	std	Y+3, r18	; 0x03
    1554:	8e 81       	ldd	r24, Y+6	; 0x06
    1556:	9f 81       	ldd	r25, Y+7	; 0x07
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	9f 83       	std	Y+7, r25	; 0x07
    155c:	8e 83       	std	Y+6, r24	; 0x06
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	29 c0       	rjmp	.+82     	; 0x15b6 <fgetc+0x76>
    1564:	22 ff       	sbrs	r18, 2
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <fgetc+0x46>
    1568:	e8 81       	ld	r30, Y
    156a:	f9 81       	ldd	r31, Y+1	; 0x01
    156c:	80 81       	ld	r24, Z
    156e:	99 27       	eor	r25, r25
    1570:	87 fd       	sbrc	r24, 7
    1572:	90 95       	com	r25
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	19 f4       	brne	.+6      	; 0x157e <fgetc+0x3e>
    1578:	20 62       	ori	r18, 0x20	; 32
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	1a c0       	rjmp	.+52     	; 0x15b2 <fgetc+0x72>
    157e:	31 96       	adiw	r30, 0x01	; 1
    1580:	f9 83       	std	Y+1, r31	; 0x01
    1582:	e8 83       	st	Y, r30
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <fgetc+0x62>
    1586:	ea 85       	ldd	r30, Y+10	; 0x0a
    1588:	fb 85       	ldd	r31, Y+11	; 0x0b
    158a:	09 95       	icall
    158c:	97 ff       	sbrs	r25, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <fgetc+0x62>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	11 f4       	brne	.+4      	; 0x159a <fgetc+0x5a>
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	01 c0       	rjmp	.+2      	; 0x159c <fgetc+0x5c>
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	82 2b       	or	r24, r18
    159e:	8b 83       	std	Y+3, r24	; 0x03
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <fgetc+0x72>
    15a2:	2e 81       	ldd	r18, Y+6	; 0x06
    15a4:	3f 81       	ldd	r19, Y+7	; 0x07
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	3f 83       	std	Y+7, r19	; 0x07
    15ac:	2e 83       	std	Y+6, r18	; 0x06
    15ae:	99 27       	eor	r25, r25
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <fgetc+0x76>
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <fputc>:
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	18 2f       	mov	r17, r24
    15c6:	09 2f       	mov	r16, r25
    15c8:	eb 01       	movw	r28, r22
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 fd       	sbrc	r24, 1
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <fputc+0x1a>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	20 c0       	rjmp	.+64     	; 0x1616 <fputc+0x5a>
    15d6:	82 ff       	sbrs	r24, 2
    15d8:	10 c0       	rjmp	.+32     	; 0x15fa <fputc+0x3e>
    15da:	4e 81       	ldd	r20, Y+6	; 0x06
    15dc:	5f 81       	ldd	r21, Y+7	; 0x07
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	42 17       	cp	r20, r18
    15e4:	53 07       	cpc	r21, r19
    15e6:	7c f4       	brge	.+30     	; 0x1606 <fputc+0x4a>
    15e8:	e8 81       	ld	r30, Y
    15ea:	f9 81       	ldd	r31, Y+1	; 0x01
    15ec:	9f 01       	movw	r18, r30
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	39 83       	std	Y+1, r19	; 0x01
    15f4:	28 83       	st	Y, r18
    15f6:	10 83       	st	Z, r17
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <fputc+0x4a>
    15fa:	e8 85       	ldd	r30, Y+8	; 0x08
    15fc:	f9 85       	ldd	r31, Y+9	; 0x09
    15fe:	81 2f       	mov	r24, r17
    1600:	09 95       	icall
    1602:	89 2b       	or	r24, r25
    1604:	29 f7       	brne	.-54     	; 0x15d0 <fputc+0x14>
    1606:	2e 81       	ldd	r18, Y+6	; 0x06
    1608:	3f 81       	ldd	r19, Y+7	; 0x07
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	3f 83       	std	Y+7, r19	; 0x07
    1610:	2e 83       	std	Y+6, r18	; 0x06
    1612:	81 2f       	mov	r24, r17
    1614:	90 2f       	mov	r25, r16
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <ungetc>:
    1620:	fb 01       	movw	r30, r22
    1622:	23 81       	ldd	r18, Z+3	; 0x03
    1624:	20 ff       	sbrs	r18, 0
    1626:	12 c0       	rjmp	.+36     	; 0x164c <ungetc+0x2c>
    1628:	26 fd       	sbrc	r18, 6
    162a:	10 c0       	rjmp	.+32     	; 0x164c <ungetc+0x2c>
    162c:	8f 3f       	cpi	r24, 0xFF	; 255
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	93 07       	cpc	r25, r19
    1632:	61 f0       	breq	.+24     	; 0x164c <ungetc+0x2c>
    1634:	82 83       	std	Z+2, r24	; 0x02
    1636:	2f 7d       	andi	r18, 0xDF	; 223
    1638:	20 64       	ori	r18, 0x40	; 64
    163a:	23 83       	std	Z+3, r18	; 0x03
    163c:	26 81       	ldd	r18, Z+6	; 0x06
    163e:	37 81       	ldd	r19, Z+7	; 0x07
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	31 09       	sbc	r19, r1
    1644:	37 83       	std	Z+7, r19	; 0x07
    1646:	26 83       	std	Z+6, r18	; 0x06
    1648:	99 27       	eor	r25, r25
    164a:	08 95       	ret
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	08 95       	ret

00001652 <__ultoa_invert>:
    1652:	fa 01       	movw	r30, r20
    1654:	aa 27       	eor	r26, r26
    1656:	28 30       	cpi	r18, 0x08	; 8
    1658:	51 f1       	breq	.+84     	; 0x16ae <__ultoa_invert+0x5c>
    165a:	20 31       	cpi	r18, 0x10	; 16
    165c:	81 f1       	breq	.+96     	; 0x16be <__ultoa_invert+0x6c>
    165e:	e8 94       	clt
    1660:	6f 93       	push	r22
    1662:	6e 7f       	andi	r22, 0xFE	; 254
    1664:	6e 5f       	subi	r22, 0xFE	; 254
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	af 4f       	sbci	r26, 0xFF	; 255
    166e:	b1 e0       	ldi	r27, 0x01	; 1
    1670:	3e d0       	rcall	.+124    	; 0x16ee <__ultoa_invert+0x9c>
    1672:	b4 e0       	ldi	r27, 0x04	; 4
    1674:	3c d0       	rcall	.+120    	; 0x16ee <__ultoa_invert+0x9c>
    1676:	67 0f       	add	r22, r23
    1678:	78 1f       	adc	r23, r24
    167a:	89 1f       	adc	r24, r25
    167c:	9a 1f       	adc	r25, r26
    167e:	a1 1d       	adc	r26, r1
    1680:	68 0f       	add	r22, r24
    1682:	79 1f       	adc	r23, r25
    1684:	8a 1f       	adc	r24, r26
    1686:	91 1d       	adc	r25, r1
    1688:	a1 1d       	adc	r26, r1
    168a:	6a 0f       	add	r22, r26
    168c:	71 1d       	adc	r23, r1
    168e:	81 1d       	adc	r24, r1
    1690:	91 1d       	adc	r25, r1
    1692:	a1 1d       	adc	r26, r1
    1694:	20 d0       	rcall	.+64     	; 0x16d6 <__ultoa_invert+0x84>
    1696:	09 f4       	brne	.+2      	; 0x169a <__ultoa_invert+0x48>
    1698:	68 94       	set
    169a:	3f 91       	pop	r19
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	26 9f       	mul	r18, r22
    16a0:	11 24       	eor	r1, r1
    16a2:	30 19       	sub	r19, r0
    16a4:	30 5d       	subi	r19, 0xD0	; 208
    16a6:	31 93       	st	Z+, r19
    16a8:	de f6       	brtc	.-74     	; 0x1660 <__ultoa_invert+0xe>
    16aa:	cf 01       	movw	r24, r30
    16ac:	08 95       	ret
    16ae:	46 2f       	mov	r20, r22
    16b0:	47 70       	andi	r20, 0x07	; 7
    16b2:	40 5d       	subi	r20, 0xD0	; 208
    16b4:	41 93       	st	Z+, r20
    16b6:	b3 e0       	ldi	r27, 0x03	; 3
    16b8:	0f d0       	rcall	.+30     	; 0x16d8 <__ultoa_invert+0x86>
    16ba:	c9 f7       	brne	.-14     	; 0x16ae <__ultoa_invert+0x5c>
    16bc:	f6 cf       	rjmp	.-20     	; 0x16aa <__ultoa_invert+0x58>
    16be:	46 2f       	mov	r20, r22
    16c0:	4f 70       	andi	r20, 0x0F	; 15
    16c2:	40 5d       	subi	r20, 0xD0	; 208
    16c4:	4a 33       	cpi	r20, 0x3A	; 58
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <__ultoa_invert+0x7c>
    16c8:	49 5d       	subi	r20, 0xD9	; 217
    16ca:	31 fd       	sbrc	r19, 1
    16cc:	40 52       	subi	r20, 0x20	; 32
    16ce:	41 93       	st	Z+, r20
    16d0:	02 d0       	rcall	.+4      	; 0x16d6 <__ultoa_invert+0x84>
    16d2:	a9 f7       	brne	.-22     	; 0x16be <__ultoa_invert+0x6c>
    16d4:	ea cf       	rjmp	.-44     	; 0x16aa <__ultoa_invert+0x58>
    16d6:	b4 e0       	ldi	r27, 0x04	; 4
    16d8:	a6 95       	lsr	r26
    16da:	97 95       	ror	r25
    16dc:	87 95       	ror	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0x86>
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 05       	cpc	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	08 95       	ret
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	0a 2e       	mov	r0, r26
    16f4:	06 94       	lsr	r0
    16f6:	57 95       	ror	r21
    16f8:	47 95       	ror	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	ba 95       	dec	r27
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__ultoa_invert+0xa2>
    1702:	62 0f       	add	r22, r18
    1704:	73 1f       	adc	r23, r19
    1706:	84 1f       	adc	r24, r20
    1708:	95 1f       	adc	r25, r21
    170a:	a0 1d       	adc	r26, r0
    170c:	08 95       	ret

0000170e <__ctype_isfalse>:
    170e:	99 27       	eor	r25, r25
    1710:	88 27       	eor	r24, r24

00001712 <__ctype_istrue>:
    1712:	08 95       	ret

00001714 <__prologue_saves__>:
    1714:	2f 92       	push	r2
    1716:	3f 92       	push	r3
    1718:	4f 92       	push	r4
    171a:	5f 92       	push	r5
    171c:	6f 92       	push	r6
    171e:	7f 92       	push	r7
    1720:	8f 92       	push	r8
    1722:	9f 92       	push	r9
    1724:	af 92       	push	r10
    1726:	bf 92       	push	r11
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	ca 1b       	sub	r28, r26
    173e:	db 0b       	sbc	r29, r27
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	09 94       	ijmp

0000174c <__epilogue_restores__>:
    174c:	2a 88       	ldd	r2, Y+18	; 0x12
    174e:	39 88       	ldd	r3, Y+17	; 0x11
    1750:	48 88       	ldd	r4, Y+16	; 0x10
    1752:	5f 84       	ldd	r5, Y+15	; 0x0f
    1754:	6e 84       	ldd	r6, Y+14	; 0x0e
    1756:	7d 84       	ldd	r7, Y+13	; 0x0d
    1758:	8c 84       	ldd	r8, Y+12	; 0x0c
    175a:	9b 84       	ldd	r9, Y+11	; 0x0b
    175c:	aa 84       	ldd	r10, Y+10	; 0x0a
    175e:	b9 84       	ldd	r11, Y+9	; 0x09
    1760:	c8 84       	ldd	r12, Y+8	; 0x08
    1762:	df 80       	ldd	r13, Y+7	; 0x07
    1764:	ee 80       	ldd	r14, Y+6	; 0x06
    1766:	fd 80       	ldd	r15, Y+5	; 0x05
    1768:	0c 81       	ldd	r16, Y+4	; 0x04
    176a:	1b 81       	ldd	r17, Y+3	; 0x03
    176c:	aa 81       	ldd	r26, Y+2	; 0x02
    176e:	b9 81       	ldd	r27, Y+1	; 0x01
    1770:	ce 0f       	add	r28, r30
    1772:	d1 1d       	adc	r29, r1
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	ed 01       	movw	r28, r26
    1780:	08 95       	ret

00001782 <_exit>:
    1782:	f8 94       	cli

00001784 <__stop_program>:
    1784:	ff cf       	rjmp	.-2      	; 0x1784 <__stop_program>
