
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000017e0  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000139  0080012e  0080012e  00001942  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa7  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000044ff  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_4>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_9>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_11>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	8c 00       	.word	0x008c	; ????
      56:	ba 02       	muls	r27, r26
      58:	f4 00       	.word	0x00f4	; ????
      5a:	ba 02       	muls	r27, r26
      5c:	58 01       	movw	r10, r16
      5e:	a0 02       	muls	r26, r16
      60:	ba 02       	muls	r27, r26
      62:	ba 02       	muls	r27, r26
      64:	ba 02       	muls	r27, r26
      66:	ba 02       	muls	r27, r26
      68:	ba 02       	muls	r27, r26
      6a:	ba 02       	muls	r27, r26
      6c:	ba 02       	muls	r27, r26
      6e:	ba 02       	muls	r27, r26
      70:	ba 02       	muls	r27, r26
      72:	ba 02       	muls	r27, r26
      74:	ba 02       	muls	r27, r26
      76:	9b 02       	muls	r25, r27
      78:	ba 02       	muls	r27, r26
      7a:	e0 01       	movw	r28, r0
      7c:	41 02       	muls	r20, r17

0000007e <__trampolines_end>:
      7e:	63 64       	ori	r22, 0x43	; 67
      80:	69 6e       	ori	r22, 0xE9	; 233
      82:	6f 70       	andi	r22, 0x0F	; 15
      84:	73 75       	andi	r23, 0x53	; 83
      86:	78 58       	subi	r23, 0x88	; 136
      88:	5b 00       	.word	0x005b	; ????

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e0 ee       	ldi	r30, 0xE0	; 224
      9e:	f7 e1       	ldi	r31, 0x17	; 23
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ae 32       	cpi	r26, 0x2E	; 46
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	ae e2       	ldi	r26, 0x2E	; 46
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a7 36       	cpi	r26, 0x67	; 103
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 38 05 	call	0xa70	; 0xa70 <main>
      c0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	28 97       	sbiw	r28, 0x08	; 8
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      ea:	dc 01       	movw	r26, r24
      ec:	11 96       	adiw	r26, 0x01	; 1
      ee:	fc 90       	ld	r15, X
      f0:	11 97       	sbiw	r26, 0x01	; 1
      f2:	2f 2d       	mov	r18, r15
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	c9 01       	movw	r24, r18
      f8:	c0 97       	sbiw	r24, 0x30	; 48
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	8d 83       	std	Y+5, r24	; 0x05
	switch (code[0]) {
      fe:	4c 91       	ld	r20, X
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	41 54       	subi	r20, 0x41	; 65
     104:	51 09       	sbc	r21, r1
     106:	45 31       	cpi	r20, 0x15	; 21
     108:	51 05       	cpc	r21, r1
     10a:	08 f0       	brcs	.+2      	; 0x10e <runCmd+0x46>
     10c:	33 c2       	rjmp	.+1126   	; 0x574 <__stack+0x115>
     10e:	46 5d       	subi	r20, 0xD6	; 214
     110:	5f 4f       	sbci	r21, 0xFF	; 255
     112:	fa 01       	movw	r30, r20
     114:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__tablejump2__>
	case 'A':		// control port a
		if (code[2] - '0') {
     118:	d8 01       	movw	r26, r16
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	20 33       	cpi	r18, 0x30	; 48
     120:	29 f1       	breq	.+74     	; 0x16c <runCmd+0xa4>
			writeEEPROM(addr, '1');
     122:	61 e3       	ldi	r22, 0x31	; 49
     124:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			PORTA |= 1 << addr;
     128:	2b b3       	in	r18, 0x1b	; 27
     12a:	ee 24       	eor	r14, r14
     12c:	e3 94       	inc	r14
     12e:	f1 2c       	mov	r15, r1
     130:	c7 01       	movw	r24, r14
     132:	0d 80       	ldd	r0, Y+5	; 0x05
     134:	02 c0       	rjmp	.+4      	; 0x13a <runCmd+0x72>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <runCmd+0x6e>
     13e:	28 2b       	or	r18, r24
     140:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     142:	f8 01       	movw	r30, r16
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	1f 92       	push	r1
     148:	8f 93       	push	r24
     14a:	82 e6       	ldi	r24, 0x62	; 98
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	85 e3       	ldi	r24, 0x35	; 53
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
			status |= 1 << addr;
     15e:	0d 80       	ldd	r0, Y+5	; 0x05
     160:	02 c0       	rjmp	.+4      	; 0x166 <runCmd+0x9e>
     162:	ee 0c       	add	r14, r14
     164:	ff 1c       	adc	r15, r15
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <runCmd+0x9a>
     16a:	6a c0       	rjmp	.+212    	; 0x240 <runCmd+0x178>
		} else {
			writeEEPROM(addr, '0');
     16c:	60 e3       	ldi	r22, 0x30	; 48
     16e:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			PORTA &= ~(1 << addr);
     172:	2b b3       	in	r18, 0x1b	; 27
     174:	ee 24       	eor	r14, r14
     176:	e3 94       	inc	r14
     178:	f1 2c       	mov	r15, r1
     17a:	c7 01       	movw	r24, r14
     17c:	0d 80       	ldd	r0, Y+5	; 0x05
     17e:	02 c0       	rjmp	.+4      	; 0x184 <runCmd+0xbc>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <runCmd+0xb8>
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     18e:	d8 01       	movw	r26, r16
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	8c 91       	ld	r24, X
     194:	1f 92       	push	r1
     196:	8f 93       	push	r24
     198:	8e e6       	ldi	r24, 0x6E	; 110
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	85 e3       	ldi	r24, 0x35	; 53
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
			status &= ~(1 << addr);
     1ac:	97 01       	movw	r18, r14
     1ae:	0d 80       	ldd	r0, Y+5	; 0x05
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <runCmd+0xee>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <runCmd+0xea>
     1ba:	20 95       	com	r18
     1bc:	30 95       	com	r19
     1be:	80 91 db 01 	lds	r24, 0x01DB
     1c2:	90 91 dc 01 	lds	r25, 0x01DC
     1c6:	82 23       	and	r24, r18
     1c8:	93 23       	and	r25, r19
     1ca:	90 93 dc 01 	sts	0x01DC, r25
     1ce:	80 93 db 01 	sts	0x01DB, r24
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
		}
		runCmd(buf);
     1de:	85 e3       	ldi	r24, 0x35	; 53
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
		break;
     1e6:	dc c1       	rjmp	.+952    	; 0x5a0 <__stack+0x141>
	case 'C':		// control port c
		if (code[2] - '0') {
     1e8:	f8 01       	movw	r30, r16
     1ea:	22 81       	ldd	r18, Z+2	; 0x02
     1ec:	08 96       	adiw	r24, 0x08	; 8
     1ee:	20 33       	cpi	r18, 0x30	; 48
     1f0:	71 f1       	breq	.+92     	; 0x24e <runCmd+0x186>
			writeEEPROM(8 + addr, '1');
     1f2:	61 e3       	ldi	r22, 0x31	; 49
     1f4:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			PORTC |= 1 << addr;
     1f8:	25 b3       	in	r18, 0x15	; 21
     1fa:	ee 24       	eor	r14, r14
     1fc:	e3 94       	inc	r14
     1fe:	f1 2c       	mov	r15, r1
     200:	c7 01       	movw	r24, r14
     202:	0d 80       	ldd	r0, Y+5	; 0x05
     204:	02 c0       	rjmp	.+4      	; 0x20a <runCmd+0x142>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	0a 94       	dec	r0
     20c:	e2 f7       	brpl	.-8      	; 0x206 <runCmd+0x13e>
     20e:	28 2b       	or	r18, r24
     210:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     212:	d8 01       	movw	r26, r16
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	8c 91       	ld	r24, X
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	8a e7       	ldi	r24, 0x7A	; 122
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	85 e3       	ldi	r24, 0x35	; 53
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
			status |= 1 << (8 + addr);
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	08 96       	adiw	r24, 0x08	; 8
     236:	02 c0       	rjmp	.+4      	; 0x23c <runCmd+0x174>
     238:	ee 0c       	add	r14, r14
     23a:	ff 1c       	adc	r15, r15
     23c:	8a 95       	dec	r24
     23e:	e2 f7       	brpl	.-8      	; 0x238 <runCmd+0x170>
     240:	80 91 db 01 	lds	r24, 0x01DB
     244:	90 91 dc 01 	lds	r25, 0x01DC
     248:	8e 29       	or	r24, r14
     24a:	9f 29       	or	r25, r15
     24c:	be cf       	rjmp	.-132    	; 0x1ca <runCmd+0x102>
		} else {
			writeEEPROM(8 + addr, '0');
     24e:	60 e3       	ldi	r22, 0x30	; 48
     250:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			PORTC &= ~(1 << addr);
     254:	25 b3       	in	r18, 0x15	; 21
     256:	ee 24       	eor	r14, r14
     258:	e3 94       	inc	r14
     25a:	f1 2c       	mov	r15, r1
     25c:	c7 01       	movw	r24, r14
     25e:	0d 80       	ldd	r0, Y+5	; 0x05
     260:	02 c0       	rjmp	.+4      	; 0x266 <runCmd+0x19e>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <runCmd+0x19a>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     270:	f8 01       	movw	r30, r16
     272:	81 81       	ldd	r24, Z+1	; 0x01
     274:	1f 92       	push	r1
     276:	8f 93       	push	r24
     278:	86 e8       	ldi	r24, 0x86	; 134
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	85 e3       	ldi	r24, 0x35	; 53
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
			status ^= ~(1 << (8 + addr));
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	08 96       	adiw	r24, 0x08	; 8
     292:	97 01       	movw	r18, r14
     294:	02 c0       	rjmp	.+4      	; 0x29a <runCmd+0x1d2>
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <runCmd+0x1ce>
     29e:	20 95       	com	r18
     2a0:	30 95       	com	r19
     2a2:	80 91 db 01 	lds	r24, 0x01DB
     2a6:	90 91 dc 01 	lds	r25, 0x01DC
     2aa:	82 27       	eor	r24, r18
     2ac:	93 27       	eor	r25, r19
     2ae:	8d cf       	rjmp	.-230    	; 0x1ca <runCmd+0x102>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2b0:	d8 01       	movw	r26, r16
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	6c 91       	ld	r22, X
     2b6:	69 36       	cpi	r22, 0x69	; 105
     2b8:	81 f4       	brne	.+32     	; 0x2da <runCmd+0x212>
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++) {
				wdt_reset();
     2be:	a8 95       	wdr
				writeEEPROM(i, code[1]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	61 81       	ldd	r22, Z+1	; 0x01
     2c4:	c7 01       	movw	r24, r14
     2c6:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
			for (i = 0; i < 16; i++) {
     2ca:	ff ef       	ldi	r31, 0xFF	; 255
     2cc:	ef 1a       	sub	r14, r31
     2ce:	ff 0a       	sbc	r15, r31
     2d0:	20 e1       	ldi	r18, 0x10	; 16
     2d2:	e2 16       	cp	r14, r18
     2d4:	f1 04       	cpc	r15, r1
     2d6:	99 f7       	brne	.-26     	; 0x2be <runCmd+0x1f6>
     2d8:	63 c1       	rjmp	.+710    	; 0x5a0 <__stack+0x141>
				wdt_reset();
				writeEEPROM(i, code[1]);
			}
		} else if (code[2] == 'f')
     2da:	66 36       	cpi	r22, 0x66	; 102
     2dc:	d1 f4       	brne	.+52     	; 0x312 <runCmd+0x24a>
		{
			if(code[1] == 'a')
     2de:	31 e6       	ldi	r19, 0x61	; 97
     2e0:	f3 12       	cpse	r15, r19
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <runCmd+0x222>
				addr = EEPROM_SIZE;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <runCmd+0x226>
			else
				addr = 16;
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9e 83       	std	Y+6, r25	; 0x06
     2f0:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	08 17       	cp	r16, r24
     2fc:	19 07       	cpc	r17, r25
     2fe:	08 f0       	brcs	.+2      	; 0x302 <runCmd+0x23a>
     300:	4f c1       	rjmp	.+670    	; 0x5a0 <__stack+0x141>
				wdt_reset();
     302:	a8 95       	wdr
				writeEEPROM(i, 0xff);
     304:	6f ef       	ldi	r22, 0xFF	; 255
     306:	c8 01       	movw	r24, r16
     308:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	f2 cf       	rjmp	.-28     	; 0x2f6 <runCmd+0x22e>
				wdt_reset();
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
     312:	62 37       	cpi	r22, 0x72	; 114
     314:	31 f4       	brne	.+12     	; 0x322 <runCmd+0x25a>
			PORTA = ~readEEPROM(code[1]);
     316:	c9 01       	movw	r24, r18
     318:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     31c:	80 95       	com	r24
     31e:	8b bb       	out	0x1b, r24	; 27
     320:	3f c1       	rjmp	.+638    	; 0x5a0 <__stack+0x141>
		} else if (code[1] == 'R') {
     322:	82 e5       	ldi	r24, 0x52	; 82
     324:	f8 12       	cpse	r15, r24
     326:	4a c0       	rjmp	.+148    	; 0x3bc <runCmd+0x2f4>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     328:	ce 01       	movw	r24, r28
     32a:	05 96       	adiw	r24, 0x05	; 5
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	84 eb       	ldi	r24, 0xB4	; 180
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 5f       	subi	r16, 0xFE	; 254
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	1f 93       	push	r17
     33e:	0f 93       	push	r16
     340:	0e 94 04 06 	call	0xc08	; 0xc08 <sscanf>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	69 f4       	brne	.+26     	; 0x36e <runCmd+0x2a6>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     354:	8d 81       	ldd	r24, Y+5	; 0x05
     356:	9e 81       	ldd	r25, Y+6	; 0x06
     358:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     35c:	1f 92       	push	r1
     35e:	8f 93       	push	r24
     360:	8e 81       	ldd	r24, Y+6	; 0x06
     362:	8f 93       	push	r24
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	8f 93       	push	r24
     368:	82 e9       	ldi	r24, 0x92	; 146
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	f1 c0       	rjmp	.+482    	; 0x550 <__stack+0xf1>
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
			PORTA = ~readEEPROM(code[1]);
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     372:	32 e9       	ldi	r19, 0x92	; 146
     374:	c3 2e       	mov	r12, r19
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	d3 2e       	mov	r13, r19
     37a:	45 e3       	ldi	r20, 0x35	; 53
     37c:	e4 2e       	mov	r14, r20
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     382:	c8 01       	movw	r24, r16
     384:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     388:	1f 92       	push	r1
     38a:	8f 93       	push	r24
     38c:	1f 93       	push	r17
     38e:	0f 93       	push	r16
     390:	df 92       	push	r13
     392:	cf 92       	push	r12
     394:	ff 92       	push	r15
     396:	ef 92       	push	r14
     398:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
						readEEPROM(i));
					print(buf);
     39c:	85 e3       	ldi	r24, 0x35	; 53
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	01 15       	cp	r16, r1
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	1f 07       	cpc	r17, r31
     3b8:	21 f7       	brne	.-56     	; 0x382 <runCmd+0x2ba>
     3ba:	f2 c0       	rjmp	.+484    	; 0x5a0 <__stack+0x141>
						readEEPROM(i));
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
     3bc:	c9 01       	movw	r24, r18
     3be:	59 c0       	rjmp	.+178    	; 0x472 <__stack+0x13>
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	03 96       	adiw	r24, 0x03	; 3
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	89 e9       	ldi	r24, 0x99	; 153
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	1f 93       	push	r17
     3d6:	0f 93       	push	r16
     3d8:	0e 94 04 06 	call	0xc08	; 0xc08 <sscanf>
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	02 97       	sbiw	r24, 0x02	; 2
     3e8:	09 f0       	breq	.+2      	; 0x3ec <runCmd+0x324>
     3ea:	46 c0       	rjmp	.+140    	; 0x478 <__stack+0x19>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3ec:	6c 81       	ldd	r22, Y+4	; 0x04
     3ee:	80 91 99 01 	lds	r24, 0x0199
     3f2:	90 91 9a 01 	lds	r25, 0x019A
     3f6:	9c 01       	movw	r18, r24
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	31 09       	sbc	r19, r1
     3fc:	30 93 9a 01 	sts	0x019A, r19
     400:	20 93 99 01 	sts	0x0199, r18
     404:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     408:	6b 81       	ldd	r22, Y+3	; 0x03
     40a:	80 91 99 01 	lds	r24, 0x0199
     40e:	90 91 9a 01 	lds	r25, 0x019A
     412:	9c 01       	movw	r18, r24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	31 09       	sbc	r19, r1
     418:	30 93 9a 01 	sts	0x019A, r19
     41c:	20 93 99 01 	sts	0x0199, r18
     420:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     424:	78 01       	movw	r14, r16
     426:	f8 01       	movw	r30, r16
     428:	01 90       	ld	r0, Z+
     42a:	00 20       	and	r0, r0
     42c:	e9 f7       	brne	.-6      	; 0x428 <runCmd+0x360>
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	e0 1b       	sub	r30, r16
     432:	f1 0b       	sbc	r31, r17
     434:	80 91 99 01 	lds	r24, 0x0199
     438:	90 91 9a 01 	lds	r25, 0x019A
     43c:	97 01       	movw	r18, r14
     43e:	20 1b       	sub	r18, r16
     440:	31 0b       	sbc	r19, r17
     442:	2e 17       	cp	r18, r30
     444:	3f 07       	cpc	r19, r31
     446:	68 f4       	brcc	.+26     	; 0x462 <__stack+0x3>
				writeEEPROM(stackTail--, code[i]);
     448:	d7 01       	movw	r26, r14
     44a:	6d 91       	ld	r22, X+
     44c:	7d 01       	movw	r14, r26
     44e:	9c 01       	movw	r18, r24
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	30 93 9a 01 	sts	0x019A, r19
     458:	20 93 99 01 	sts	0x0199, r18
     45c:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
     460:	e2 cf       	rjmp	.-60     	; 0x426 <runCmd+0x35e>
			}
			writeEEPROM(stackTail--, '\n');
     462:	9c 01       	movw	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	31 09       	sbc	r19, r1
     468:	30 93 9a 01 	sts	0x019A, r19
     46c:	20 93 99 01 	sts	0x0199, r18
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     476:	94 c0       	rjmp	.+296    	; 0x5a0 <__stack+0x141>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     478:	8f e9       	ldi	r24, 0x9F	; 159
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
			return;
     480:	8f c0       	rjmp	.+286    	; 0x5a0 <__stack+0x141>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	02 96       	adiw	r24, 0x02	; 2
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	04 96       	adiw	r24, 0x04	; 4
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	8c ea       	ldi	r24, 0xAC	; 172
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	1f 93       	push	r17
     4a6:	0f 93       	push	r16
     4a8:	0e 94 04 06 	call	0xc08	; 0xc08 <sscanf>
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	04 97       	sbiw	r24, 0x04	; 4
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__stack+0x5d>
     4ba:	72 c0       	rjmp	.+228    	; 0x5a0 <__stack+0x141>
			if (port == 'A')
     4bc:	88 85       	ldd	r24, Y+8	; 0x08
     4be:	81 34       	cpi	r24, 0x41	; 65
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__stack+0x69>
				addr = 16;
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__stack+0x71>
			else if (port == 'C')
     4c8:	83 34       	cpi	r24, 0x43	; 67
     4ca:	b1 f4       	brne	.+44     	; 0x4f8 <__stack+0x99>
				addr = 48;
     4cc:	80 e3       	ldi	r24, 0x30	; 48
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9e 83       	std	Y+6, r25	; 0x06
     4d2:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4d4:	8f 81       	ldd	r24, Y+7	; 0x07
     4d6:	90 ed       	ldi	r25, 0xD0	; 208
     4d8:	98 0f       	add	r25, r24
     4da:	9a 30       	cpi	r25, 0x0A	; 10
     4dc:	90 f4       	brcc	.+36     	; 0x502 <__stack+0xa3>
				addr += (pin - '0') * 4;
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	c0 97       	sbiw	r24, 0x30	; 48
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	2d 81       	ldd	r18, Y+5	; 0x05
     4ec:	3e 81       	ldd	r19, Y+6	; 0x06
     4ee:	28 0f       	add	r18, r24
     4f0:	39 1f       	adc	r19, r25
     4f2:	3e 83       	std	Y+6, r19	; 0x06
     4f4:	2d 83       	std	Y+5, r18	; 0x05
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <__stack+0xa3>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4f8:	87 eb       	ldi	r24, 0xB7	; 183
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <puts>
				return;
     500:	4f c0       	rjmp	.+158    	; 0x5a0 <__stack+0x141>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     502:	6c 81       	ldd	r22, Y+4	; 0x04
     504:	8d 81       	ldd	r24, Y+5	; 0x05
     506:	9e 81       	ldd	r25, Y+6	; 0x06
     508:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			writeEEPROM(addr + 1, time);
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
     510:	6b 81       	ldd	r22, Y+3	; 0x03
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     518:	6a 81       	ldd	r22, Y+2	; 0x02
     51a:	8d 81       	ldd	r24, Y+5	; 0x05
     51c:	9e 81       	ldd	r25, Y+6	; 0x06
     51e:	02 96       	adiw	r24, 0x02	; 2
     520:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	9e 81       	ldd	r25, Y+6	; 0x06
     528:	69 81       	ldd	r22, Y+1	; 0x01
     52a:	03 96       	adiw	r24, 0x03	; 3
     52c:	0e 94 df 02 	call	0x5be	; 0x5be <writeEEPROM>
			setDuty();
     530:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setDuty>
     534:	35 c0       	rjmp	.+106    	; 0x5a0 <__stack+0x141>
		}
		break;
	case 'R':		// Reboot
		print("REBOOTING\n");
     536:	82 ec       	ldi	r24, 0xC2	; 194
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
     53e:	ff cf       	rjmp	.-2      	; 0x53e <__stack+0xdf>
		while (1);
		break;
	case 'F':		// Print CPU frequency
		sprintf(buf, "F_CPU: %ld Hz\n", F_CPU);
     540:	1f 92       	push	r1
     542:	8a e7       	ldi	r24, 0x7A	; 122
     544:	8f 93       	push	r24
     546:	82 e1       	ldi	r24, 0x12	; 18
     548:	8f 93       	push	r24
     54a:	1f 92       	push	r1
     54c:	8d ec       	ldi	r24, 0xCD	; 205
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	9f 93       	push	r25
     552:	8f 93       	push	r24
     554:	85 e3       	ldi	r24, 0x35	; 53
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
		print(buf);
     560:	85 e3       	ldi	r24, 0x35	; 53
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
		break;
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	16 c0       	rjmp	.+44     	; 0x5a0 <__stack+0x141>
	default:
		sprintf(buf, "Unrecognized code:%s\n", code);
     574:	1f 93       	push	r17
     576:	0f 93       	push	r16
     578:	8c ed       	ldi	r24, 0xDC	; 220
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	85 e3       	ldi	r24, 0x35	; 53
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <sprintf>
		print(buf);
     58c:	85 e3       	ldi	r24, 0x35	; 53
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
		break;
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
	}
}
     5a0:	28 96       	adiw	r28, 0x08	; 8
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	08 95       	ret

000005be <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     5be:	e1 99       	sbic	0x1c, 1	; 28
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <writeEEPROM>
	EEAR = addr;
     5c2:	9f bb       	out	0x1f, r25	; 31
     5c4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     5c6:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     5c8:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     5ca:	e1 9a       	sbi	0x1c, 1	; 28
     5cc:	08 95       	ret

000005ce <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     5ce:	e1 99       	sbic	0x1c, 1	; 28
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <readEEPROM>
	EEAR = addr;
     5d2:	9f bb       	out	0x1f, r25	; 31
     5d4:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     5d6:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     5d8:	8d b3       	in	r24, 0x1d	; 29
}
     5da:	08 95       	ret

000005dc <setDuty>:

void setDuty()
{
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	c0 e0       	ldi	r28, 0x00	; 0
     5e8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5ea:	8e 01       	movw	r16, r28
     5ec:	15 95       	asr	r17
     5ee:	07 95       	ror	r16
     5f0:	15 95       	asr	r17
     5f2:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5f4:	ce 01       	movw	r24, r28
     5f6:	40 96       	adiw	r24, 0x10	; 16
     5f8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     5fc:	f8 2e       	mov	r15, r24
     5fe:	ce 01       	movw	r24, r28
     600:	41 96       	adiw	r24, 0x11	; 17
     602:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     606:	00 0f       	add	r16, r16
     608:	11 1f       	adc	r17, r17
     60a:	f8 01       	movw	r30, r16
     60c:	e5 56       	subi	r30, 0x65	; 101
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     610:	2f 2d       	mov	r18, r15
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	32 2f       	mov	r19, r18
     616:	22 27       	eor	r18, r18
     618:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     61a:	31 83       	std	Z+1, r19	; 0x01
     61c:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     61e:	ce 01       	movw	r24, r28
     620:	42 96       	adiw	r24, 0x12	; 18
     622:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     626:	f8 2e       	mov	r15, r24
     628:	ce 01       	movw	r24, r28
     62a:	43 96       	adiw	r24, 0x13	; 19
     62c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     630:	f8 01       	movw	r30, r16
     632:	e5 54       	subi	r30, 0x45	; 69
     634:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     636:	2f 2d       	mov	r18, r15
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	32 2f       	mov	r19, r18
     63c:	22 27       	eor	r18, r18
     63e:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     640:	31 83       	std	Z+1, r19	; 0x01
     642:	20 83       	st	Z, r18
     644:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     646:	c0 34       	cpi	r28, 0x40	; 64
     648:	d1 05       	cpc	r29, r1
     64a:	79 f6       	brne	.-98     	; 0x5ea <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     64c:	40 91 db 01 	lds	r20, 0x01DB
     650:	50 91 dc 01 	lds	r21, 0x01DC
     654:	cb e9       	ldi	r28, 0x9B	; 155
     656:	d1 e0       	ldi	r29, 0x01	; 1
     658:	ed ed       	ldi	r30, 0xDD	; 221
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	ab eb       	ldi	r26, 0xBB	; 187
     65e:	b1 e0       	ldi	r27, 0x01	; 1
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	9b 01       	movw	r18, r22
     66a:	08 2e       	mov	r0, r24
     66c:	02 c0       	rjmp	.+4      	; 0x672 <setDuty+0x96>
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <setDuty+0x92>
     676:	24 23       	and	r18, r20
     678:	35 23       	and	r19, r21
     67a:	23 2b       	or	r18, r19
     67c:	19 f0       	breq	.+6      	; 0x684 <setDuty+0xa8>
			m[i] = dutyH[i];
     67e:	28 81       	ld	r18, Y
     680:	39 81       	ldd	r19, Y+1	; 0x01
     682:	03 c0       	rjmp	.+6      	; 0x68a <setDuty+0xae>
		else
			m[i] = dutyL[i];
     684:	2d 91       	ld	r18, X+
     686:	3c 91       	ld	r19, X
     688:	11 97       	sbiw	r26, 0x01	; 1
     68a:	31 83       	std	Z+1, r19	; 0x01
     68c:	20 83       	st	Z, r18
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	22 96       	adiw	r28, 0x02	; 2
     692:	32 96       	adiw	r30, 0x02	; 2
     694:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     696:	80 31       	cpi	r24, 0x10	; 16
     698:	91 05       	cpc	r25, r1
     69a:	31 f7       	brne	.-52     	; 0x668 <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	08 95       	ret

000006a8 <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	c4 56       	subi	r28, 0x64	; 100
     6e0:	d1 09       	sbc	r29, r1
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     6e6:	80 91 33 01 	lds	r24, 0x0133
     6ea:	90 91 34 01 	lds	r25, 0x0134
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	90 93 34 01 	sts	0x0134, r25
     6f4:	80 93 33 01 	sts	0x0133, r24
	if (t > F_CPU / 256 / 1024) {
     6f8:	4f 97       	sbiw	r24, 0x1f	; 31
     6fa:	08 f4       	brcc	.+2      	; 0x6fe <__vector_9+0x56>
     6fc:	6e c0       	rjmp	.+220    	; 0x7da <__vector_9+0x132>
		t = 0;
     6fe:	10 92 34 01 	sts	0x0134, r1
     702:	10 92 33 01 	sts	0x0133, r1
		seconds++;
     706:	80 91 31 01 	lds	r24, 0x0131
     70a:	90 91 32 01 	lds	r25, 0x0132
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	90 93 32 01 	sts	0x0132, r25
     714:	80 93 31 01 	sts	0x0131, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     718:	80 91 60 00 	lds	r24, 0x0060
     71c:	90 91 61 00 	lds	r25, 0x0061
     720:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     724:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     726:	80 91 60 00 	lds	r24, 0x0060
     72a:	90 91 61 00 	lds	r25, 0x0061
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     734:	21 2f       	mov	r18, r17
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	32 2f       	mov	r19, r18
     73a:	22 27       	eor	r18, r18

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     73c:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     73e:	2f 3f       	cpi	r18, 0xFF	; 255
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	38 07       	cpc	r19, r24
     744:	09 f4       	brne	.+2      	; 0x748 <__vector_9+0xa0>
     746:	49 c0       	rjmp	.+146    	; 0x7da <__vector_9+0x132>
			if (seconds >= time) {
     748:	80 91 31 01 	lds	r24, 0x0131
     74c:	90 91 32 01 	lds	r25, 0x0132
     750:	82 17       	cp	r24, r18
     752:	93 07       	cpc	r25, r19
     754:	08 f4       	brcc	.+2      	; 0x758 <__vector_9+0xb0>
     756:	41 c0       	rjmp	.+130    	; 0x7da <__vector_9+0x132>
				p -= 2;
     758:	80 91 60 00 	lds	r24, 0x0060
     75c:	90 91 61 00 	lds	r25, 0x0061
     760:	02 97       	sbiw	r24, 0x02	; 2
     762:	90 93 61 00 	sts	0x0061, r25
     766:	80 93 60 00 	sts	0x0060, r24
     76a:	8e 01       	movw	r16, r28
     76c:	0f 5f       	subi	r16, 0xFF	; 255
     76e:	1f 4f       	sbci	r17, 0xFF	; 255
     770:	78 01       	movw	r14, r16
     772:	68 01       	movw	r12, r16
     774:	ce 18       	sub	r12, r14
     776:	df 08       	sbc	r13, r15
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     778:	80 91 60 00 	lds	r24, 0x0060
     77c:	90 91 61 00 	lds	r25, 0x0061
     780:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     784:	f8 01       	movw	r30, r16
     786:	81 93       	st	Z+, r24
     788:	8f 01       	movw	r16, r30
     78a:	20 91 60 00 	lds	r18, 0x0060
     78e:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     792:	8a 30       	cpi	r24, 0x0A	; 10
     794:	c9 f4       	brne	.+50     	; 0x7c8 <__vector_9+0x120>
					    cmd[i + 1] = 0;
     796:	fe 01       	movw	r30, r28
     798:	ec 0d       	add	r30, r12
     79a:	fd 1d       	adc	r31, r13
     79c:	12 82       	std	Z+2, r1	; 0x02
						p--;
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	31 09       	sbc	r19, r1
     7a2:	30 93 61 00 	sts	0x0061, r19
     7a6:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				print("Auto running command:");
     7aa:	82 ef       	ldi	r24, 0xF2	; 242
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
				print(cmd);
     7b2:	c7 01       	movw	r24, r14
     7b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
				runCmd(cmd);
     7b8:	c7 01       	movw	r24, r14
     7ba:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
				seconds = 0;
     7be:	10 92 32 01 	sts	0x0132, r1
     7c2:	10 92 31 01 	sts	0x0131, r1
     7c6:	09 c0       	rjmp	.+18     	; 0x7da <__vector_9+0x132>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     7c8:	83 31       	cpi	r24, 0x13	; 19
     7ca:	29 f3       	breq	.-54     	; 0x796 <__vector_9+0xee>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     7cc:	21 50       	subi	r18, 0x01	; 1
     7ce:	31 09       	sbc	r19, r1
     7d0:	30 93 61 00 	sts	0x0061, r19
     7d4:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     7d8:	cc cf       	rjmp	.-104    	; 0x772 <__vector_9+0xca>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     7da:	cc 59       	subi	r28, 0x9C	; 156
     7dc:	df 4f       	sbci	r29, 0xFF	; 255
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0
     816:	1f 90       	pop	r1
     818:	18 95       	reti

0000081a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     844:	80 91 2f 01 	lds	r24, 0x012F
     848:	90 91 30 01 	lds	r25, 0x0130
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	90 93 30 01 	sts	0x0130, r25
     852:	80 93 2f 01 	sts	0x012F, r24
	if (t > F_CPU / 256 / 1024) {
     856:	4f 97       	sbiw	r24, 0x1f	; 31
     858:	08 f4       	brcc	.+2      	; 0x85c <__vector_4+0x42>
     85a:	61 c0       	rjmp	.+194    	; 0x91e <__vector_4+0x104>
		t = 0;
     85c:	10 92 30 01 	sts	0x0130, r1
     860:	10 92 2f 01 	sts	0x012F, r1
		sec++;
     864:	80 91 2e 01 	lds	r24, 0x012E
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	80 93 2e 01 	sts	0x012E, r24
		if (sec >= 60) {
     86e:	8c 33       	cpi	r24, 0x3C	; 60
     870:	08 f4       	brcc	.+2      	; 0x874 <__vector_4+0x5a>
     872:	55 c0       	rjmp	.+170    	; 0x91e <__vector_4+0x104>
			sec = 0;
     874:	10 92 2e 01 	sts	0x012E, r1
     878:	ed ed       	ldi	r30, 0xDD	; 221
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	cb eb       	ldi	r28, 0xBB	; 187
     87e:	d1 e0       	ldi	r29, 0x01	; 1
     880:	ab e9       	ldi	r26, 0x9B	; 155
     882:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     88c:	40 81       	ld	r20, Z
     88e:	51 81       	ldd	r21, Z+1	; 0x01
     890:	41 15       	cp	r20, r1
     892:	51 05       	cpc	r21, r1
     894:	29 f0       	breq	.+10     	; 0x8a0 <__vector_4+0x86>
					m[i]--;
     896:	41 50       	subi	r20, 0x01	; 1
     898:	51 09       	sbc	r21, r1
     89a:	51 83       	std	Z+1, r21	; 0x01
     89c:	40 83       	st	Z, r20
     89e:	37 c0       	rjmp	.+110    	; 0x90e <__vector_4+0xf4>
				} else {
					if (i < 8) {
     8a0:	88 30       	cpi	r24, 0x08	; 8
     8a2:	91 05       	cpc	r25, r1
     8a4:	50 f4       	brcc	.+20     	; 0x8ba <__vector_4+0xa0>
						PORTA ^= 1 << i;
     8a6:	6b b3       	in	r22, 0x1b	; 27
     8a8:	a9 01       	movw	r20, r18
     8aa:	08 2e       	mov	r0, r24
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__vector_4+0x96>
     8ae:	44 0f       	add	r20, r20
     8b0:	0a 94       	dec	r0
     8b2:	ea f7       	brpl	.-6      	; 0x8ae <__vector_4+0x94>
     8b4:	64 27       	eor	r22, r20
     8b6:	6b bb       	out	0x1b, r22	; 27
     8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     8ba:	65 b3       	in	r22, 0x15	; 21
     8bc:	ac 01       	movw	r20, r24
     8be:	48 50       	subi	r20, 0x08	; 8
     8c0:	51 09       	sbc	r21, r1
     8c2:	89 01       	movw	r16, r18
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__vector_4+0xb0>
     8c6:	00 0f       	add	r16, r16
     8c8:	11 1f       	adc	r17, r17
     8ca:	4a 95       	dec	r20
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__vector_4+0xac>
     8ce:	60 27       	eor	r22, r16
     8d0:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     8d2:	60 91 db 01 	lds	r22, 0x01DB
     8d6:	70 91 dc 01 	lds	r23, 0x01DC
     8da:	a9 01       	movw	r20, r18
     8dc:	08 2e       	mov	r0, r24
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__vector_4+0xca>
     8e0:	44 0f       	add	r20, r20
     8e2:	55 1f       	adc	r21, r21
     8e4:	0a 94       	dec	r0
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__vector_4+0xc6>
     8e8:	8a 01       	movw	r16, r20
     8ea:	06 23       	and	r16, r22
     8ec:	17 23       	and	r17, r23
     8ee:	01 2b       	or	r16, r17
     8f0:	19 f0       	breq	.+6      	; 0x8f8 <__vector_4+0xde>
						m[i] = dutyL[i];
     8f2:	08 81       	ld	r16, Y
     8f4:	19 81       	ldd	r17, Y+1	; 0x01
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     8f8:	0d 91       	ld	r16, X+
     8fa:	1c 91       	ld	r17, X
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	11 83       	std	Z+1, r17	; 0x01
     900:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     902:	46 27       	eor	r20, r22
     904:	57 27       	eor	r21, r23
     906:	50 93 dc 01 	sts	0x01DC, r21
     90a:	40 93 db 01 	sts	0x01DB, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	32 96       	adiw	r30, 0x02	; 2
     912:	22 96       	adiw	r28, 0x02	; 2
     914:	12 96       	adiw	r26, 0x02	; 2
     916:	80 31       	cpi	r24, 0x10	; 16
     918:	91 05       	cpc	r25, r1
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_4+0x104>
     91c:	b7 cf       	rjmp	.-146    	; 0x88c <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_11>:

ISR(USART_RXC_vect)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	c4 56       	subi	r28, 0x64	; 100
     980:	d1 09       	sbc	r29, r1
     982:	de bf       	out	0x3e, r29	; 62
     984:	cd bf       	out	0x3d, r28	; 61
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	7c 01       	movw	r14, r24
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     990:	0e 94 9d 05 	call	0xb3a	; 0xb3a <receiveUSART>
     994:	f7 01       	movw	r30, r14
     996:	81 93       	st	Z+, r24
     998:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     99a:	83 31       	cpi	r24, 0x13	; 19
     99c:	41 f4       	brne	.+16     	; 0x9ae <__vector_11+0x66>
			codeUSART[i] = '\0';
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ec 0f       	add	r30, r28
     9a4:	fd 1f       	adc	r31, r29
     9a6:	e0 0f       	add	r30, r16
     9a8:	f1 1f       	adc	r31, r17
     9aa:	10 82       	st	Z, r1
			break;
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     9ae:	8a 30       	cpi	r24, 0x0A	; 10
     9b0:	b1 f3       	breq	.-20     	; 0x99e <__vector_11+0x56>
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     9b6:	04 36       	cpi	r16, 0x64	; 100
     9b8:	11 05       	cpc	r17, r1
     9ba:	51 f7       	brne	.-44     	; 0x990 <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	88 23       	and	r24, r24
     9c0:	e1 f0       	breq	.+56     	; 0x9fa <__vector_11+0xb2>
		print("\nReceived:\n");
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
     9ca:	6e 01       	movw	r12, r28
     9cc:	f5 e6       	ldi	r31, 0x65	; 101
     9ce:	cf 0e       	add	r12, r31
     9d0:	d1 1c       	adc	r13, r1
     9d2:	8e 01       	movw	r16, r28
     9d4:	0f 5f       	subi	r16, 0xFF	; 255
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     9da:	f8 01       	movw	r30, r16
     9dc:	81 91       	ld	r24, Z+
     9de:	8f 01       	movw	r16, r30
     9e0:	0e 94 97 05 	call	0xb2e	; 0xb2e <sendUSART>
			if (codeUSART[i] == '\0')
     9e4:	f7 01       	movw	r30, r14
     9e6:	80 81       	ld	r24, Z
     9e8:	88 23       	and	r24, r24
     9ea:	19 f0       	breq	.+6      	; 0x9f2 <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     9ec:	0c 15       	cp	r16, r12
     9ee:	1d 05       	cpc	r17, r13
     9f0:	99 f7       	brne	.-26     	; 0x9d8 <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     9f2:	8a ea       	ldi	r24, 0xAA	; 170
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
	}

	runCmd(codeUSART);
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
}
     a02:	cc 59       	subi	r28, 0x9C	; 156
     a04:	df 4f       	sbci	r29, 0xFF	; 255
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <initUSART>:

void initUSART()
{
	UCSRA |= (1 << U2X);
     a42:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     a44:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;		// 9600Hz on 8MHz F_CPU
     a46:	87 e6       	ldi	r24, 0x67	; 103
     a48:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     a4a:	88 e9       	ldi	r24, 0x98	; 152
     a4c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     a4e:	86 e8       	ldi	r24, 0x86	; 134
     a50:	80 bd       	out	0x20, r24	; 32
     a52:	08 95       	ret

00000a54 <initTimer0>:
}

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     a58:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     a5a:	89 b7       	in	r24, 0x39	; 57
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	89 bf       	out	0x39, r24	; 57
     a60:	08 95       	ret

00000a62 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     a66:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     a68:	89 b7       	in	r24, 0x39	; 57
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	89 bf       	out	0x39, r24	; 57
     a6e:	08 95       	ret

00000a70 <main>:

int main()
{
	uint8_t i;

	wdt_enable(WDTO_60MS);
     a70:	2a e0       	ldi	r18, 0x0A	; 10
     a72:	88 e1       	ldi	r24, 0x18	; 24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	a8 95       	wdr
     a7c:	81 bd       	out	0x21, r24	; 33
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	21 bd       	out	0x21, r18	; 33

	PORTA = 0x00;
     a82:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
     a84:	15 ba       	out	0x15, r1	; 21
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     a8a:	8b b3       	in	r24, 0x1b	; 27
     a8c:	86 95       	lsr	r24
     a8e:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a90:	1b b3       	in	r17, 0x1b	; 27
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     a98:	20 e8       	ldi	r18, 0x80	; 128
     a9a:	82 9f       	mul	r24, r18
     a9c:	c0 01       	movw	r24, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	81 2b       	or	r24, r17
     aa2:	8b bb       	out	0x1b, r24	; 27
     aa4:	21 96       	adiw	r28, 0x01	; 1
	wdt_enable(WDTO_60MS);

	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
     aa6:	c8 30       	cpi	r28, 0x08	; 8
     aa8:	d1 05       	cpc	r29, r1
     aaa:	79 f7       	brne	.-34     	; 0xa8a <main+0x1a>
     aac:	c8 e0       	ldi	r28, 0x08	; 8
     aae:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     ab0:	85 b3       	in	r24, 0x15	; 21
     ab2:	86 95       	lsr	r24
     ab4:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     ab6:	15 b3       	in	r17, 0x15	; 21
     ab8:	ce 01       	movw	r24, r28
     aba:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     abe:	20 e8       	ldi	r18, 0x80	; 128
     ac0:	82 9f       	mul	r24, r18
     ac2:	c0 01       	movw	r24, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	81 2b       	or	r24, r17
     ac8:	85 bb       	out	0x15, r24	; 21
     aca:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     acc:	c0 31       	cpi	r28, 0x10	; 16
     ace:	d1 05       	cpc	r29, r1
     ad0:	79 f7       	brne	.-34     	; 0xab0 <main+0x40>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	DDRA = 0xff;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     ad6:	84 bb       	out	0x14, r24	; 20

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	90 93 9a 01 	sts	0x019A, r25
     ae0:	80 93 99 01 	sts	0x0199, r24
     ae4:	80 91 99 01 	lds	r24, 0x0199
     ae8:	90 91 9a 01 	lds	r25, 0x019A
     aec:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readEEPROM>
     af0:	8f 3f       	cpi	r24, 0xFF	; 255
     af2:	31 f0       	breq	.+12     	; 0xb00 <main+0x90>
     af4:	80 91 99 01 	lds	r24, 0x0199
     af8:	90 91 9a 01 	lds	r25, 0x019A
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	ee cf       	rjmp	.-36     	; 0xadc <main+0x6c>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     b00:	25 b3       	in	r18, 0x15	; 21
     b02:	8b b3       	in	r24, 0x1b	; 27
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	92 2b       	or	r25, r18
     b08:	90 93 dc 01 	sts	0x01DC, r25
     b0c:	80 93 db 01 	sts	0x01DB, r24

	initUSART();
     b10:	0e 94 21 05 	call	0xa42	; 0xa42 <initUSART>

	setDuty();
     b14:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setDuty>

	initTimer0();
     b18:	0e 94 2a 05 	call	0xa54	; 0xa54 <initTimer0>

	initTimer2();
     b1c:	0e 94 31 05 	call	0xa62	; 0xa62 <initTimer2>

	sei();
     b20:	78 94       	sei

	print("\nEntering the main loop\n");
     b22:	84 e1       	ldi	r24, 0x14	; 20
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 a3 05 	call	0xb46	; 0xb46 <print>
	while (1)
		wdt_reset();
     b2a:	a8 95       	wdr
     b2c:	fe cf       	rjmp	.-4      	; 0xb2a <main+0xba>

00000b2e <sendUSART>:

#include "usart.h"

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE)))
     b2e:	5d 99       	sbic	0x0b, 5	; 11
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <sendUSART+0x8>
		wdt_reset();
     b32:	a8 95       	wdr
     b34:	fc cf       	rjmp	.-8      	; 0xb2e <sendUSART>
	UDR = data;
     b36:	8c b9       	out	0x0c, r24	; 12
     b38:	08 95       	ret

00000b3a <receiveUSART>:
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC)))
     b3a:	5f 99       	sbic	0x0b, 7	; 11
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <receiveUSART+0x8>
		wdt_reset();
     b3e:	a8 95       	wdr
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <receiveUSART>
	return UDR;
     b42:	8c b1       	in	r24, 0x0c	; 12
}
     b44:	08 95       	ret

00000b46 <print>:

void print(char *s)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
	while (*s) {
     b4c:	89 91       	ld	r24, Y+
     b4e:	88 23       	and	r24, r24
     b50:	19 f0       	breq	.+6      	; 0xb58 <print+0x12>
		sendUSART(*s);
     b52:	0e 94 97 05 	call	0xb2e	; 0xb2e <sendUSART>
     b56:	fa cf       	rjmp	.-12     	; 0xb4c <print+0x6>
		s++;
	}
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <__tablejump2__>:
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31

00000b62 <__tablejump__>:
     b62:	05 90       	lpm	r0, Z+
     b64:	f4 91       	lpm	r31, Z
     b66:	e0 2d       	mov	r30, r0
     b68:	09 94       	ijmp

00000b6a <puts>:
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	e0 91 63 02 	lds	r30, 0x0263
     b76:	f0 91 64 02 	lds	r31, 0x0264
     b7a:	23 81       	ldd	r18, Z+3	; 0x03
     b7c:	21 ff       	sbrs	r18, 1
     b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <puts+0x4c>
     b80:	ec 01       	movw	r28, r24
     b82:	00 e0       	ldi	r16, 0x00	; 0
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	89 91       	ld	r24, Y+
     b88:	60 91 63 02 	lds	r22, 0x0263
     b8c:	70 91 64 02 	lds	r23, 0x0264
     b90:	db 01       	movw	r26, r22
     b92:	18 96       	adiw	r26, 0x08	; 8
     b94:	ed 91       	ld	r30, X+
     b96:	fc 91       	ld	r31, X
     b98:	19 97       	sbiw	r26, 0x09	; 9
     b9a:	88 23       	and	r24, r24
     b9c:	31 f0       	breq	.+12     	; 0xbaa <puts+0x40>
     b9e:	09 95       	icall
     ba0:	89 2b       	or	r24, r25
     ba2:	89 f3       	breq	.-30     	; 0xb86 <puts+0x1c>
     ba4:	0f ef       	ldi	r16, 0xFF	; 255
     ba6:	1f ef       	ldi	r17, 0xFF	; 255
     ba8:	ee cf       	rjmp	.-36     	; 0xb86 <puts+0x1c>
     baa:	8a e0       	ldi	r24, 0x0A	; 10
     bac:	09 95       	icall
     bae:	89 2b       	or	r24, r25
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <puts+0x4c>
     bb2:	c8 01       	movw	r24, r16
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <puts+0x50>
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <sprintf>:
     bc4:	ae e0       	ldi	r26, 0x0E	; 14
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__prologue_saves__+0x1c>
     bd0:	0d 89       	ldd	r16, Y+21	; 0x15
     bd2:	1e 89       	ldd	r17, Y+22	; 0x16
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	8c 83       	std	Y+4, r24	; 0x04
     bd8:	1a 83       	std	Y+2, r17	; 0x02
     bda:	09 83       	std	Y+1, r16	; 0x01
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	9f e7       	ldi	r25, 0x7F	; 127
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	8d 83       	std	Y+5, r24	; 0x05
     be4:	ae 01       	movw	r20, r28
     be6:	47 5e       	subi	r20, 0xE7	; 231
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	6f 89       	ldd	r22, Y+23	; 0x17
     bec:	78 8d       	ldd	r23, Y+24	; 0x18
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <vfprintf>
     bf6:	ef 81       	ldd	r30, Y+7	; 0x07
     bf8:	f8 85       	ldd	r31, Y+8	; 0x08
     bfa:	e0 0f       	add	r30, r16
     bfc:	f1 1f       	adc	r31, r17
     bfe:	10 82       	st	Z, r1
     c00:	2e 96       	adiw	r28, 0x0e	; 14
     c02:	e4 e0       	ldi	r30, 0x04	; 4
     c04:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__epilogue_restores__+0x1c>

00000c08 <sscanf>:
     c08:	ae e0       	ldi	r26, 0x0E	; 14
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__prologue_saves__+0x20>
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	8c 83       	std	Y+4, r24	; 0x04
     c18:	8b 89       	ldd	r24, Y+19	; 0x13
     c1a:	9c 89       	ldd	r25, Y+20	; 0x14
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	ae 01       	movw	r20, r28
     c22:	49 5e       	subi	r20, 0xE9	; 233
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	6d 89       	ldd	r22, Y+21	; 0x15
     c28:	7e 89       	ldd	r23, Y+22	; 0x16
     c2a:	ce 01       	movw	r24, r28
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	0e 94 6d 09 	call	0x12da	; 0x12da <vfscanf>
     c32:	2e 96       	adiw	r28, 0x0e	; 14
     c34:	e2 e0       	ldi	r30, 0x02	; 2
     c36:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__epilogue_restores__+0x20>

00000c3a <vfprintf>:
     c3a:	ac e0       	ldi	r26, 0x0C	; 12
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e2       	ldi	r30, 0x23	; 35
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__prologue_saves__>
     c46:	7c 01       	movw	r14, r24
     c48:	6b 01       	movw	r12, r22
     c4a:	8a 01       	movw	r16, r20
     c4c:	fc 01       	movw	r30, r24
     c4e:	17 82       	std	Z+7, r1	; 0x07
     c50:	16 82       	std	Z+6, r1	; 0x06
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	81 ff       	sbrs	r24, 1
     c56:	bd c1       	rjmp	.+890    	; 0xfd2 <vfprintf+0x398>
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	4c 01       	movw	r8, r24
     c5e:	f7 01       	movw	r30, r14
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	f6 01       	movw	r30, r12
     c64:	93 fd       	sbrc	r25, 3
     c66:	85 91       	lpm	r24, Z+
     c68:	93 ff       	sbrs	r25, 3
     c6a:	81 91       	ld	r24, Z+
     c6c:	6f 01       	movw	r12, r30
     c6e:	88 23       	and	r24, r24
     c70:	09 f4       	brne	.+2      	; 0xc74 <vfprintf+0x3a>
     c72:	ab c1       	rjmp	.+854    	; 0xfca <vfprintf+0x390>
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	39 f4       	brne	.+14     	; 0xc86 <vfprintf+0x4c>
     c78:	93 fd       	sbrc	r25, 3
     c7a:	85 91       	lpm	r24, Z+
     c7c:	93 ff       	sbrs	r25, 3
     c7e:	81 91       	ld	r24, Z+
     c80:	6f 01       	movw	r12, r30
     c82:	85 32       	cpi	r24, 0x25	; 37
     c84:	29 f4       	brne	.+10     	; 0xc90 <vfprintf+0x56>
     c86:	b7 01       	movw	r22, r14
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     c8e:	e7 cf       	rjmp	.-50     	; 0xc5e <vfprintf+0x24>
     c90:	51 2c       	mov	r5, r1
     c92:	31 2c       	mov	r3, r1
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	20 32       	cpi	r18, 0x20	; 32
     c98:	a0 f4       	brcc	.+40     	; 0xcc2 <vfprintf+0x88>
     c9a:	8b 32       	cpi	r24, 0x2B	; 43
     c9c:	69 f0       	breq	.+26     	; 0xcb8 <vfprintf+0x7e>
     c9e:	30 f4       	brcc	.+12     	; 0xcac <vfprintf+0x72>
     ca0:	80 32       	cpi	r24, 0x20	; 32
     ca2:	59 f0       	breq	.+22     	; 0xcba <vfprintf+0x80>
     ca4:	83 32       	cpi	r24, 0x23	; 35
     ca6:	69 f4       	brne	.+26     	; 0xcc2 <vfprintf+0x88>
     ca8:	20 61       	ori	r18, 0x10	; 16
     caa:	2c c0       	rjmp	.+88     	; 0xd04 <vfprintf+0xca>
     cac:	8d 32       	cpi	r24, 0x2D	; 45
     cae:	39 f0       	breq	.+14     	; 0xcbe <vfprintf+0x84>
     cb0:	80 33       	cpi	r24, 0x30	; 48
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <vfprintf+0x88>
     cb4:	21 60       	ori	r18, 0x01	; 1
     cb6:	26 c0       	rjmp	.+76     	; 0xd04 <vfprintf+0xca>
     cb8:	22 60       	ori	r18, 0x02	; 2
     cba:	24 60       	ori	r18, 0x04	; 4
     cbc:	23 c0       	rjmp	.+70     	; 0xd04 <vfprintf+0xca>
     cbe:	28 60       	ori	r18, 0x08	; 8
     cc0:	21 c0       	rjmp	.+66     	; 0xd04 <vfprintf+0xca>
     cc2:	27 fd       	sbrc	r18, 7
     cc4:	27 c0       	rjmp	.+78     	; 0xd14 <vfprintf+0xda>
     cc6:	30 ed       	ldi	r19, 0xD0	; 208
     cc8:	38 0f       	add	r19, r24
     cca:	3a 30       	cpi	r19, 0x0A	; 10
     ccc:	78 f4       	brcc	.+30     	; 0xcec <vfprintf+0xb2>
     cce:	26 ff       	sbrs	r18, 6
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0xa4>
     cd2:	fa e0       	ldi	r31, 0x0A	; 10
     cd4:	5f 9e       	mul	r5, r31
     cd6:	30 0d       	add	r19, r0
     cd8:	11 24       	eor	r1, r1
     cda:	53 2e       	mov	r5, r19
     cdc:	13 c0       	rjmp	.+38     	; 0xd04 <vfprintf+0xca>
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	38 9e       	mul	r3, r24
     ce2:	30 0d       	add	r19, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	33 2e       	mov	r3, r19
     ce8:	20 62       	ori	r18, 0x20	; 32
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <vfprintf+0xca>
     cec:	8e 32       	cpi	r24, 0x2E	; 46
     cee:	21 f4       	brne	.+8      	; 0xcf8 <vfprintf+0xbe>
     cf0:	26 fd       	sbrc	r18, 6
     cf2:	6b c1       	rjmp	.+726    	; 0xfca <vfprintf+0x390>
     cf4:	20 64       	ori	r18, 0x40	; 64
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0xca>
     cf8:	8c 36       	cpi	r24, 0x6C	; 108
     cfa:	11 f4       	brne	.+4      	; 0xd00 <vfprintf+0xc6>
     cfc:	20 68       	ori	r18, 0x80	; 128
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <vfprintf+0xca>
     d00:	88 36       	cpi	r24, 0x68	; 104
     d02:	41 f4       	brne	.+16     	; 0xd14 <vfprintf+0xda>
     d04:	f6 01       	movw	r30, r12
     d06:	93 fd       	sbrc	r25, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	93 ff       	sbrs	r25, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	6f 01       	movw	r12, r30
     d10:	81 11       	cpse	r24, r1
     d12:	c1 cf       	rjmp	.-126    	; 0xc96 <vfprintf+0x5c>
     d14:	98 2f       	mov	r25, r24
     d16:	9f 7d       	andi	r25, 0xDF	; 223
     d18:	95 54       	subi	r25, 0x45	; 69
     d1a:	93 30       	cpi	r25, 0x03	; 3
     d1c:	28 f4       	brcc	.+10     	; 0xd28 <vfprintf+0xee>
     d1e:	0c 5f       	subi	r16, 0xFC	; 252
     d20:	1f 4f       	sbci	r17, 0xFF	; 255
     d22:	ff e3       	ldi	r31, 0x3F	; 63
     d24:	f9 83       	std	Y+1, r31	; 0x01
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <vfprintf+0x108>
     d28:	83 36       	cpi	r24, 0x63	; 99
     d2a:	31 f0       	breq	.+12     	; 0xd38 <vfprintf+0xfe>
     d2c:	83 37       	cpi	r24, 0x73	; 115
     d2e:	71 f0       	breq	.+28     	; 0xd4c <vfprintf+0x112>
     d30:	83 35       	cpi	r24, 0x53	; 83
     d32:	09 f0       	breq	.+2      	; 0xd36 <vfprintf+0xfc>
     d34:	5b c0       	rjmp	.+182    	; 0xdec <vfprintf+0x1b2>
     d36:	22 c0       	rjmp	.+68     	; 0xd7c <vfprintf+0x142>
     d38:	f8 01       	movw	r30, r16
     d3a:	80 81       	ld	r24, Z
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	0e 5f       	subi	r16, 0xFE	; 254
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	44 24       	eor	r4, r4
     d44:	43 94       	inc	r4
     d46:	51 2c       	mov	r5, r1
     d48:	54 01       	movw	r10, r8
     d4a:	15 c0       	rjmp	.+42     	; 0xd76 <vfprintf+0x13c>
     d4c:	38 01       	movw	r6, r16
     d4e:	f2 e0       	ldi	r31, 0x02	; 2
     d50:	6f 0e       	add	r6, r31
     d52:	71 1c       	adc	r7, r1
     d54:	f8 01       	movw	r30, r16
     d56:	a0 80       	ld	r10, Z
     d58:	b1 80       	ldd	r11, Z+1	; 0x01
     d5a:	26 ff       	sbrs	r18, 6
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <vfprintf+0x12a>
     d5e:	65 2d       	mov	r22, r5
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x12e>
     d64:	6f ef       	ldi	r22, 0xFF	; 255
     d66:	7f ef       	ldi	r23, 0xFF	; 255
     d68:	c5 01       	movw	r24, r10
     d6a:	2c 87       	std	Y+12, r18	; 0x0c
     d6c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <strnlen>
     d70:	2c 01       	movw	r4, r24
     d72:	83 01       	movw	r16, r6
     d74:	2c 85       	ldd	r18, Y+12	; 0x0c
     d76:	2f 77       	andi	r18, 0x7F	; 127
     d78:	22 2e       	mov	r2, r18
     d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x170>
     d7c:	38 01       	movw	r6, r16
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	6f 0e       	add	r6, r31
     d82:	71 1c       	adc	r7, r1
     d84:	f8 01       	movw	r30, r16
     d86:	a0 80       	ld	r10, Z
     d88:	b1 80       	ldd	r11, Z+1	; 0x01
     d8a:	26 ff       	sbrs	r18, 6
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <vfprintf+0x15a>
     d8e:	65 2d       	mov	r22, r5
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x15e>
     d94:	6f ef       	ldi	r22, 0xFF	; 255
     d96:	7f ef       	ldi	r23, 0xFF	; 255
     d98:	c5 01       	movw	r24, r10
     d9a:	2c 87       	std	Y+12, r18	; 0x0c
     d9c:	0e 94 b7 0a 	call	0x156e	; 0x156e <strnlen_P>
     da0:	2c 01       	movw	r4, r24
     da2:	2c 85       	ldd	r18, Y+12	; 0x0c
     da4:	20 68       	ori	r18, 0x80	; 128
     da6:	22 2e       	mov	r2, r18
     da8:	83 01       	movw	r16, r6
     daa:	23 fc       	sbrc	r2, 3
     dac:	1b c0       	rjmp	.+54     	; 0xde4 <vfprintf+0x1aa>
     dae:	83 2d       	mov	r24, r3
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	48 16       	cp	r4, r24
     db4:	59 06       	cpc	r5, r25
     db6:	b0 f4       	brcc	.+44     	; 0xde4 <vfprintf+0x1aa>
     db8:	b7 01       	movw	r22, r14
     dba:	80 e2       	ldi	r24, 0x20	; 32
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     dc2:	3a 94       	dec	r3
     dc4:	f4 cf       	rjmp	.-24     	; 0xdae <vfprintf+0x174>
     dc6:	f5 01       	movw	r30, r10
     dc8:	27 fc       	sbrc	r2, 7
     dca:	85 91       	lpm	r24, Z+
     dcc:	27 fe       	sbrs	r2, 7
     dce:	81 91       	ld	r24, Z+
     dd0:	5f 01       	movw	r10, r30
     dd2:	b7 01       	movw	r22, r14
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     dda:	31 10       	cpse	r3, r1
     ddc:	3a 94       	dec	r3
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	4f 1a       	sub	r4, r31
     de2:	51 08       	sbc	r5, r1
     de4:	41 14       	cp	r4, r1
     de6:	51 04       	cpc	r5, r1
     de8:	71 f7       	brne	.-36     	; 0xdc6 <vfprintf+0x18c>
     dea:	e5 c0       	rjmp	.+458    	; 0xfb6 <vfprintf+0x37c>
     dec:	84 36       	cpi	r24, 0x64	; 100
     dee:	11 f0       	breq	.+4      	; 0xdf4 <vfprintf+0x1ba>
     df0:	89 36       	cpi	r24, 0x69	; 105
     df2:	39 f5       	brne	.+78     	; 0xe42 <vfprintf+0x208>
     df4:	f8 01       	movw	r30, r16
     df6:	27 ff       	sbrs	r18, 7
     df8:	07 c0       	rjmp	.+14     	; 0xe08 <vfprintf+0x1ce>
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	0c 5f       	subi	r16, 0xFC	; 252
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <vfprintf+0x1de>
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	88 27       	eor	r24, r24
     e0e:	77 fd       	sbrc	r23, 7
     e10:	80 95       	com	r24
     e12:	98 2f       	mov	r25, r24
     e14:	0e 5f       	subi	r16, 0xFE	; 254
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	2f 76       	andi	r18, 0x6F	; 111
     e1a:	b2 2e       	mov	r11, r18
     e1c:	97 ff       	sbrs	r25, 7
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <vfprintf+0x1f8>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	20 68       	ori	r18, 0x80	; 128
     e30:	b2 2e       	mov	r11, r18
     e32:	2a e0       	ldi	r18, 0x0A	; 10
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	a4 01       	movw	r20, r8
     e38:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__ultoa_invert>
     e3c:	a8 2e       	mov	r10, r24
     e3e:	a8 18       	sub	r10, r8
     e40:	44 c0       	rjmp	.+136    	; 0xeca <vfprintf+0x290>
     e42:	85 37       	cpi	r24, 0x75	; 117
     e44:	29 f4       	brne	.+10     	; 0xe50 <vfprintf+0x216>
     e46:	2f 7e       	andi	r18, 0xEF	; 239
     e48:	b2 2e       	mov	r11, r18
     e4a:	2a e0       	ldi	r18, 0x0A	; 10
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	25 c0       	rjmp	.+74     	; 0xe9a <vfprintf+0x260>
     e50:	f2 2f       	mov	r31, r18
     e52:	f9 7f       	andi	r31, 0xF9	; 249
     e54:	bf 2e       	mov	r11, r31
     e56:	8f 36       	cpi	r24, 0x6F	; 111
     e58:	c1 f0       	breq	.+48     	; 0xe8a <vfprintf+0x250>
     e5a:	18 f4       	brcc	.+6      	; 0xe62 <vfprintf+0x228>
     e5c:	88 35       	cpi	r24, 0x58	; 88
     e5e:	79 f0       	breq	.+30     	; 0xe7e <vfprintf+0x244>
     e60:	b4 c0       	rjmp	.+360    	; 0xfca <vfprintf+0x390>
     e62:	80 37       	cpi	r24, 0x70	; 112
     e64:	19 f0       	breq	.+6      	; 0xe6c <vfprintf+0x232>
     e66:	88 37       	cpi	r24, 0x78	; 120
     e68:	21 f0       	breq	.+8      	; 0xe72 <vfprintf+0x238>
     e6a:	af c0       	rjmp	.+350    	; 0xfca <vfprintf+0x390>
     e6c:	2f 2f       	mov	r18, r31
     e6e:	20 61       	ori	r18, 0x10	; 16
     e70:	b2 2e       	mov	r11, r18
     e72:	b4 fe       	sbrs	r11, 4
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <vfprintf+0x256>
     e76:	8b 2d       	mov	r24, r11
     e78:	84 60       	ori	r24, 0x04	; 4
     e7a:	b8 2e       	mov	r11, r24
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <vfprintf+0x256>
     e7e:	24 ff       	sbrs	r18, 4
     e80:	0a c0       	rjmp	.+20     	; 0xe96 <vfprintf+0x25c>
     e82:	9f 2f       	mov	r25, r31
     e84:	96 60       	ori	r25, 0x06	; 6
     e86:	b9 2e       	mov	r11, r25
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <vfprintf+0x25c>
     e8a:	28 e0       	ldi	r18, 0x08	; 8
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <vfprintf+0x260>
     e90:	20 e1       	ldi	r18, 0x10	; 16
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x260>
     e96:	20 e1       	ldi	r18, 0x10	; 16
     e98:	32 e0       	ldi	r19, 0x02	; 2
     e9a:	f8 01       	movw	r30, r16
     e9c:	b7 fe       	sbrs	r11, 7
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <vfprintf+0x274>
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	0c 5f       	subi	r16, 0xFC	; 252
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0x280>
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 5f       	subi	r16, 0xFE	; 254
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	a4 01       	movw	r20, r8
     ebc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__ultoa_invert>
     ec0:	a8 2e       	mov	r10, r24
     ec2:	a8 18       	sub	r10, r8
     ec4:	fb 2d       	mov	r31, r11
     ec6:	ff 77       	andi	r31, 0x7F	; 127
     ec8:	bf 2e       	mov	r11, r31
     eca:	b6 fe       	sbrs	r11, 6
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <vfprintf+0x2aa>
     ece:	2b 2d       	mov	r18, r11
     ed0:	2e 7f       	andi	r18, 0xFE	; 254
     ed2:	a5 14       	cp	r10, r5
     ed4:	50 f4       	brcc	.+20     	; 0xeea <vfprintf+0x2b0>
     ed6:	b4 fe       	sbrs	r11, 4
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <vfprintf+0x2b4>
     eda:	b2 fc       	sbrc	r11, 2
     edc:	08 c0       	rjmp	.+16     	; 0xeee <vfprintf+0x2b4>
     ede:	2b 2d       	mov	r18, r11
     ee0:	2e 7e       	andi	r18, 0xEE	; 238
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <vfprintf+0x2b4>
     ee4:	7a 2c       	mov	r7, r10
     ee6:	2b 2d       	mov	r18, r11
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <vfprintf+0x2b6>
     eea:	7a 2c       	mov	r7, r10
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <vfprintf+0x2b6>
     eee:	75 2c       	mov	r7, r5
     ef0:	24 ff       	sbrs	r18, 4
     ef2:	0d c0       	rjmp	.+26     	; 0xf0e <vfprintf+0x2d4>
     ef4:	fe 01       	movw	r30, r28
     ef6:	ea 0d       	add	r30, r10
     ef8:	f1 1d       	adc	r31, r1
     efa:	80 81       	ld	r24, Z
     efc:	80 33       	cpi	r24, 0x30	; 48
     efe:	11 f4       	brne	.+4      	; 0xf04 <vfprintf+0x2ca>
     f00:	29 7e       	andi	r18, 0xE9	; 233
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <vfprintf+0x2dc>
     f04:	22 ff       	sbrs	r18, 2
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <vfprintf+0x2da>
     f08:	73 94       	inc	r7
     f0a:	73 94       	inc	r7
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <vfprintf+0x2dc>
     f0e:	82 2f       	mov	r24, r18
     f10:	86 78       	andi	r24, 0x86	; 134
     f12:	09 f0       	breq	.+2      	; 0xf16 <vfprintf+0x2dc>
     f14:	73 94       	inc	r7
     f16:	23 fd       	sbrc	r18, 3
     f18:	13 c0       	rjmp	.+38     	; 0xf40 <vfprintf+0x306>
     f1a:	20 ff       	sbrs	r18, 0
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0x2f0>
     f1e:	5a 2c       	mov	r5, r10
     f20:	73 14       	cp	r7, r3
     f22:	18 f4       	brcc	.+6      	; 0xf2a <vfprintf+0x2f0>
     f24:	53 0c       	add	r5, r3
     f26:	57 18       	sub	r5, r7
     f28:	73 2c       	mov	r7, r3
     f2a:	73 14       	cp	r7, r3
     f2c:	68 f4       	brcc	.+26     	; 0xf48 <vfprintf+0x30e>
     f2e:	b7 01       	movw	r22, r14
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	2c 87       	std	Y+12, r18	; 0x0c
     f36:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     f3a:	73 94       	inc	r7
     f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <vfprintf+0x2f0>
     f40:	73 14       	cp	r7, r3
     f42:	10 f4       	brcc	.+4      	; 0xf48 <vfprintf+0x30e>
     f44:	37 18       	sub	r3, r7
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <vfprintf+0x310>
     f48:	31 2c       	mov	r3, r1
     f4a:	24 ff       	sbrs	r18, 4
     f4c:	12 c0       	rjmp	.+36     	; 0xf72 <vfprintf+0x338>
     f4e:	b7 01       	movw	r22, r14
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	2c 87       	std	Y+12, r18	; 0x0c
     f56:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     f5a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	17 c0       	rjmp	.+46     	; 0xf8e <vfprintf+0x354>
     f60:	21 ff       	sbrs	r18, 1
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <vfprintf+0x330>
     f64:	88 e5       	ldi	r24, 0x58	; 88
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0x334>
     f6a:	88 e7       	ldi	r24, 0x78	; 120
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	b7 01       	movw	r22, r14
     f70:	0c c0       	rjmp	.+24     	; 0xf8a <vfprintf+0x350>
     f72:	82 2f       	mov	r24, r18
     f74:	86 78       	andi	r24, 0x86	; 134
     f76:	59 f0       	breq	.+22     	; 0xf8e <vfprintf+0x354>
     f78:	21 fd       	sbrc	r18, 1
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x346>
     f7c:	80 e2       	ldi	r24, 0x20	; 32
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <vfprintf+0x348>
     f80:	8b e2       	ldi	r24, 0x2B	; 43
     f82:	27 fd       	sbrc	r18, 7
     f84:	8d e2       	ldi	r24, 0x2D	; 45
     f86:	b7 01       	movw	r22, r14
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     f8e:	a5 14       	cp	r10, r5
     f90:	38 f4       	brcc	.+14     	; 0xfa0 <vfprintf+0x366>
     f92:	b7 01       	movw	r22, r14
     f94:	80 e3       	ldi	r24, 0x30	; 48
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     f9c:	5a 94       	dec	r5
     f9e:	f7 cf       	rjmp	.-18     	; 0xf8e <vfprintf+0x354>
     fa0:	aa 94       	dec	r10
     fa2:	f4 01       	movw	r30, r8
     fa4:	ea 0d       	add	r30, r10
     fa6:	f1 1d       	adc	r31, r1
     fa8:	80 81       	ld	r24, Z
     faa:	b7 01       	movw	r22, r14
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     fb2:	a1 10       	cpse	r10, r1
     fb4:	f5 cf       	rjmp	.-22     	; 0xfa0 <vfprintf+0x366>
     fb6:	33 20       	and	r3, r3
     fb8:	09 f4       	brne	.+2      	; 0xfbc <vfprintf+0x382>
     fba:	51 ce       	rjmp	.-862    	; 0xc5e <vfprintf+0x24>
     fbc:	b7 01       	movw	r22, r14
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <fputc>
     fc6:	3a 94       	dec	r3
     fc8:	f6 cf       	rjmp	.-20     	; 0xfb6 <vfprintf+0x37c>
     fca:	f7 01       	movw	r30, r14
     fcc:	86 81       	ldd	r24, Z+6	; 0x06
     fce:	97 81       	ldd	r25, Z+7	; 0x07
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <vfprintf+0x39c>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	2c 96       	adiw	r28, 0x0c	; 12
     fd8:	e2 e1       	ldi	r30, 0x12	; 18
     fda:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__epilogue_restores__>

00000fde <putval>:
     fde:	20 fd       	sbrc	r18, 0
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <putval+0x16>
     fe2:	fc 01       	movw	r30, r24
     fe4:	23 fd       	sbrc	r18, 3
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <putval+0x14>
     fe8:	22 ff       	sbrs	r18, 2
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <putval+0x12>
     fec:	73 83       	std	Z+3, r23	; 0x03
     fee:	62 83       	std	Z+2, r22	; 0x02
     ff0:	51 83       	std	Z+1, r21	; 0x01
     ff2:	40 83       	st	Z, r20
     ff4:	08 95       	ret

00000ff6 <mulacc>:
     ff6:	44 fd       	sbrc	r20, 4
     ff8:	10 c0       	rjmp	.+32     	; 0x101a <mulacc+0x24>
     ffa:	46 fd       	sbrc	r20, 6
     ffc:	10 c0       	rjmp	.+32     	; 0x101e <mulacc+0x28>
     ffe:	db 01       	movw	r26, r22
    1000:	fc 01       	movw	r30, r24
    1002:	aa 0f       	add	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	ee 1f       	adc	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	10 94       	com	r1
    100c:	d1 f7       	brne	.-12     	; 0x1002 <mulacc+0xc>
    100e:	6a 0f       	add	r22, r26
    1010:	7b 1f       	adc	r23, r27
    1012:	8e 1f       	adc	r24, r30
    1014:	9f 1f       	adc	r25, r31
    1016:	31 e0       	ldi	r19, 0x01	; 1
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <mulacc+0x2a>
    101a:	33 e0       	ldi	r19, 0x03	; 3
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <mulacc+0x2a>
    101e:	34 e0       	ldi	r19, 0x04	; 4
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	31 50       	subi	r19, 0x01	; 1
    102a:	d1 f7       	brne	.-12     	; 0x1020 <mulacc+0x2a>
    102c:	62 0f       	add	r22, r18
    102e:	71 1d       	adc	r23, r1
    1030:	81 1d       	adc	r24, r1
    1032:	91 1d       	adc	r25, r1
    1034:	08 95       	ret

00001036 <skip_spaces>:
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	8c 01       	movw	r16, r24
    1040:	c8 01       	movw	r24, r16
    1042:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    1046:	ec 01       	movw	r28, r24
    1048:	97 fd       	sbrc	r25, 7
    104a:	08 c0       	rjmp	.+16     	; 0x105c <skip_spaces+0x26>
    104c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <isspace>
    1050:	89 2b       	or	r24, r25
    1052:	b1 f7       	brne	.-20     	; 0x1040 <skip_spaces+0xa>
    1054:	b8 01       	movw	r22, r16
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 3d 0b 	call	0x167a	; 0x167a <ungetc>
    105c:	ce 01       	movw	r24, r28
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <conv_int>:
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	a6 2e       	mov	r10, r22
    1082:	4a 01       	movw	r8, r20
    1084:	02 2f       	mov	r16, r18
    1086:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    108a:	ac 01       	movw	r20, r24
    108c:	55 27       	eor	r21, r21
    108e:	4b 32       	cpi	r20, 0x2B	; 43
    1090:	51 05       	cpc	r21, r1
    1092:	21 f0       	breq	.+8      	; 0x109c <conv_int+0x34>
    1094:	4d 32       	cpi	r20, 0x2D	; 45
    1096:	51 05       	cpc	r21, r1
    1098:	51 f4       	brne	.+20     	; 0x10ae <conv_int+0x46>
    109a:	00 68       	ori	r16, 0x80	; 128
    109c:	aa 94       	dec	r10
    109e:	11 f4       	brne	.+4      	; 0x10a4 <conv_int+0x3c>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	67 c0       	rjmp	.+206    	; 0x1172 <conv_int+0x10a>
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    10aa:	97 fd       	sbrc	r25, 7
    10ac:	f9 cf       	rjmp	.-14     	; 0x10a0 <conv_int+0x38>
    10ae:	10 2f       	mov	r17, r16
    10b0:	1d 7f       	andi	r17, 0xFD	; 253
    10b2:	30 2f       	mov	r19, r16
    10b4:	30 73       	andi	r19, 0x30	; 48
    10b6:	01 f5       	brne	.+64     	; 0x10f8 <conv_int+0x90>
    10b8:	80 33       	cpi	r24, 0x30	; 48
    10ba:	f1 f4       	brne	.+60     	; 0x10f8 <conv_int+0x90>
    10bc:	ff 24       	eor	r15, r15
    10be:	fa 94       	dec	r15
    10c0:	fa 0c       	add	r15, r10
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <conv_int+0x5e>
    10c4:	42 c0       	rjmp	.+132    	; 0x114a <conv_int+0xe2>
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    10cc:	97 fd       	sbrc	r25, 7
    10ce:	3d c0       	rjmp	.+122    	; 0x114a <conv_int+0xe2>
    10d0:	38 2f       	mov	r19, r24
    10d2:	3f 7d       	andi	r19, 0xDF	; 223
    10d4:	38 35       	cpi	r19, 0x58	; 88
    10d6:	51 f4       	brne	.+20     	; 0x10ec <conv_int+0x84>
    10d8:	12 64       	ori	r17, 0x42	; 66
    10da:	aa 94       	dec	r10
    10dc:	aa 94       	dec	r10
    10de:	a9 f1       	breq	.+106    	; 0x114a <conv_int+0xe2>
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    10e6:	97 ff       	sbrs	r25, 7
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <conv_int+0x90>
    10ea:	2f c0       	rjmp	.+94     	; 0x114a <conv_int+0xe2>
    10ec:	06 ff       	sbrs	r16, 6
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <conv_int+0x8c>
    10f0:	12 60       	ori	r17, 0x02	; 2
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <conv_int+0x8e>
    10f4:	12 61       	ori	r17, 0x12	; 18
    10f6:	af 2c       	mov	r10, r15
    10f8:	c1 2c       	mov	r12, r1
    10fa:	d1 2c       	mov	r13, r1
    10fc:	76 01       	movw	r14, r12
    10fe:	20 ed       	ldi	r18, 0xD0	; 208
    1100:	28 0f       	add	r18, r24
    1102:	28 30       	cpi	r18, 0x08	; 8
    1104:	80 f0       	brcs	.+32     	; 0x1126 <conv_int+0xbe>
    1106:	14 ff       	sbrs	r17, 4
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <conv_int+0xaa>
    110a:	be 01       	movw	r22, r28
    110c:	0e 94 3d 0b 	call	0x167a	; 0x167a <ungetc>
    1110:	19 c0       	rjmp	.+50     	; 0x1144 <conv_int+0xdc>
    1112:	2a 30       	cpi	r18, 0x0A	; 10
    1114:	40 f0       	brcs	.+16     	; 0x1126 <conv_int+0xbe>
    1116:	16 ff       	sbrs	r17, 6
    1118:	f8 cf       	rjmp	.-16     	; 0x110a <conv_int+0xa2>
    111a:	2f 7d       	andi	r18, 0xDF	; 223
    111c:	3f ee       	ldi	r19, 0xEF	; 239
    111e:	32 0f       	add	r19, r18
    1120:	36 30       	cpi	r19, 0x06	; 6
    1122:	98 f7       	brcc	.-26     	; 0x110a <conv_int+0xa2>
    1124:	27 50       	subi	r18, 0x07	; 7
    1126:	41 2f       	mov	r20, r17
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 fb 07 	call	0xff6	; 0xff6 <mulacc>
    1130:	6b 01       	movw	r12, r22
    1132:	7c 01       	movw	r14, r24
    1134:	12 60       	ori	r17, 0x02	; 2
    1136:	aa 94       	dec	r10
    1138:	59 f0       	breq	.+22     	; 0x1150 <conv_int+0xe8>
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    1140:	97 ff       	sbrs	r25, 7
    1142:	dd cf       	rjmp	.-70     	; 0x10fe <conv_int+0x96>
    1144:	11 fd       	sbrc	r17, 1
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <conv_int+0xe8>
    1148:	ab cf       	rjmp	.-170    	; 0x10a0 <conv_int+0x38>
    114a:	c1 2c       	mov	r12, r1
    114c:	d1 2c       	mov	r13, r1
    114e:	76 01       	movw	r14, r12
    1150:	17 ff       	sbrs	r17, 7
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <conv_int+0xfc>
    1154:	f0 94       	com	r15
    1156:	e0 94       	com	r14
    1158:	d0 94       	com	r13
    115a:	c0 94       	com	r12
    115c:	c1 1c       	adc	r12, r1
    115e:	d1 1c       	adc	r13, r1
    1160:	e1 1c       	adc	r14, r1
    1162:	f1 1c       	adc	r15, r1
    1164:	21 2f       	mov	r18, r17
    1166:	b7 01       	movw	r22, r14
    1168:	a6 01       	movw	r20, r12
    116a:	c4 01       	movw	r24, r8
    116c:	0e 94 ef 07 	call	0xfde	; 0xfde <putval>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	08 95       	ret

0000118a <conv_brk>:
    118a:	a1 e2       	ldi	r26, 0x21	; 33
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb ec       	ldi	r30, 0xCB	; 203
    1190:	f8 e0       	ldi	r31, 0x08	; 8
    1192:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__prologue_saves__+0xa>
    1196:	5c 01       	movw	r10, r24
    1198:	7a 01       	movw	r14, r20
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5f       	subi	r16, 0xFF	; 255
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	68 01       	movw	r12, r16
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	d8 01       	movw	r26, r16
    11a6:	1d 92       	st	X+, r1
    11a8:	8a 95       	dec	r24
    11aa:	e9 f7       	brne	.-6      	; 0x11a6 <conv_brk+0x1c>
    11ac:	f5 01       	movw	r30, r10
    11ae:	73 80       	ldd	r7, Z+3	; 0x03
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	81 2c       	mov	r8, r1
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	91 2c       	mov	r9, r1
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	f9 01       	movw	r30, r18
    11c0:	73 fc       	sbrc	r7, 3
    11c2:	a5 91       	lpm	r26, Z+
    11c4:	73 fe       	sbrs	r7, 3
    11c6:	a1 91       	ld	r26, Z+
    11c8:	8f 01       	movw	r16, r30
    11ca:	7a 2f       	mov	r23, r26
    11cc:	9f 01       	movw	r18, r30
    11ce:	a1 11       	cpse	r26, r1
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <conv_brk+0x4e>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	7d c0       	rjmp	.+250    	; 0x12d2 <conv_brk+0x148>
    11d8:	ae 35       	cpi	r26, 0x5E	; 94
    11da:	19 f4       	brne	.+6      	; 0x11e2 <conv_brk+0x58>
    11dc:	41 15       	cp	r20, r1
    11de:	51 05       	cpc	r21, r1
    11e0:	59 f1       	breq	.+86     	; 0x1238 <conv_brk+0xae>
    11e2:	e9 2d       	mov	r30, r9
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	e4 17       	cp	r30, r20
    11e8:	f5 07       	cpc	r31, r21
    11ea:	3c f4       	brge	.+14     	; 0x11fa <conv_brk+0x70>
    11ec:	ad 35       	cpi	r26, 0x5D	; 93
    11ee:	69 f1       	breq	.+90     	; 0x124a <conv_brk+0xc0>
    11f0:	ad 32       	cpi	r26, 0x2D	; 45
    11f2:	19 f4       	brne	.+6      	; 0x11fa <conv_brk+0x70>
    11f4:	bb 23       	and	r27, r27
    11f6:	19 f1       	breq	.+70     	; 0x123e <conv_brk+0xb4>
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <conv_brk+0x76>
    11fa:	b1 11       	cpse	r27, r1
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <conv_brk+0x76>
    11fe:	8a 2e       	mov	r8, r26
    1200:	e7 2f       	mov	r30, r23
    1202:	e6 95       	lsr	r30
    1204:	e6 95       	lsr	r30
    1206:	e6 95       	lsr	r30
    1208:	86 01       	movw	r16, r12
    120a:	0e 0f       	add	r16, r30
    120c:	11 1d       	adc	r17, r1
    120e:	f8 01       	movw	r30, r16
    1210:	a7 2f       	mov	r26, r23
    1212:	a7 70       	andi	r26, 0x07	; 7
    1214:	8c 01       	movw	r16, r24
    1216:	02 c0       	rjmp	.+4      	; 0x121c <conv_brk+0x92>
    1218:	00 0f       	add	r16, r16
    121a:	11 1f       	adc	r17, r17
    121c:	aa 95       	dec	r26
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <conv_brk+0x8e>
    1220:	d8 01       	movw	r26, r16
    1222:	b0 81       	ld	r27, Z
    1224:	ba 2b       	or	r27, r26
    1226:	b0 83       	st	Z, r27
    1228:	78 15       	cp	r23, r8
    122a:	59 f0       	breq	.+22     	; 0x1242 <conv_brk+0xb8>
    122c:	78 15       	cp	r23, r8
    122e:	10 f4       	brcc	.+4      	; 0x1234 <conv_brk+0xaa>
    1230:	7f 5f       	subi	r23, 0xFF	; 255
    1232:	e6 cf       	rjmp	.-52     	; 0x1200 <conv_brk+0x76>
    1234:	71 50       	subi	r23, 0x01	; 1
    1236:	e4 cf       	rjmp	.-56     	; 0x1200 <conv_brk+0x76>
    1238:	99 24       	eor	r9, r9
    123a:	93 94       	inc	r9
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <conv_brk+0xba>
    123e:	b1 e0       	ldi	r27, 0x01	; 1
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <conv_brk+0xba>
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	4f 5f       	subi	r20, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	ba cf       	rjmp	.-140    	; 0x11be <conv_brk+0x34>
    124a:	bb 23       	and	r27, r27
    124c:	19 f0       	breq	.+6      	; 0x1254 <conv_brk+0xca>
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	80 62       	ori	r24, 0x20	; 32
    1252:	8e 83       	std	Y+6, r24	; 0x06
    1254:	91 10       	cpse	r9, r1
    1256:	03 c0       	rjmp	.+6      	; 0x125e <conv_brk+0xd4>
    1258:	99 24       	eor	r9, r9
    125a:	93 94       	inc	r9
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <conv_brk+0xfe>
    125e:	f6 01       	movw	r30, r12
    1260:	ce 01       	movw	r24, r28
    1262:	81 96       	adiw	r24, 0x21	; 33
    1264:	20 81       	ld	r18, Z
    1266:	20 95       	com	r18
    1268:	21 93       	st	Z+, r18
    126a:	e8 17       	cp	r30, r24
    126c:	f9 07       	cpc	r31, r25
    126e:	d1 f7       	brne	.-12     	; 0x1264 <conv_brk+0xda>
    1270:	f3 cf       	rjmp	.-26     	; 0x1258 <conv_brk+0xce>
    1272:	e1 14       	cp	r14, r1
    1274:	f1 04       	cpc	r15, r1
    1276:	29 f0       	breq	.+10     	; 0x1282 <conv_brk+0xf8>
    1278:	d7 01       	movw	r26, r14
    127a:	8c 93       	st	X, r24
    127c:	f7 01       	movw	r30, r14
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	7f 01       	movw	r14, r30
    1282:	61 50       	subi	r22, 0x01	; 1
    1284:	01 f1       	breq	.+64     	; 0x12c6 <conv_brk+0x13c>
    1286:	91 2c       	mov	r9, r1
    1288:	c5 01       	movw	r24, r10
    128a:	69 a3       	std	Y+33, r22	; 0x21
    128c:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    1290:	69 a1       	ldd	r22, Y+33	; 0x21
    1292:	97 fd       	sbrc	r25, 7
    1294:	16 c0       	rjmp	.+44     	; 0x12c2 <conv_brk+0x138>
    1296:	28 2f       	mov	r18, r24
    1298:	26 95       	lsr	r18
    129a:	26 95       	lsr	r18
    129c:	26 95       	lsr	r18
    129e:	f6 01       	movw	r30, r12
    12a0:	e2 0f       	add	r30, r18
    12a2:	f1 1d       	adc	r31, r1
    12a4:	20 81       	ld	r18, Z
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	ac 01       	movw	r20, r24
    12aa:	47 70       	andi	r20, 0x07	; 7
    12ac:	55 27       	eor	r21, r21
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <conv_brk+0x12a>
    12b0:	35 95       	asr	r19
    12b2:	27 95       	ror	r18
    12b4:	4a 95       	dec	r20
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <conv_brk+0x126>
    12b8:	20 fd       	sbrc	r18, 0
    12ba:	db cf       	rjmp	.-74     	; 0x1272 <conv_brk+0xe8>
    12bc:	b5 01       	movw	r22, r10
    12be:	0e 94 3d 0b 	call	0x167a	; 0x167a <ungetc>
    12c2:	91 10       	cpse	r9, r1
    12c4:	86 cf       	rjmp	.-244    	; 0x11d2 <conv_brk+0x48>
    12c6:	e1 14       	cp	r14, r1
    12c8:	f1 04       	cpc	r15, r1
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <conv_brk+0x146>
    12cc:	d7 01       	movw	r26, r14
    12ce:	1c 92       	st	X, r1
    12d0:	c8 01       	movw	r24, r16
    12d2:	a1 96       	adiw	r28, 0x21	; 33
    12d4:	ed e0       	ldi	r30, 0x0D	; 13
    12d6:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__epilogue_restores__+0xa>

000012da <vfscanf>:
    12da:	4f 92       	push	r4
    12dc:	5f 92       	push	r5
    12de:	7f 92       	push	r7
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	1f 92       	push	r1
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8c 01       	movw	r16, r24
    1300:	2b 01       	movw	r4, r22
    1302:	7a 01       	movw	r14, r20
    1304:	fc 01       	movw	r30, r24
    1306:	17 82       	std	Z+7, r1	; 0x07
    1308:	16 82       	std	Z+6, r1	; 0x06
    130a:	a1 2c       	mov	r10, r1
    130c:	f8 01       	movw	r30, r16
    130e:	d3 80       	ldd	r13, Z+3	; 0x03
    1310:	f2 01       	movw	r30, r4
    1312:	d3 fc       	sbrc	r13, 3
    1314:	85 91       	lpm	r24, Z+
    1316:	d3 fe       	sbrs	r13, 3
    1318:	81 91       	ld	r24, Z+
    131a:	38 2f       	mov	r19, r24
    131c:	2f 01       	movw	r4, r30
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <vfscanf+0x4a>
    1322:	fc c0       	rjmp	.+504    	; 0x151c <vfscanf+0x242>
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	39 83       	std	Y+1, r19	; 0x01
    1328:	0e 94 a4 0a 	call	0x1548	; 0x1548 <isspace>
    132c:	39 81       	ldd	r19, Y+1	; 0x01
    132e:	89 2b       	or	r24, r25
    1330:	21 f0       	breq	.+8      	; 0x133a <vfscanf+0x60>
    1332:	c8 01       	movw	r24, r16
    1334:	0e 94 1b 08 	call	0x1036	; 0x1036 <skip_spaces>
    1338:	e9 cf       	rjmp	.-46     	; 0x130c <vfscanf+0x32>
    133a:	35 32       	cpi	r19, 0x25	; 37
    133c:	41 f4       	brne	.+16     	; 0x134e <vfscanf+0x74>
    133e:	f2 01       	movw	r30, r4
    1340:	d3 fc       	sbrc	r13, 3
    1342:	35 91       	lpm	r19, Z+
    1344:	d3 fe       	sbrs	r13, 3
    1346:	31 91       	ld	r19, Z+
    1348:	2f 01       	movw	r4, r30
    134a:	35 32       	cpi	r19, 0x25	; 37
    134c:	69 f4       	brne	.+26     	; 0x1368 <vfscanf+0x8e>
    134e:	c8 01       	movw	r24, r16
    1350:	39 83       	std	Y+1, r19	; 0x01
    1352:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    1356:	39 81       	ldd	r19, Y+1	; 0x01
    1358:	97 fd       	sbrc	r25, 7
    135a:	de c0       	rjmp	.+444    	; 0x1518 <vfscanf+0x23e>
    135c:	38 17       	cp	r19, r24
    135e:	b1 f2       	breq	.-84     	; 0x130c <vfscanf+0x32>
    1360:	b8 01       	movw	r22, r16
    1362:	0e 94 3d 0b 	call	0x167a	; 0x167a <ungetc>
    1366:	da c0       	rjmp	.+436    	; 0x151c <vfscanf+0x242>
    1368:	3a 32       	cpi	r19, 0x2A	; 42
    136a:	41 f4       	brne	.+16     	; 0x137c <vfscanf+0xa2>
    136c:	d3 fc       	sbrc	r13, 3
    136e:	35 91       	lpm	r19, Z+
    1370:	d3 fe       	sbrs	r13, 3
    1372:	31 91       	ld	r19, Z+
    1374:	2f 01       	movw	r4, r30
    1376:	bb 24       	eor	r11, r11
    1378:	b3 94       	inc	r11
    137a:	01 c0       	rjmp	.+2      	; 0x137e <vfscanf+0xa4>
    137c:	b1 2c       	mov	r11, r1
    137e:	71 2c       	mov	r7, r1
    1380:	20 ed       	ldi	r18, 0xD0	; 208
    1382:	23 0f       	add	r18, r19
    1384:	2a 30       	cpi	r18, 0x0A	; 10
    1386:	90 f4       	brcc	.+36     	; 0x13ac <vfscanf+0xd2>
    1388:	fb 2d       	mov	r31, r11
    138a:	f2 60       	ori	r31, 0x02	; 2
    138c:	bf 2e       	mov	r11, r31
    138e:	67 2d       	mov	r22, r7
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	0e 94 fb 07 	call	0xff6	; 0xff6 <mulacc>
    139c:	76 2e       	mov	r7, r22
    139e:	f2 01       	movw	r30, r4
    13a0:	d3 fc       	sbrc	r13, 3
    13a2:	35 91       	lpm	r19, Z+
    13a4:	d3 fe       	sbrs	r13, 3
    13a6:	31 91       	ld	r19, Z+
    13a8:	2f 01       	movw	r4, r30
    13aa:	ea cf       	rjmp	.-44     	; 0x1380 <vfscanf+0xa6>
    13ac:	b1 fe       	sbrs	r11, 1
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <vfscanf+0xdc>
    13b0:	71 10       	cpse	r7, r1
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <vfscanf+0xe0>
    13b4:	b3 c0       	rjmp	.+358    	; 0x151c <vfscanf+0x242>
    13b6:	77 24       	eor	r7, r7
    13b8:	7a 94       	dec	r7
    13ba:	38 36       	cpi	r19, 0x68	; 104
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <vfscanf+0xea>
    13be:	3c 36       	cpi	r19, 0x6C	; 108
    13c0:	61 f0       	breq	.+24     	; 0x13da <vfscanf+0x100>
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <vfscanf+0x112>
    13c4:	f2 01       	movw	r30, r4
    13c6:	d3 fc       	sbrc	r13, 3
    13c8:	35 91       	lpm	r19, Z+
    13ca:	d3 fe       	sbrs	r13, 3
    13cc:	31 91       	ld	r19, Z+
    13ce:	2f 01       	movw	r4, r30
    13d0:	38 36       	cpi	r19, 0x68	; 104
    13d2:	61 f4       	brne	.+24     	; 0x13ec <vfscanf+0x112>
    13d4:	fb 2d       	mov	r31, r11
    13d6:	f8 60       	ori	r31, 0x08	; 8
    13d8:	bf 2e       	mov	r11, r31
    13da:	8b 2d       	mov	r24, r11
    13dc:	84 60       	ori	r24, 0x04	; 4
    13de:	b8 2e       	mov	r11, r24
    13e0:	f2 01       	movw	r30, r4
    13e2:	d3 fc       	sbrc	r13, 3
    13e4:	35 91       	lpm	r19, Z+
    13e6:	d3 fe       	sbrs	r13, 3
    13e8:	31 91       	ld	r19, Z+
    13ea:	2f 01       	movw	r4, r30
    13ec:	33 23       	and	r19, r19
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <vfscanf+0x118>
    13f0:	95 c0       	rjmp	.+298    	; 0x151c <vfscanf+0x242>
    13f2:	63 2f       	mov	r22, r19
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	8e e7       	ldi	r24, 0x7E	; 126
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	39 83       	std	Y+1, r19	; 0x01
    13fc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <strchr_P>
    1400:	39 81       	ldd	r19, Y+1	; 0x01
    1402:	89 2b       	or	r24, r25
    1404:	09 f4       	brne	.+2      	; 0x1408 <vfscanf+0x12e>
    1406:	8a c0       	rjmp	.+276    	; 0x151c <vfscanf+0x242>
    1408:	b0 fc       	sbrc	r11, 0
    140a:	07 c0       	rjmp	.+14     	; 0x141a <vfscanf+0x140>
    140c:	f7 01       	movw	r30, r14
    140e:	c0 80       	ld	r12, Z
    1410:	d1 80       	ldd	r13, Z+1	; 0x01
    1412:	c7 01       	movw	r24, r14
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	7c 01       	movw	r14, r24
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfscanf+0x144>
    141a:	c1 2c       	mov	r12, r1
    141c:	d1 2c       	mov	r13, r1
    141e:	3e 36       	cpi	r19, 0x6E	; 110
    1420:	51 f4       	brne	.+20     	; 0x1436 <vfscanf+0x15c>
    1422:	f8 01       	movw	r30, r16
    1424:	46 81       	ldd	r20, Z+6	; 0x06
    1426:	57 81       	ldd	r21, Z+7	; 0x07
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	2b 2d       	mov	r18, r11
    142e:	c6 01       	movw	r24, r12
    1430:	0e 94 ef 07 	call	0xfde	; 0xfde <putval>
    1434:	6b cf       	rjmp	.-298    	; 0x130c <vfscanf+0x32>
    1436:	33 36       	cpi	r19, 0x63	; 99
    1438:	a1 f4       	brne	.+40     	; 0x1462 <vfscanf+0x188>
    143a:	b1 fc       	sbrc	r11, 1
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfscanf+0x168>
    143e:	77 24       	eor	r7, r7
    1440:	73 94       	inc	r7
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    1448:	97 fd       	sbrc	r25, 7
    144a:	66 c0       	rjmp	.+204    	; 0x1518 <vfscanf+0x23e>
    144c:	c1 14       	cp	r12, r1
    144e:	d1 04       	cpc	r13, r1
    1450:	29 f0       	breq	.+10     	; 0x145c <vfscanf+0x182>
    1452:	f6 01       	movw	r30, r12
    1454:	80 83       	st	Z, r24
    1456:	c6 01       	movw	r24, r12
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	6c 01       	movw	r12, r24
    145c:	7a 94       	dec	r7
    145e:	89 f7       	brne	.-30     	; 0x1442 <vfscanf+0x168>
    1460:	57 c0       	rjmp	.+174    	; 0x1510 <vfscanf+0x236>
    1462:	3b 35       	cpi	r19, 0x5B	; 91
    1464:	59 f4       	brne	.+22     	; 0x147c <vfscanf+0x1a2>
    1466:	92 01       	movw	r18, r4
    1468:	a6 01       	movw	r20, r12
    146a:	67 2d       	mov	r22, r7
    146c:	c8 01       	movw	r24, r16
    146e:	0e 94 c5 08 	call	0x118a	; 0x118a <conv_brk>
    1472:	2c 01       	movw	r4, r24
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	09 f0       	breq	.+2      	; 0x147a <vfscanf+0x1a0>
    1478:	4b c0       	rjmp	.+150    	; 0x1510 <vfscanf+0x236>
    147a:	45 c0       	rjmp	.+138    	; 0x1506 <vfscanf+0x22c>
    147c:	c8 01       	movw	r24, r16
    147e:	39 83       	std	Y+1, r19	; 0x01
    1480:	0e 94 1b 08 	call	0x1036	; 0x1036 <skip_spaces>
    1484:	39 81       	ldd	r19, Y+1	; 0x01
    1486:	97 fd       	sbrc	r25, 7
    1488:	47 c0       	rjmp	.+142    	; 0x1518 <vfscanf+0x23e>
    148a:	3f 36       	cpi	r19, 0x6F	; 111
    148c:	69 f1       	breq	.+90     	; 0x14e8 <vfscanf+0x20e>
    148e:	28 f4       	brcc	.+10     	; 0x149a <vfscanf+0x1c0>
    1490:	34 36       	cpi	r19, 0x64	; 100
    1492:	31 f1       	breq	.+76     	; 0x14e0 <vfscanf+0x206>
    1494:	39 36       	cpi	r19, 0x69	; 105
    1496:	79 f1       	breq	.+94     	; 0x14f6 <vfscanf+0x21c>
    1498:	2b c0       	rjmp	.+86     	; 0x14f0 <vfscanf+0x216>
    149a:	33 37       	cpi	r19, 0x73	; 115
    149c:	69 f0       	breq	.+26     	; 0x14b8 <vfscanf+0x1de>
    149e:	35 37       	cpi	r19, 0x75	; 117
    14a0:	f9 f0       	breq	.+62     	; 0x14e0 <vfscanf+0x206>
    14a2:	26 c0       	rjmp	.+76     	; 0x14f0 <vfscanf+0x216>
    14a4:	c1 14       	cp	r12, r1
    14a6:	d1 04       	cpc	r13, r1
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <vfscanf+0x1da>
    14aa:	f6 01       	movw	r30, r12
    14ac:	80 82       	st	Z, r8
    14ae:	c6 01       	movw	r24, r12
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	6c 01       	movw	r12, r24
    14b4:	7a 94       	dec	r7
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <vfscanf+0x1fa>
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 cd 0a 	call	0x159a	; 0x159a <fgetc>
    14be:	4c 01       	movw	r8, r24
    14c0:	97 fd       	sbrc	r25, 7
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <vfscanf+0x1fa>
    14c4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <isspace>
    14c8:	89 2b       	or	r24, r25
    14ca:	61 f3       	breq	.-40     	; 0x14a4 <vfscanf+0x1ca>
    14cc:	b8 01       	movw	r22, r16
    14ce:	c4 01       	movw	r24, r8
    14d0:	0e 94 3d 0b 	call	0x167a	; 0x167a <ungetc>
    14d4:	c1 14       	cp	r12, r1
    14d6:	d1 04       	cpc	r13, r1
    14d8:	d9 f0       	breq	.+54     	; 0x1510 <vfscanf+0x236>
    14da:	f6 01       	movw	r30, r12
    14dc:	10 82       	st	Z, r1
    14de:	18 c0       	rjmp	.+48     	; 0x1510 <vfscanf+0x236>
    14e0:	fb 2d       	mov	r31, r11
    14e2:	f0 62       	ori	r31, 0x20	; 32
    14e4:	bf 2e       	mov	r11, r31
    14e6:	07 c0       	rjmp	.+14     	; 0x14f6 <vfscanf+0x21c>
    14e8:	8b 2d       	mov	r24, r11
    14ea:	80 61       	ori	r24, 0x10	; 16
    14ec:	b8 2e       	mov	r11, r24
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <vfscanf+0x21c>
    14f0:	9b 2d       	mov	r25, r11
    14f2:	90 64       	ori	r25, 0x40	; 64
    14f4:	b9 2e       	mov	r11, r25
    14f6:	2b 2d       	mov	r18, r11
    14f8:	a6 01       	movw	r20, r12
    14fa:	67 2d       	mov	r22, r7
    14fc:	c8 01       	movw	r24, r16
    14fe:	0e 94 34 08 	call	0x1068	; 0x1068 <conv_int>
    1502:	81 11       	cpse	r24, r1
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <vfscanf+0x236>
    1506:	f8 01       	movw	r30, r16
    1508:	83 81       	ldd	r24, Z+3	; 0x03
    150a:	80 73       	andi	r24, 0x30	; 48
    150c:	29 f4       	brne	.+10     	; 0x1518 <vfscanf+0x23e>
    150e:	06 c0       	rjmp	.+12     	; 0x151c <vfscanf+0x242>
    1510:	b0 fc       	sbrc	r11, 0
    1512:	fc ce       	rjmp	.-520    	; 0x130c <vfscanf+0x32>
    1514:	a3 94       	inc	r10
    1516:	fa ce       	rjmp	.-524    	; 0x130c <vfscanf+0x32>
    1518:	aa 20       	and	r10, r10
    151a:	19 f0       	breq	.+6      	; 0x1522 <vfscanf+0x248>
    151c:	8a 2d       	mov	r24, r10
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfscanf+0x24c>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	0f 90       	pop	r0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	5f 90       	pop	r5
    1544:	4f 90       	pop	r4
    1546:	08 95       	ret

00001548 <isspace>:
    1548:	91 11       	cpse	r25, r1
    154a:	0e c1       	rjmp	.+540    	; 0x1768 <__ctype_isfalse>
    154c:	80 32       	cpi	r24, 0x20	; 32
    154e:	19 f0       	breq	.+6      	; 0x1556 <isspace+0xe>
    1550:	89 50       	subi	r24, 0x09	; 9
    1552:	85 50       	subi	r24, 0x05	; 5
    1554:	d0 f7       	brcc	.-12     	; 0x154a <isspace+0x2>
    1556:	08 95       	ret

00001558 <strchr_P>:
    1558:	fc 01       	movw	r30, r24
    155a:	05 90       	lpm	r0, Z+
    155c:	06 16       	cp	r0, r22
    155e:	21 f0       	breq	.+8      	; 0x1568 <strchr_P+0x10>
    1560:	00 20       	and	r0, r0
    1562:	d9 f7       	brne	.-10     	; 0x155a <strchr_P+0x2>
    1564:	c0 01       	movw	r24, r0
    1566:	08 95       	ret
    1568:	31 97       	sbiw	r30, 0x01	; 1
    156a:	cf 01       	movw	r24, r30
    156c:	08 95       	ret

0000156e <strnlen_P>:
    156e:	fc 01       	movw	r30, r24
    1570:	05 90       	lpm	r0, Z+
    1572:	61 50       	subi	r22, 0x01	; 1
    1574:	70 40       	sbci	r23, 0x00	; 0
    1576:	01 10       	cpse	r0, r1
    1578:	d8 f7       	brcc	.-10     	; 0x1570 <strnlen_P+0x2>
    157a:	80 95       	com	r24
    157c:	90 95       	com	r25
    157e:	8e 0f       	add	r24, r30
    1580:	9f 1f       	adc	r25, r31
    1582:	08 95       	ret

00001584 <strnlen>:
    1584:	fc 01       	movw	r30, r24
    1586:	61 50       	subi	r22, 0x01	; 1
    1588:	70 40       	sbci	r23, 0x00	; 0
    158a:	01 90       	ld	r0, Z+
    158c:	01 10       	cpse	r0, r1
    158e:	d8 f7       	brcc	.-10     	; 0x1586 <strnlen+0x2>
    1590:	80 95       	com	r24
    1592:	90 95       	com	r25
    1594:	8e 0f       	add	r24, r30
    1596:	9f 1f       	adc	r25, r31
    1598:	08 95       	ret

0000159a <fgetc>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	20 ff       	sbrs	r18, 0
    15a4:	33 c0       	rjmp	.+102    	; 0x160c <fgetc+0x72>
    15a6:	26 ff       	sbrs	r18, 6
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <fgetc+0x24>
    15aa:	2f 7b       	andi	r18, 0xBF	; 191
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8e 81       	ldd	r24, Y+6	; 0x06
    15b0:	9f 81       	ldd	r25, Y+7	; 0x07
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	9f 83       	std	Y+7, r25	; 0x07
    15b6:	8e 83       	std	Y+6, r24	; 0x06
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	29 c0       	rjmp	.+82     	; 0x1610 <fgetc+0x76>
    15be:	22 ff       	sbrs	r18, 2
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <fgetc+0x46>
    15c2:	e8 81       	ld	r30, Y
    15c4:	f9 81       	ldd	r31, Y+1	; 0x01
    15c6:	80 81       	ld	r24, Z
    15c8:	99 27       	eor	r25, r25
    15ca:	87 fd       	sbrc	r24, 7
    15cc:	90 95       	com	r25
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <fgetc+0x3e>
    15d2:	20 62       	ori	r18, 0x20	; 32
    15d4:	2b 83       	std	Y+3, r18	; 0x03
    15d6:	1a c0       	rjmp	.+52     	; 0x160c <fgetc+0x72>
    15d8:	31 96       	adiw	r30, 0x01	; 1
    15da:	f9 83       	std	Y+1, r31	; 0x01
    15dc:	e8 83       	st	Y, r30
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <fgetc+0x62>
    15e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    15e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    15e4:	09 95       	icall
    15e6:	97 ff       	sbrs	r25, 7
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <fgetc+0x62>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <fgetc+0x5a>
    15f0:	80 e1       	ldi	r24, 0x10	; 16
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <fgetc+0x5c>
    15f4:	80 e2       	ldi	r24, 0x20	; 32
    15f6:	82 2b       	or	r24, r18
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <fgetc+0x72>
    15fc:	2e 81       	ldd	r18, Y+6	; 0x06
    15fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1600:	2f 5f       	subi	r18, 0xFF	; 255
    1602:	3f 4f       	sbci	r19, 0xFF	; 255
    1604:	3f 83       	std	Y+7, r19	; 0x07
    1606:	2e 83       	std	Y+6, r18	; 0x06
    1608:	99 27       	eor	r25, r25
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <fgetc+0x76>
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	9f ef       	ldi	r25, 0xFF	; 255
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <fputc>:
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	18 2f       	mov	r17, r24
    1620:	09 2f       	mov	r16, r25
    1622:	eb 01       	movw	r28, r22
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 fd       	sbrc	r24, 1
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <fputc+0x1a>
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	20 c0       	rjmp	.+64     	; 0x1670 <fputc+0x5a>
    1630:	82 ff       	sbrs	r24, 2
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <fputc+0x3e>
    1634:	4e 81       	ldd	r20, Y+6	; 0x06
    1636:	5f 81       	ldd	r21, Y+7	; 0x07
    1638:	2c 81       	ldd	r18, Y+4	; 0x04
    163a:	3d 81       	ldd	r19, Y+5	; 0x05
    163c:	42 17       	cp	r20, r18
    163e:	53 07       	cpc	r21, r19
    1640:	7c f4       	brge	.+30     	; 0x1660 <fputc+0x4a>
    1642:	e8 81       	ld	r30, Y
    1644:	f9 81       	ldd	r31, Y+1	; 0x01
    1646:	9f 01       	movw	r18, r30
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	39 83       	std	Y+1, r19	; 0x01
    164e:	28 83       	st	Y, r18
    1650:	10 83       	st	Z, r17
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <fputc+0x4a>
    1654:	e8 85       	ldd	r30, Y+8	; 0x08
    1656:	f9 85       	ldd	r31, Y+9	; 0x09
    1658:	81 2f       	mov	r24, r17
    165a:	09 95       	icall
    165c:	89 2b       	or	r24, r25
    165e:	29 f7       	brne	.-54     	; 0x162a <fputc+0x14>
    1660:	2e 81       	ldd	r18, Y+6	; 0x06
    1662:	3f 81       	ldd	r19, Y+7	; 0x07
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	3f 83       	std	Y+7, r19	; 0x07
    166a:	2e 83       	std	Y+6, r18	; 0x06
    166c:	81 2f       	mov	r24, r17
    166e:	90 2f       	mov	r25, r16
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	08 95       	ret

0000167a <ungetc>:
    167a:	fb 01       	movw	r30, r22
    167c:	23 81       	ldd	r18, Z+3	; 0x03
    167e:	20 ff       	sbrs	r18, 0
    1680:	12 c0       	rjmp	.+36     	; 0x16a6 <ungetc+0x2c>
    1682:	26 fd       	sbrc	r18, 6
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <ungetc+0x2c>
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	93 07       	cpc	r25, r19
    168c:	61 f0       	breq	.+24     	; 0x16a6 <ungetc+0x2c>
    168e:	82 83       	std	Z+2, r24	; 0x02
    1690:	2f 7d       	andi	r18, 0xDF	; 223
    1692:	20 64       	ori	r18, 0x40	; 64
    1694:	23 83       	std	Z+3, r18	; 0x03
    1696:	26 81       	ldd	r18, Z+6	; 0x06
    1698:	37 81       	ldd	r19, Z+7	; 0x07
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	31 09       	sbc	r19, r1
    169e:	37 83       	std	Z+7, r19	; 0x07
    16a0:	26 83       	std	Z+6, r18	; 0x06
    16a2:	99 27       	eor	r25, r25
    16a4:	08 95       	ret
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	08 95       	ret

000016ac <__ultoa_invert>:
    16ac:	fa 01       	movw	r30, r20
    16ae:	aa 27       	eor	r26, r26
    16b0:	28 30       	cpi	r18, 0x08	; 8
    16b2:	51 f1       	breq	.+84     	; 0x1708 <__ultoa_invert+0x5c>
    16b4:	20 31       	cpi	r18, 0x10	; 16
    16b6:	81 f1       	breq	.+96     	; 0x1718 <__ultoa_invert+0x6c>
    16b8:	e8 94       	clt
    16ba:	6f 93       	push	r22
    16bc:	6e 7f       	andi	r22, 0xFE	; 254
    16be:	6e 5f       	subi	r22, 0xFE	; 254
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	af 4f       	sbci	r26, 0xFF	; 255
    16c8:	b1 e0       	ldi	r27, 0x01	; 1
    16ca:	3e d0       	rcall	.+124    	; 0x1748 <__ultoa_invert+0x9c>
    16cc:	b4 e0       	ldi	r27, 0x04	; 4
    16ce:	3c d0       	rcall	.+120    	; 0x1748 <__ultoa_invert+0x9c>
    16d0:	67 0f       	add	r22, r23
    16d2:	78 1f       	adc	r23, r24
    16d4:	89 1f       	adc	r24, r25
    16d6:	9a 1f       	adc	r25, r26
    16d8:	a1 1d       	adc	r26, r1
    16da:	68 0f       	add	r22, r24
    16dc:	79 1f       	adc	r23, r25
    16de:	8a 1f       	adc	r24, r26
    16e0:	91 1d       	adc	r25, r1
    16e2:	a1 1d       	adc	r26, r1
    16e4:	6a 0f       	add	r22, r26
    16e6:	71 1d       	adc	r23, r1
    16e8:	81 1d       	adc	r24, r1
    16ea:	91 1d       	adc	r25, r1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	20 d0       	rcall	.+64     	; 0x1730 <__ultoa_invert+0x84>
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__ultoa_invert+0x48>
    16f2:	68 94       	set
    16f4:	3f 91       	pop	r19
    16f6:	2a e0       	ldi	r18, 0x0A	; 10
    16f8:	26 9f       	mul	r18, r22
    16fa:	11 24       	eor	r1, r1
    16fc:	30 19       	sub	r19, r0
    16fe:	30 5d       	subi	r19, 0xD0	; 208
    1700:	31 93       	st	Z+, r19
    1702:	de f6       	brtc	.-74     	; 0x16ba <__ultoa_invert+0xe>
    1704:	cf 01       	movw	r24, r30
    1706:	08 95       	ret
    1708:	46 2f       	mov	r20, r22
    170a:	47 70       	andi	r20, 0x07	; 7
    170c:	40 5d       	subi	r20, 0xD0	; 208
    170e:	41 93       	st	Z+, r20
    1710:	b3 e0       	ldi	r27, 0x03	; 3
    1712:	0f d0       	rcall	.+30     	; 0x1732 <__ultoa_invert+0x86>
    1714:	c9 f7       	brne	.-14     	; 0x1708 <__ultoa_invert+0x5c>
    1716:	f6 cf       	rjmp	.-20     	; 0x1704 <__ultoa_invert+0x58>
    1718:	46 2f       	mov	r20, r22
    171a:	4f 70       	andi	r20, 0x0F	; 15
    171c:	40 5d       	subi	r20, 0xD0	; 208
    171e:	4a 33       	cpi	r20, 0x3A	; 58
    1720:	18 f0       	brcs	.+6      	; 0x1728 <__ultoa_invert+0x7c>
    1722:	49 5d       	subi	r20, 0xD9	; 217
    1724:	31 fd       	sbrc	r19, 1
    1726:	40 52       	subi	r20, 0x20	; 32
    1728:	41 93       	st	Z+, r20
    172a:	02 d0       	rcall	.+4      	; 0x1730 <__ultoa_invert+0x84>
    172c:	a9 f7       	brne	.-22     	; 0x1718 <__ultoa_invert+0x6c>
    172e:	ea cf       	rjmp	.-44     	; 0x1704 <__ultoa_invert+0x58>
    1730:	b4 e0       	ldi	r27, 0x04	; 4
    1732:	a6 95       	lsr	r26
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	ba 95       	dec	r27
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__ultoa_invert+0x86>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	61 05       	cpc	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	08 95       	ret
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	0a 2e       	mov	r0, r26
    174e:	06 94       	lsr	r0
    1750:	57 95       	ror	r21
    1752:	47 95       	ror	r20
    1754:	37 95       	ror	r19
    1756:	27 95       	ror	r18
    1758:	ba 95       	dec	r27
    175a:	c9 f7       	brne	.-14     	; 0x174e <__ultoa_invert+0xa2>
    175c:	62 0f       	add	r22, r18
    175e:	73 1f       	adc	r23, r19
    1760:	84 1f       	adc	r24, r20
    1762:	95 1f       	adc	r25, r21
    1764:	a0 1d       	adc	r26, r0
    1766:	08 95       	ret

00001768 <__ctype_isfalse>:
    1768:	99 27       	eor	r25, r25
    176a:	88 27       	eor	r24, r24

0000176c <__ctype_istrue>:
    176c:	08 95       	ret

0000176e <__prologue_saves__>:
    176e:	2f 92       	push	r2
    1770:	3f 92       	push	r3
    1772:	4f 92       	push	r4
    1774:	5f 92       	push	r5
    1776:	6f 92       	push	r6
    1778:	7f 92       	push	r7
    177a:	8f 92       	push	r8
    177c:	9f 92       	push	r9
    177e:	af 92       	push	r10
    1780:	bf 92       	push	r11
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	ca 1b       	sub	r28, r26
    1798:	db 0b       	sbc	r29, r27
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	09 94       	ijmp

000017a6 <__epilogue_restores__>:
    17a6:	2a 88       	ldd	r2, Y+18	; 0x12
    17a8:	39 88       	ldd	r3, Y+17	; 0x11
    17aa:	48 88       	ldd	r4, Y+16	; 0x10
    17ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    17ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    17b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    17b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    17b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    17b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    17b8:	b9 84       	ldd	r11, Y+9	; 0x09
    17ba:	c8 84       	ldd	r12, Y+8	; 0x08
    17bc:	df 80       	ldd	r13, Y+7	; 0x07
    17be:	ee 80       	ldd	r14, Y+6	; 0x06
    17c0:	fd 80       	ldd	r15, Y+5	; 0x05
    17c2:	0c 81       	ldd	r16, Y+4	; 0x04
    17c4:	1b 81       	ldd	r17, Y+3	; 0x03
    17c6:	aa 81       	ldd	r26, Y+2	; 0x02
    17c8:	b9 81       	ldd	r27, Y+1	; 0x01
    17ca:	ce 0f       	add	r28, r30
    17cc:	d1 1d       	adc	r29, r1
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	ed 01       	movw	r28, r26
    17da:	08 95       	ret

000017dc <_exit>:
    17dc:	f8 94       	cli

000017de <__stop_program>:
    17de:	ff cf       	rjmp	.-2      	; 0x17de <__stop_program>
