
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00001760  000017f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000139  008000fa  008000fa  0000188e  2**0
                  ALLOC
  3 .stab         00001b84  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f96  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000043aa  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_4>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d4 e0       	ldi	r29, 0x04	; 4
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	10 e0       	ldi	r17, 0x00	; 0
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e0 e6       	ldi	r30, 0x60	; 96
      74:	f7 e1       	ldi	r31, 0x17	; 23
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	aa 3f       	cpi	r26, 0xFA	; 250
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	22 e0       	ldi	r18, 0x02	; 2
      84:	aa ef       	ldi	r26, 0xFA	; 250
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a3 33       	cpi	r26, 0x33	; 51
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 10 05 	call	0xa20	; 0xa20 <main>
      96:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      9e:	cf 92       	push	r12
      a0:	df 92       	push	r13
      a2:	ef 92       	push	r14
      a4:	ff 92       	push	r15
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	28 97       	sbiw	r28, 0x08	; 8
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      c0:	fc 01       	movw	r30, r24
      c2:	51 81       	ldd	r21, Z+1	; 0x01
      c4:	85 2f       	mov	r24, r21
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	9c 01       	movw	r18, r24
      ca:	20 53       	subi	r18, 0x30	; 48
      cc:	31 09       	sbc	r19, r1
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	2d 83       	std	Y+5, r18	; 0x05
	switch (code[0]) {
      d2:	40 81       	ld	r20, Z
      d4:	45 34       	cpi	r20, 0x45	; 69
      d6:	09 f4       	brne	.+2      	; 0xda <runCmd+0x3c>
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <runCmd+0x1ee>
      da:	30 f4       	brcc	.+12     	; 0xe8 <runCmd+0x4a>
      dc:	41 34       	cpi	r20, 0x41	; 65
      de:	59 f0       	breq	.+22     	; 0xf6 <runCmd+0x58>
      e0:	43 34       	cpi	r20, 0x43	; 67
      e2:	09 f4       	brne	.+2      	; 0xe6 <runCmd+0x48>
      e4:	70 c0       	rjmp	.+224    	; 0x1c6 <runCmd+0x128>
      e6:	1f c2       	rjmp	.+1086   	; 0x526 <__stack+0xc7>
      e8:	44 35       	cpi	r20, 0x54	; 84
      ea:	09 f4       	brne	.+2      	; 0xee <runCmd+0x50>
      ec:	61 c1       	rjmp	.+706    	; 0x3b0 <runCmd+0x312>
      ee:	45 35       	cpi	r20, 0x55	; 85
      f0:	09 f4       	brne	.+2      	; 0xf4 <runCmd+0x56>
      f2:	bf c1       	rjmp	.+894    	; 0x472 <__stack+0x13>
      f4:	18 c2       	rjmp	.+1072   	; 0x526 <__stack+0xc7>
	case 'A':		// control port a
		if (code[2] - '0') {
      f6:	f8 01       	movw	r30, r16
      f8:	82 81       	ldd	r24, Z+2	; 0x02
      fa:	80 33       	cpi	r24, 0x30	; 48
      fc:	31 f1       	breq	.+76     	; 0x14a <runCmd+0xac>
			writeEEPROM(addr, '1');
      fe:	61 e3       	ldi	r22, 0x31	; 49
     100:	c9 01       	movw	r24, r18
     102:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTA |= 1 << addr;
     106:	2b b3       	in	r18, 0x1b	; 27
     108:	ee 24       	eor	r14, r14
     10a:	e3 94       	inc	r14
     10c:	f1 2c       	mov	r15, r1
     10e:	c7 01       	movw	r24, r14
     110:	0d 80       	ldd	r0, Y+5	; 0x05
     112:	02 c0       	rjmp	.+4      	; 0x118 <runCmd+0x7a>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <runCmd+0x76>
     11c:	28 2b       	or	r18, r24
     11e:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     120:	f8 01       	movw	r30, r16
     122:	81 81       	ldd	r24, Z+1	; 0x01
     124:	1f 92       	push	r1
     126:	8f 93       	push	r24
     128:	82 e6       	ldi	r24, 0x62	; 98
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	9f 93       	push	r25
     12e:	8f 93       	push	r24
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	9f 93       	push	r25
     136:	8f 93       	push	r24
     138:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
			status |= 1 << addr;
     13c:	0d 80       	ldd	r0, Y+5	; 0x05
     13e:	02 c0       	rjmp	.+4      	; 0x144 <runCmd+0xa6>
     140:	ee 0c       	add	r14, r14
     142:	ff 1c       	adc	r15, r15
     144:	0a 94       	dec	r0
     146:	e2 f7       	brpl	.-8      	; 0x140 <runCmd+0xa2>
     148:	69 c0       	rjmp	.+210    	; 0x21c <runCmd+0x17e>
		} else {
			writeEEPROM(addr, '0');
     14a:	60 e3       	ldi	r22, 0x30	; 48
     14c:	c9 01       	movw	r24, r18
     14e:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTA &= ~(1 << addr);
     152:	2b b3       	in	r18, 0x1b	; 27
     154:	ee 24       	eor	r14, r14
     156:	e3 94       	inc	r14
     158:	f1 2c       	mov	r15, r1
     15a:	c7 01       	movw	r24, r14
     15c:	0d 80       	ldd	r0, Y+5	; 0x05
     15e:	02 c0       	rjmp	.+4      	; 0x164 <runCmd+0xc6>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <runCmd+0xc2>
     168:	80 95       	com	r24
     16a:	82 23       	and	r24, r18
     16c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     16e:	f8 01       	movw	r30, r16
     170:	81 81       	ldd	r24, Z+1	; 0x01
     172:	1f 92       	push	r1
     174:	8f 93       	push	r24
     176:	8e e6       	ldi	r24, 0x6E	; 110
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9f 93       	push	r25
     17c:	8f 93       	push	r24
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
			status &= ~(1 << addr);
     18a:	97 01       	movw	r18, r14
     18c:	0d 80       	ldd	r0, Y+5	; 0x05
     18e:	02 c0       	rjmp	.+4      	; 0x194 <runCmd+0xf6>
     190:	22 0f       	add	r18, r18
     192:	33 1f       	adc	r19, r19
     194:	0a 94       	dec	r0
     196:	e2 f7       	brpl	.-8      	; 0x190 <runCmd+0xf2>
     198:	20 95       	com	r18
     19a:	30 95       	com	r19
     19c:	80 91 a7 01 	lds	r24, 0x01A7
     1a0:	90 91 a8 01 	lds	r25, 0x01A8
     1a4:	82 23       	and	r24, r18
     1a6:	93 23       	and	r25, r19
     1a8:	90 93 a8 01 	sts	0x01A8, r25
     1ac:	80 93 a7 01 	sts	0x01A7, r24
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
		}
		runCmd(buf);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
		break;
     1c4:	c6 c1       	rjmp	.+908    	; 0x552 <__stack+0xf3>
	case 'C':		// control port c
		if (code[2] - '0') {
     1c6:	f8 01       	movw	r30, r16
     1c8:	22 81       	ldd	r18, Z+2	; 0x02
     1ca:	88 97       	sbiw	r24, 0x28	; 40
     1cc:	20 33       	cpi	r18, 0x30	; 48
     1ce:	69 f1       	breq	.+90     	; 0x22a <runCmd+0x18c>
			writeEEPROM(8 + addr, '1');
     1d0:	61 e3       	ldi	r22, 0x31	; 49
     1d2:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTC |= 1 << addr;
     1d6:	25 b3       	in	r18, 0x15	; 21
     1d8:	ee 24       	eor	r14, r14
     1da:	e3 94       	inc	r14
     1dc:	f1 2c       	mov	r15, r1
     1de:	c7 01       	movw	r24, r14
     1e0:	0d 80       	ldd	r0, Y+5	; 0x05
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <runCmd+0x14a>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <runCmd+0x146>
     1ec:	28 2b       	or	r18, r24
     1ee:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     1f0:	f8 01       	movw	r30, r16
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	1f 92       	push	r1
     1f6:	8f 93       	push	r24
     1f8:	8a e7       	ldi	r24, 0x7A	; 122
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
			status |= 1 << (8 + addr);
     20c:	8d 81       	ldd	r24, Y+5	; 0x05
     20e:	9e 81       	ldd	r25, Y+6	; 0x06
     210:	08 96       	adiw	r24, 0x08	; 8
     212:	02 c0       	rjmp	.+4      	; 0x218 <runCmd+0x17a>
     214:	ee 0c       	add	r14, r14
     216:	ff 1c       	adc	r15, r15
     218:	8a 95       	dec	r24
     21a:	e2 f7       	brpl	.-8      	; 0x214 <runCmd+0x176>
     21c:	80 91 a7 01 	lds	r24, 0x01A7
     220:	90 91 a8 01 	lds	r25, 0x01A8
     224:	8e 29       	or	r24, r14
     226:	9f 29       	or	r25, r15
     228:	bf cf       	rjmp	.-130    	; 0x1a8 <runCmd+0x10a>
		} else {
			writeEEPROM(8 + addr, '0');
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTC &= ~(1 << addr);
     230:	25 b3       	in	r18, 0x15	; 21
     232:	ee 24       	eor	r14, r14
     234:	e3 94       	inc	r14
     236:	f1 2c       	mov	r15, r1
     238:	c7 01       	movw	r24, r14
     23a:	0d 80       	ldd	r0, Y+5	; 0x05
     23c:	02 c0       	rjmp	.+4      	; 0x242 <runCmd+0x1a4>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <runCmd+0x1a0>
     246:	80 95       	com	r24
     248:	82 23       	and	r24, r18
     24a:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     24c:	f8 01       	movw	r30, r16
     24e:	81 81       	ldd	r24, Z+1	; 0x01
     250:	1f 92       	push	r1
     252:	8f 93       	push	r24
     254:	86 e8       	ldi	r24, 0x86	; 134
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9f 93       	push	r25
     25a:	8f 93       	push	r24
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
			status ^= ~(1 << (8 + addr));
     268:	8d 81       	ldd	r24, Y+5	; 0x05
     26a:	9e 81       	ldd	r25, Y+6	; 0x06
     26c:	08 96       	adiw	r24, 0x08	; 8
     26e:	97 01       	movw	r18, r14
     270:	02 c0       	rjmp	.+4      	; 0x276 <runCmd+0x1d8>
     272:	22 0f       	add	r18, r18
     274:	33 1f       	adc	r19, r19
     276:	8a 95       	dec	r24
     278:	e2 f7       	brpl	.-8      	; 0x272 <runCmd+0x1d4>
     27a:	20 95       	com	r18
     27c:	30 95       	com	r19
     27e:	80 91 a7 01 	lds	r24, 0x01A7
     282:	90 91 a8 01 	lds	r25, 0x01A8
     286:	82 27       	eor	r24, r18
     288:	93 27       	eor	r25, r19
     28a:	8e cf       	rjmp	.-228    	; 0x1a8 <runCmd+0x10a>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     28c:	f8 01       	movw	r30, r16
     28e:	62 81       	ldd	r22, Z+2	; 0x02
     290:	69 36       	cpi	r22, 0x69	; 105
     292:	79 f4       	brne	.+30     	; 0x2b2 <runCmd+0x214>
     294:	e1 2c       	mov	r14, r1
     296:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++)
				writeEEPROM(i, code[1]);
     298:	f8 01       	movw	r30, r16
     29a:	61 81       	ldd	r22, Z+1	; 0x01
     29c:	c7 01       	movw	r24, r14
     29e:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
			for (i = 0; i < 16; i++)
     2a2:	ff ef       	ldi	r31, 0xFF	; 255
     2a4:	ef 1a       	sub	r14, r31
     2a6:	ff 0a       	sbc	r15, r31
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	e2 16       	cp	r14, r18
     2ac:	f1 04       	cpc	r15, r1
     2ae:	a1 f7       	brne	.-24     	; 0x298 <runCmd+0x1fa>
     2b0:	50 c1       	rjmp	.+672    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, code[1]);
		else if (code[2] == 'f')
     2b2:	66 36       	cpi	r22, 0x66	; 102
     2b4:	c1 f4       	brne	.+48     	; 0x2e6 <runCmd+0x248>
		{
			if(code[1] == 'a')
     2b6:	51 36       	cpi	r21, 0x61	; 97
     2b8:	19 f4       	brne	.+6      	; 0x2c0 <runCmd+0x222>
				addr = EEPROM_SIZE;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <runCmd+0x226>
			else
				addr = 16;
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9e 83       	std	Y+6, r25	; 0x06
     2c6:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     2c8:	00 e0       	ldi	r16, 0x00	; 0
     2ca:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
     2ce:	9e 81       	ldd	r25, Y+6	; 0x06
     2d0:	08 17       	cp	r16, r24
     2d2:	19 07       	cpc	r17, r25
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <runCmd+0x23a>
     2d6:	3d c1       	rjmp	.+634    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, 0xff);
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	f3 cf       	rjmp	.-26     	; 0x2cc <runCmd+0x22e>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
     2e6:	62 37       	cpi	r22, 0x72	; 114
     2e8:	29 f4       	brne	.+10     	; 0x2f4 <runCmd+0x256>
			PORTA = ~readEEPROM(code[1]);
     2ea:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     2ee:	80 95       	com	r24
     2f0:	8b bb       	out	0x1b, r24	; 27
     2f2:	2f c1       	rjmp	.+606    	; 0x552 <__stack+0xf3>
		else if (code[1] == 'R') {
     2f4:	52 35       	cpi	r21, 0x52	; 82
     2f6:	09 f0       	breq	.+2      	; 0x2fa <runCmd+0x25c>
     2f8:	b4 c0       	rjmp	.+360    	; 0x462 <__stack+0x3>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     2fa:	ce 01       	movw	r24, r28
     2fc:	05 96       	adiw	r24, 0x05	; 5
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	84 eb       	ldi	r24, 0xB4	; 180
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 5f       	subi	r16, 0xFE	; 254
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	1f 93       	push	r17
     310:	0f 93       	push	r16
     312:	0e 94 c4 05 	call	0xb88	; 0xb88 <sscanf>
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f4       	brne	.+60     	; 0x362 <runCmd+0x2c4>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	9e 81       	ldd	r25, Y+6	; 0x06
     32a:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     32e:	1f 92       	push	r1
     330:	8f 93       	push	r24
     332:	8e 81       	ldd	r24, Y+6	; 0x06
     334:	8f 93       	push	r24
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	8f 93       	push	r24
     33a:	82 e9       	ldi	r24, 0x92	; 146
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
				print(buf);
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	f8 c0       	rjmp	.+496    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
			PORTA = ~readEEPROM(code[1]);
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     362:	00 e0       	ldi	r16, 0x00	; 0
     364:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     366:	32 e9       	ldi	r19, 0x92	; 146
     368:	c3 2e       	mov	r12, r19
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	d3 2e       	mov	r13, r19
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	e4 2e       	mov	r14, r20
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     376:	c8 01       	movw	r24, r16
     378:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     37c:	1f 92       	push	r1
     37e:	8f 93       	push	r24
     380:	1f 93       	push	r17
     382:	0f 93       	push	r16
     384:	df 92       	push	r13
     386:	cf 92       	push	r12
     388:	ff 92       	push	r15
     38a:	ef 92       	push	r14
     38c:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
						readEEPROM(i));
					print(buf);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	01 15       	cp	r16, r1
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	1f 07       	cpc	r17, r31
     3ac:	21 f7       	brne	.-56     	; 0x376 <runCmd+0x2d8>
     3ae:	d1 c0       	rjmp	.+418    	; 0x552 <__stack+0xf3>
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3b0:	1f 93       	push	r17
     3b2:	0f 93       	push	r16
     3b4:	ce 01       	movw	r24, r28
     3b6:	03 96       	adiw	r24, 0x03	; 3
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	89 e9       	ldi	r24, 0x99	; 153
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	1f 93       	push	r17
     3c6:	0f 93       	push	r16
     3c8:	0e 94 c4 05 	call	0xb88	; 0xb88 <sscanf>
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	02 97       	sbiw	r24, 0x02	; 2
     3d8:	09 f0       	breq	.+2      	; 0x3dc <runCmd+0x33e>
     3da:	46 c0       	rjmp	.+140    	; 0x468 <__stack+0x9>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3dc:	6c 81       	ldd	r22, Y+4	; 0x04
     3de:	80 91 65 01 	lds	r24, 0x0165
     3e2:	90 91 66 01 	lds	r25, 0x0166
     3e6:	9c 01       	movw	r18, r24
     3e8:	21 50       	subi	r18, 0x01	; 1
     3ea:	31 09       	sbc	r19, r1
     3ec:	30 93 66 01 	sts	0x0166, r19
     3f0:	20 93 65 01 	sts	0x0165, r18
     3f4:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     3f8:	6b 81       	ldd	r22, Y+3	; 0x03
     3fa:	80 91 65 01 	lds	r24, 0x0165
     3fe:	90 91 66 01 	lds	r25, 0x0166
     402:	9c 01       	movw	r18, r24
     404:	21 50       	subi	r18, 0x01	; 1
     406:	31 09       	sbc	r19, r1
     408:	30 93 66 01 	sts	0x0166, r19
     40c:	20 93 65 01 	sts	0x0165, r18
     410:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     414:	78 01       	movw	r14, r16
     416:	f8 01       	movw	r30, r16
     418:	01 90       	ld	r0, Z+
     41a:	00 20       	and	r0, r0
     41c:	e9 f7       	brne	.-6      	; 0x418 <runCmd+0x37a>
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	e0 1b       	sub	r30, r16
     422:	f1 0b       	sbc	r31, r17
     424:	80 91 65 01 	lds	r24, 0x0165
     428:	90 91 66 01 	lds	r25, 0x0166
     42c:	97 01       	movw	r18, r14
     42e:	20 1b       	sub	r18, r16
     430:	31 0b       	sbc	r19, r17
     432:	2e 17       	cp	r18, r30
     434:	3f 07       	cpc	r19, r31
     436:	68 f4       	brcc	.+26     	; 0x452 <runCmd+0x3b4>
				writeEEPROM(stackTail--, code[i]);
     438:	f7 01       	movw	r30, r14
     43a:	61 91       	ld	r22, Z+
     43c:	7f 01       	movw	r14, r30
     43e:	9c 01       	movw	r18, r24
     440:	21 50       	subi	r18, 0x01	; 1
     442:	31 09       	sbc	r19, r1
     444:	30 93 66 01 	sts	0x0166, r19
     448:	20 93 65 01 	sts	0x0165, r18
     44c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
     450:	e2 cf       	rjmp	.-60     	; 0x416 <runCmd+0x378>
			}
			writeEEPROM(stackTail--, '\n');
     452:	9c 01       	movw	r18, r24
     454:	21 50       	subi	r18, 0x01	; 1
     456:	31 09       	sbc	r19, r1
     458:	30 93 66 01 	sts	0x0166, r19
     45c:	20 93 65 01 	sts	0x0165, r18
     460:	6a e0       	ldi	r22, 0x0A	; 10
     462:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     466:	75 c0       	rjmp	.+234    	; 0x552 <__stack+0xf3>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     468:	8f e9       	ldi	r24, 0x9F	; 159
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
			return;
     470:	70 c0       	rjmp	.+224    	; 0x552 <__stack+0xf3>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	02 96       	adiw	r24, 0x02	; 2
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	04 96       	adiw	r24, 0x04	; 4
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	8c ea       	ldi	r24, 0xAC	; 172
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	1f 93       	push	r17
     496:	0f 93       	push	r16
     498:	0e 94 c4 05 	call	0xb88	; 0xb88 <sscanf>
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	04 97       	sbiw	r24, 0x04	; 4
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__stack+0x4d>
     4aa:	53 c0       	rjmp	.+166    	; 0x552 <__stack+0xf3>
			if (port == 'A')
     4ac:	88 85       	ldd	r24, Y+8	; 0x08
     4ae:	81 34       	cpi	r24, 0x41	; 65
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <__stack+0x59>
				addr = 16;
     4b2:	80 e1       	ldi	r24, 0x10	; 16
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__stack+0x61>
			else if (port == 'C')
     4b8:	83 34       	cpi	r24, 0x43	; 67
     4ba:	b1 f4       	brne	.+44     	; 0x4e8 <__stack+0x89>
				addr = 48;
     4bc:	80 e3       	ldi	r24, 0x30	; 48
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9e 83       	std	Y+6, r25	; 0x06
     4c2:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4c4:	8f 81       	ldd	r24, Y+7	; 0x07
     4c6:	90 ed       	ldi	r25, 0xD0	; 208
     4c8:	98 0f       	add	r25, r24
     4ca:	9a 30       	cpi	r25, 0x0A	; 10
     4cc:	90 f4       	brcc	.+36     	; 0x4f2 <__stack+0x93>
				addr += (pin - '0') * 4;
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	c0 97       	sbiw	r24, 0x30	; 48
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	2d 81       	ldd	r18, Y+5	; 0x05
     4dc:	3e 81       	ldd	r19, Y+6	; 0x06
     4de:	28 0f       	add	r18, r24
     4e0:	39 1f       	adc	r19, r25
     4e2:	3e 83       	std	Y+6, r19	; 0x06
     4e4:	2d 83       	std	Y+5, r18	; 0x05
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__stack+0x93>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4e8:	87 eb       	ldi	r24, 0xB7	; 183
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 75 05 	call	0xaea	; 0xaea <puts>
				return;
     4f0:	30 c0       	rjmp	.+96     	; 0x552 <__stack+0xf3>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     4f2:	6c 81       	ldd	r22, Y+4	; 0x04
     4f4:	8d 81       	ldd	r24, Y+5	; 0x05
     4f6:	9e 81       	ldd	r25, Y+6	; 0x06
     4f8:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 1, time);
     4fc:	8d 81       	ldd	r24, Y+5	; 0x05
     4fe:	9e 81       	ldd	r25, Y+6	; 0x06
     500:	6b 81       	ldd	r22, Y+3	; 0x03
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     508:	6a 81       	ldd	r22, Y+2	; 0x02
     50a:	8d 81       	ldd	r24, Y+5	; 0x05
     50c:	9e 81       	ldd	r25, Y+6	; 0x06
     50e:	02 96       	adiw	r24, 0x02	; 2
     510:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
     518:	69 81       	ldd	r22, Y+1	; 0x01
     51a:	03 96       	adiw	r24, 0x03	; 3
     51c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			setDuty();
     520:	0e 94 c7 02 	call	0x58e	; 0x58e <setDuty>
     524:	16 c0       	rjmp	.+44     	; 0x552 <__stack+0xf3>
		}
		break;
	default:
		sprintf(buf, "Unrecognised code:%s\n", code);
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	82 ec       	ldi	r24, 0xC2	; 194
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 a2 05 	call	0xb44	; 0xb44 <sprintf>
		print(buf);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
		break;
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
	}
}
     552:	28 96       	adiw	r28, 0x08	; 8
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     570:	e1 99       	sbic	0x1c, 1	; 28
     572:	fe cf       	rjmp	.-4      	; 0x570 <writeEEPROM>
	EEAR = addr;
     574:	9f bb       	out	0x1f, r25	; 31
     576:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     578:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     57a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     57c:	e1 9a       	sbi	0x1c, 1	; 28
     57e:	08 95       	ret

00000580 <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     580:	e1 99       	sbic	0x1c, 1	; 28
     582:	fe cf       	rjmp	.-4      	; 0x580 <readEEPROM>
	EEAR = addr;
     584:	9f bb       	out	0x1f, r25	; 31
     586:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     588:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     58a:	8d b3       	in	r24, 0x1d	; 29
}
     58c:	08 95       	ret

0000058e <setDuty>:

void setDuty()
{
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	c0 e0       	ldi	r28, 0x00	; 0
     59a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     59c:	8e 01       	movw	r16, r28
     59e:	15 95       	asr	r17
     5a0:	07 95       	ror	r16
     5a2:	15 95       	asr	r17
     5a4:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5a6:	ce 01       	movw	r24, r28
     5a8:	40 96       	adiw	r24, 0x10	; 16
     5aa:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     5ae:	f8 2e       	mov	r15, r24
     5b0:	ce 01       	movw	r24, r28
     5b2:	41 96       	adiw	r24, 0x11	; 17
     5b4:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5b8:	00 0f       	add	r16, r16
     5ba:	11 1f       	adc	r17, r17
     5bc:	f8 01       	movw	r30, r16
     5be:	e9 59       	subi	r30, 0x99	; 153
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5c2:	2f 2d       	mov	r18, r15
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	32 2f       	mov	r19, r18
     5c8:	22 27       	eor	r18, r18
     5ca:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5cc:	31 83       	std	Z+1, r19	; 0x01
     5ce:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5d0:	ce 01       	movw	r24, r28
     5d2:	42 96       	adiw	r24, 0x12	; 18
     5d4:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     5d8:	f8 2e       	mov	r15, r24
     5da:	ce 01       	movw	r24, r28
     5dc:	43 96       	adiw	r24, 0x13	; 19
     5de:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5e2:	f8 01       	movw	r30, r16
     5e4:	e9 57       	subi	r30, 0x79	; 121
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5e8:	2f 2d       	mov	r18, r15
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	32 2f       	mov	r19, r18
     5ee:	22 27       	eor	r18, r18
     5f0:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5f2:	31 83       	std	Z+1, r19	; 0x01
     5f4:	20 83       	st	Z, r18
     5f6:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     5f8:	c0 34       	cpi	r28, 0x40	; 64
     5fa:	d1 05       	cpc	r29, r1
     5fc:	79 f6       	brne	.-98     	; 0x59c <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     5fe:	40 91 a7 01 	lds	r20, 0x01A7
     602:	50 91 a8 01 	lds	r21, 0x01A8
     606:	c7 e6       	ldi	r28, 0x67	; 103
     608:	d1 e0       	ldi	r29, 0x01	; 1
     60a:	e9 ea       	ldi	r30, 0xA9	; 169
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	a7 e8       	ldi	r26, 0x87	; 135
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	9b 01       	movw	r18, r22
     61c:	08 2e       	mov	r0, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <setDuty+0x96>
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <setDuty+0x92>
     628:	24 23       	and	r18, r20
     62a:	35 23       	and	r19, r21
     62c:	23 2b       	or	r18, r19
     62e:	19 f0       	breq	.+6      	; 0x636 <setDuty+0xa8>
			m[i] = dutyH[i];
     630:	28 81       	ld	r18, Y
     632:	39 81       	ldd	r19, Y+1	; 0x01
     634:	03 c0       	rjmp	.+6      	; 0x63c <setDuty+0xae>
		else
			m[i] = dutyL[i];
     636:	2d 91       	ld	r18, X+
     638:	3c 91       	ld	r19, X
     63a:	11 97       	sbiw	r26, 0x01	; 1
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	22 96       	adiw	r28, 0x02	; 2
     644:	32 96       	adiw	r30, 0x02	; 2
     646:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     648:	80 31       	cpi	r24, 0x10	; 16
     64a:	91 05       	cpc	r25, r1
     64c:	31 f7       	brne	.-52     	; 0x61a <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	08 95       	ret

0000065a <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	c4 56       	subi	r28, 0x64	; 100
     692:	d1 09       	sbc	r29, r1
     694:	de bf       	out	0x3e, r29	; 62
     696:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     698:	80 91 ff 00 	lds	r24, 0x00FF
     69c:	90 91 00 01 	lds	r25, 0x0100
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	90 93 00 01 	sts	0x0100, r25
     6a6:	80 93 ff 00 	sts	0x00FF, r24
	if (t > F_CPU / 256 / 1024) {
     6aa:	ce 97       	sbiw	r24, 0x3e	; 62
     6ac:	08 f4       	brcc	.+2      	; 0x6b0 <__vector_9+0x56>
     6ae:	6e c0       	rjmp	.+220    	; 0x78c <__vector_9+0x132>
		t = 0;
     6b0:	10 92 00 01 	sts	0x0100, r1
     6b4:	10 92 ff 00 	sts	0x00FF, r1
		seconds++;
     6b8:	80 91 fd 00 	lds	r24, 0x00FD
     6bc:	90 91 fe 00 	lds	r25, 0x00FE
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 fe 00 	sts	0x00FE, r25
     6c6:	80 93 fd 00 	sts	0x00FD, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6ca:	80 91 60 00 	lds	r24, 0x0060
     6ce:	90 91 61 00 	lds	r25, 0x0061
     6d2:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     6d6:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     6d8:	80 91 60 00 	lds	r24, 0x0060
     6dc:	90 91 61 00 	lds	r25, 0x0061
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6e6:	21 2f       	mov	r18, r17
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	32 2f       	mov	r19, r18
     6ec:	22 27       	eor	r18, r18

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     6ee:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     6f0:	2f 3f       	cpi	r18, 0xFF	; 255
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	38 07       	cpc	r19, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <__vector_9+0xa0>
     6f8:	49 c0       	rjmp	.+146    	; 0x78c <__vector_9+0x132>
			if (seconds >= time) {
     6fa:	80 91 fd 00 	lds	r24, 0x00FD
     6fe:	90 91 fe 00 	lds	r25, 0x00FE
     702:	82 17       	cp	r24, r18
     704:	93 07       	cpc	r25, r19
     706:	08 f4       	brcc	.+2      	; 0x70a <__vector_9+0xb0>
     708:	41 c0       	rjmp	.+130    	; 0x78c <__vector_9+0x132>
				p -= 2;
     70a:	80 91 60 00 	lds	r24, 0x0060
     70e:	90 91 61 00 	lds	r25, 0x0061
     712:	02 97       	sbiw	r24, 0x02	; 2
     714:	90 93 61 00 	sts	0x0061, r25
     718:	80 93 60 00 	sts	0x0060, r24
     71c:	8e 01       	movw	r16, r28
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	78 01       	movw	r14, r16
     724:	68 01       	movw	r12, r16
     726:	ce 18       	sub	r12, r14
     728:	df 08       	sbc	r13, r15
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     72a:	80 91 60 00 	lds	r24, 0x0060
     72e:	90 91 61 00 	lds	r25, 0x0061
     732:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     736:	f8 01       	movw	r30, r16
     738:	81 93       	st	Z+, r24
     73a:	8f 01       	movw	r16, r30
     73c:	20 91 60 00 	lds	r18, 0x0060
     740:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     744:	8a 30       	cpi	r24, 0x0A	; 10
     746:	c9 f4       	brne	.+50     	; 0x77a <__vector_9+0x120>
					    cmd[i + 1] = 0;
     748:	fe 01       	movw	r30, r28
     74a:	ec 0d       	add	r30, r12
     74c:	fd 1d       	adc	r31, r13
     74e:	12 82       	std	Z+2, r1	; 0x02
						p--;
     750:	21 50       	subi	r18, 0x01	; 1
     752:	31 09       	sbc	r19, r1
     754:	30 93 61 00 	sts	0x0061, r19
     758:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				print("Auto running command:");
     75c:	88 ed       	ldi	r24, 0xD8	; 216
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
				print(cmd);
     764:	c7 01       	movw	r24, r14
     766:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
				runCmd(cmd);
     76a:	c7 01       	movw	r24, r14
     76c:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
				seconds = 0;
     770:	10 92 fe 00 	sts	0x00FE, r1
     774:	10 92 fd 00 	sts	0x00FD, r1
     778:	09 c0       	rjmp	.+18     	; 0x78c <__vector_9+0x132>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     77a:	83 31       	cpi	r24, 0x13	; 19
     77c:	29 f3       	breq	.-54     	; 0x748 <__vector_9+0xee>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	31 09       	sbc	r19, r1
     782:	30 93 61 00 	sts	0x0061, r19
     786:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     78a:	cc cf       	rjmp	.-104    	; 0x724 <__vector_9+0xca>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     78c:	cc 59       	subi	r28, 0x9C	; 156
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	0f 90       	pop	r0
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	0f 90       	pop	r0
     7c8:	1f 90       	pop	r1
     7ca:	18 95       	reti

000007cc <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     7f6:	80 91 fb 00 	lds	r24, 0x00FB
     7fa:	90 91 fc 00 	lds	r25, 0x00FC
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	90 93 fc 00 	sts	0x00FC, r25
     804:	80 93 fb 00 	sts	0x00FB, r24
	if (t > F_CPU / 256 / 1024) {
     808:	ce 97       	sbiw	r24, 0x3e	; 62
     80a:	08 f4       	brcc	.+2      	; 0x80e <__vector_4+0x42>
     80c:	61 c0       	rjmp	.+194    	; 0x8d0 <__vector_4+0x104>
		t = 0;
     80e:	10 92 fc 00 	sts	0x00FC, r1
     812:	10 92 fb 00 	sts	0x00FB, r1
		sec++;
     816:	80 91 fa 00 	lds	r24, 0x00FA
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 93 fa 00 	sts	0x00FA, r24
		if (sec >= 60) {
     820:	8c 33       	cpi	r24, 0x3C	; 60
     822:	08 f4       	brcc	.+2      	; 0x826 <__vector_4+0x5a>
     824:	55 c0       	rjmp	.+170    	; 0x8d0 <__vector_4+0x104>
			sec = 0;
     826:	10 92 fa 00 	sts	0x00FA, r1
     82a:	e9 ea       	ldi	r30, 0xA9	; 169
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	c7 e8       	ldi	r28, 0x87	; 135
     830:	d1 e0       	ldi	r29, 0x01	; 1
     832:	a7 e6       	ldi	r26, 0x67	; 103
     834:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     83e:	40 81       	ld	r20, Z
     840:	51 81       	ldd	r21, Z+1	; 0x01
     842:	41 15       	cp	r20, r1
     844:	51 05       	cpc	r21, r1
     846:	29 f0       	breq	.+10     	; 0x852 <__vector_4+0x86>
					m[i]--;
     848:	41 50       	subi	r20, 0x01	; 1
     84a:	51 09       	sbc	r21, r1
     84c:	51 83       	std	Z+1, r21	; 0x01
     84e:	40 83       	st	Z, r20
     850:	37 c0       	rjmp	.+110    	; 0x8c0 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     852:	88 30       	cpi	r24, 0x08	; 8
     854:	91 05       	cpc	r25, r1
     856:	50 f4       	brcc	.+20     	; 0x86c <__vector_4+0xa0>
						PORTA ^= 1 << i;
     858:	6b b3       	in	r22, 0x1b	; 27
     85a:	a9 01       	movw	r20, r18
     85c:	08 2e       	mov	r0, r24
     85e:	01 c0       	rjmp	.+2      	; 0x862 <__vector_4+0x96>
     860:	44 0f       	add	r20, r20
     862:	0a 94       	dec	r0
     864:	ea f7       	brpl	.-6      	; 0x860 <__vector_4+0x94>
     866:	64 27       	eor	r22, r20
     868:	6b bb       	out	0x1b, r22	; 27
     86a:	0c c0       	rjmp	.+24     	; 0x884 <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     86c:	65 b3       	in	r22, 0x15	; 21
     86e:	ac 01       	movw	r20, r24
     870:	48 50       	subi	r20, 0x08	; 8
     872:	51 09       	sbc	r21, r1
     874:	89 01       	movw	r16, r18
     876:	02 c0       	rjmp	.+4      	; 0x87c <__vector_4+0xb0>
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	4a 95       	dec	r20
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__vector_4+0xac>
     880:	60 27       	eor	r22, r16
     882:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     884:	60 91 a7 01 	lds	r22, 0x01A7
     888:	70 91 a8 01 	lds	r23, 0x01A8
     88c:	a9 01       	movw	r20, r18
     88e:	08 2e       	mov	r0, r24
     890:	02 c0       	rjmp	.+4      	; 0x896 <__vector_4+0xca>
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <__vector_4+0xc6>
     89a:	8a 01       	movw	r16, r20
     89c:	06 23       	and	r16, r22
     89e:	17 23       	and	r17, r23
     8a0:	01 2b       	or	r16, r17
     8a2:	19 f0       	breq	.+6      	; 0x8aa <__vector_4+0xde>
						m[i] = dutyL[i];
     8a4:	08 81       	ld	r16, Y
     8a6:	19 81       	ldd	r17, Y+1	; 0x01
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     8aa:	0d 91       	ld	r16, X+
     8ac:	1c 91       	ld	r17, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	11 83       	std	Z+1, r17	; 0x01
     8b2:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     8b4:	46 27       	eor	r20, r22
     8b6:	57 27       	eor	r21, r23
     8b8:	50 93 a8 01 	sts	0x01A8, r21
     8bc:	40 93 a7 01 	sts	0x01A7, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	32 96       	adiw	r30, 0x02	; 2
     8c4:	22 96       	adiw	r28, 0x02	; 2
     8c6:	12 96       	adiw	r26, 0x02	; 2
     8c8:	80 31       	cpi	r24, 0x10	; 16
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_4+0x104>
     8ce:	b7 cf       	rjmp	.-146    	; 0x83e <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_11>:

ISR(USART_RXC_vect)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	c4 56       	subi	r28, 0x64	; 100
     932:	d1 09       	sbc	r29, r1
     934:	de bf       	out	0x3e, r29	; 62
     936:	cd bf       	out	0x3d, r28	; 61
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	7c 01       	movw	r14, r24
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     942:	0e 94 65 05 	call	0xaca	; 0xaca <receiveUSART>
     946:	f7 01       	movw	r30, r14
     948:	81 93       	st	Z+, r24
     94a:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     94c:	83 31       	cpi	r24, 0x13	; 19
     94e:	41 f4       	brne	.+16     	; 0x960 <__vector_11+0x66>
			codeUSART[i] = '\0';
     950:	e1 e0       	ldi	r30, 0x01	; 1
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	e0 0f       	add	r30, r16
     95a:	f1 1f       	adc	r31, r17
     95c:	10 82       	st	Z, r1
			break;
     95e:	07 c0       	rjmp	.+14     	; 0x96e <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	b1 f3       	breq	.-20     	; 0x950 <__vector_11+0x56>
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     968:	04 36       	cpi	r16, 0x64	; 100
     96a:	11 05       	cpc	r17, r1
     96c:	51 f7       	brne	.-44     	; 0x942 <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	88 23       	and	r24, r24
     972:	e1 f0       	breq	.+56     	; 0x9ac <__vector_11+0xb2>
		print("\nReceived:\n");
     974:	8e ee       	ldi	r24, 0xEE	; 238
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
     97c:	6e 01       	movw	r12, r28
     97e:	f5 e6       	ldi	r31, 0x65	; 101
     980:	cf 0e       	add	r12, r31
     982:	d1 1c       	adc	r13, r1
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     98c:	f8 01       	movw	r30, r16
     98e:	81 91       	ld	r24, Z+
     990:	8f 01       	movw	r16, r30
     992:	0e 94 61 05 	call	0xac2	; 0xac2 <sendUSART>
			if (codeUSART[i] == '\0')
     996:	f7 01       	movw	r30, r14
     998:	80 81       	ld	r24, Z
     99a:	88 23       	and	r24, r24
     99c:	19 f0       	breq	.+6      	; 0x9a4 <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     99e:	0c 15       	cp	r16, r12
     9a0:	1d 05       	cpc	r17, r13
     9a2:	99 f7       	brne	.-26     	; 0x98a <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     9a4:	8a ea       	ldi	r24, 0xAA	; 170
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 69 05 	call	0xad2	; 0xad2 <print>
	}

	runCmd(codeUSART);
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
}
     9b4:	cc 59       	subi	r28, 0x9C	; 156
     9b6:	df 4f       	sbci	r29, 0xFF	; 255
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <initUSART>:

void initUSART()
{
	UBRRH = 0;
     9f4:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;		// 9600Hz on 16MHz F_CPU
     9f6:	87 e6       	ldi	r24, 0x67	; 103
     9f8:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     9fa:	88 e9       	ldi	r24, 0x98	; 152
     9fc:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     9fe:	86 e8       	ldi	r24, 0x86	; 134
     a00:	80 bd       	out	0x20, r24	; 32
     a02:	08 95       	ret

00000a04 <initTimer0>:
}

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     a08:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     a0a:	89 b7       	in	r24, 0x39	; 57
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	89 bf       	out	0x39, r24	; 57
     a10:	08 95       	ret

00000a12 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     a12:	87 e0       	ldi	r24, 0x07	; 7
     a14:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     a16:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     a18:	89 b7       	in	r24, 0x39	; 57
     a1a:	80 64       	ori	r24, 0x40	; 64
     a1c:	89 bf       	out	0x39, r24	; 57
     a1e:	08 95       	ret

00000a20 <main>:

int main()
{
	uint8_t i;

	DDRA = 0xff;
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     a24:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
     a26:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
     a28:	15 ba       	out	0x15, r1	; 21
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     a2e:	8b b3       	in	r24, 0x1b	; 27
     a30:	86 95       	lsr	r24
     a32:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a34:	1b b3       	in	r17, 0x1b	; 27
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a3c:	20 e8       	ldi	r18, 0x80	; 128
     a3e:	82 9f       	mul	r24, r18
     a40:	c0 01       	movw	r24, r0
     a42:	11 24       	eor	r1, r1
     a44:	81 2b       	or	r24, r17
     a46:	8b bb       	out	0x1b, r24	; 27
     a48:	21 96       	adiw	r28, 0x01	; 1
	DDRA = 0xff;
	DDRC = 0xff;
	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
     a4a:	c8 30       	cpi	r28, 0x08	; 8
     a4c:	d1 05       	cpc	r29, r1
     a4e:	79 f7       	brne	.-34     	; 0xa2e <main+0xe>
     a50:	c8 e0       	ldi	r28, 0x08	; 8
     a52:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     a54:	85 b3       	in	r24, 0x15	; 21
     a56:	86 95       	lsr	r24
     a58:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a5a:	15 b3       	in	r17, 0x15	; 21
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a62:	20 e8       	ldi	r18, 0x80	; 128
     a64:	82 9f       	mul	r24, r18
     a66:	c0 01       	movw	r24, r0
     a68:	11 24       	eor	r1, r1
     a6a:	81 2b       	or	r24, r17
     a6c:	85 bb       	out	0x15, r24	; 21
     a6e:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     a70:	c0 31       	cpi	r28, 0x10	; 16
     a72:	d1 05       	cpc	r29, r1
     a74:	79 f7       	brne	.-34     	; 0xa54 <main+0x34>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	90 93 66 01 	sts	0x0166, r25
     a7e:	80 93 65 01 	sts	0x0165, r24
     a82:	80 91 65 01 	lds	r24, 0x0165
     a86:	90 91 66 01 	lds	r25, 0x0166
     a8a:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a8e:	8f 3f       	cpi	r24, 0xFF	; 255
     a90:	31 f0       	breq	.+12     	; 0xa9e <main+0x7e>
     a92:	80 91 65 01 	lds	r24, 0x0165
     a96:	90 91 66 01 	lds	r25, 0x0166
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	ee cf       	rjmp	.-36     	; 0xa7a <main+0x5a>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     a9e:	25 b3       	in	r18, 0x15	; 21
     aa0:	8b b3       	in	r24, 0x1b	; 27
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	92 2b       	or	r25, r18
     aa6:	90 93 a8 01 	sts	0x01A8, r25
     aaa:	80 93 a7 01 	sts	0x01A7, r24

	initUSART();
     aae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <initUSART>

	setDuty();
     ab2:	0e 94 c7 02 	call	0x58e	; 0x58e <setDuty>

	initTimer0();
     ab6:	0e 94 02 05 	call	0xa04	; 0xa04 <initTimer0>

	initTimer2();
     aba:	0e 94 09 05 	call	0xa12	; 0xa12 <initTimer2>

	sei();
     abe:	78 94       	sei
     ac0:	ff cf       	rjmp	.-2      	; 0xac0 <main+0xa0>

00000ac2 <sendUSART>:

#include "usart.h"

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE))) ;
     ac2:	5d 9b       	sbis	0x0b, 5	; 11
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <sendUSART>
	UDR = data;
     ac6:	8c b9       	out	0x0c, r24	; 12
     ac8:	08 95       	ret

00000aca <receiveUSART>:
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC))) ;
     aca:	5f 9b       	sbis	0x0b, 7	; 11
     acc:	fe cf       	rjmp	.-4      	; 0xaca <receiveUSART>
	return UDR;
     ace:	8c b1       	in	r24, 0x0c	; 12
}
     ad0:	08 95       	ret

00000ad2 <print>:

void print(char *s)
{
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
	while (*s) {
     ad8:	89 91       	ld	r24, Y+
     ada:	88 23       	and	r24, r24
     adc:	19 f0       	breq	.+6      	; 0xae4 <print+0x12>
		sendUSART(*s);
     ade:	0e 94 61 05 	call	0xac2	; 0xac2 <sendUSART>
     ae2:	fa cf       	rjmp	.-12     	; 0xad8 <print+0x6>
		s++;
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <puts>:
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	e0 91 2f 02 	lds	r30, 0x022F
     af6:	f0 91 30 02 	lds	r31, 0x0230
     afa:	23 81       	ldd	r18, Z+3	; 0x03
     afc:	21 ff       	sbrs	r18, 1
     afe:	1b c0       	rjmp	.+54     	; 0xb36 <puts+0x4c>
     b00:	ec 01       	movw	r28, r24
     b02:	00 e0       	ldi	r16, 0x00	; 0
     b04:	10 e0       	ldi	r17, 0x00	; 0
     b06:	89 91       	ld	r24, Y+
     b08:	60 91 2f 02 	lds	r22, 0x022F
     b0c:	70 91 30 02 	lds	r23, 0x0230
     b10:	db 01       	movw	r26, r22
     b12:	18 96       	adiw	r26, 0x08	; 8
     b14:	ed 91       	ld	r30, X+
     b16:	fc 91       	ld	r31, X
     b18:	19 97       	sbiw	r26, 0x09	; 9
     b1a:	88 23       	and	r24, r24
     b1c:	31 f0       	breq	.+12     	; 0xb2a <puts+0x40>
     b1e:	09 95       	icall
     b20:	89 2b       	or	r24, r25
     b22:	89 f3       	breq	.-30     	; 0xb06 <puts+0x1c>
     b24:	0f ef       	ldi	r16, 0xFF	; 255
     b26:	1f ef       	ldi	r17, 0xFF	; 255
     b28:	ee cf       	rjmp	.-36     	; 0xb06 <puts+0x1c>
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	09 95       	icall
     b2e:	89 2b       	or	r24, r25
     b30:	11 f4       	brne	.+4      	; 0xb36 <puts+0x4c>
     b32:	c8 01       	movw	r24, r16
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <puts+0x50>
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	9f ef       	ldi	r25, 0xFF	; 255
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <sprintf>:
     b44:	ae e0       	ldi	r26, 0x0E	; 14
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	e8 ea       	ldi	r30, 0xA8	; 168
     b4a:	f5 e0       	ldi	r31, 0x05	; 5
     b4c:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__prologue_saves__+0x1c>
     b50:	0d 89       	ldd	r16, Y+21	; 0x15
     b52:	1e 89       	ldd	r17, Y+22	; 0x16
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	8c 83       	std	Y+4, r24	; 0x04
     b58:	1a 83       	std	Y+2, r17	; 0x02
     b5a:	09 83       	std	Y+1, r16	; 0x01
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	9f e7       	ldi	r25, 0x7F	; 127
     b60:	9e 83       	std	Y+6, r25	; 0x06
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	ae 01       	movw	r20, r28
     b66:	47 5e       	subi	r20, 0xE7	; 231
     b68:	5f 4f       	sbci	r21, 0xFF	; 255
     b6a:	6f 89       	ldd	r22, Y+23	; 0x17
     b6c:	78 8d       	ldd	r23, Y+24	; 0x18
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 dd 05 	call	0xbba	; 0xbba <vfprintf>
     b76:	ef 81       	ldd	r30, Y+7	; 0x07
     b78:	f8 85       	ldd	r31, Y+8	; 0x08
     b7a:	e0 0f       	add	r30, r16
     b7c:	f1 1f       	adc	r31, r17
     b7e:	10 82       	st	Z, r1
     b80:	2e 96       	adiw	r28, 0x0e	; 14
     b82:	e4 e0       	ldi	r30, 0x04	; 4
     b84:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__epilogue_restores__+0x1c>

00000b88 <sscanf>:
     b88:	ae e0       	ldi	r26, 0x0E	; 14
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea ec       	ldi	r30, 0xCA	; 202
     b8e:	f5 e0       	ldi	r31, 0x05	; 5
     b90:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__prologue_saves__+0x20>
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	8c 83       	std	Y+4, r24	; 0x04
     b98:	8b 89       	ldd	r24, Y+19	; 0x13
     b9a:	9c 89       	ldd	r25, Y+20	; 0x14
     b9c:	9a 83       	std	Y+2, r25	; 0x02
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	ae 01       	movw	r20, r28
     ba2:	49 5e       	subi	r20, 0xE9	; 233
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	6d 89       	ldd	r22, Y+21	; 0x15
     ba8:	7e 89       	ldd	r23, Y+22	; 0x16
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 2d 09 	call	0x125a	; 0x125a <vfscanf>
     bb2:	2e 96       	adiw	r28, 0x0e	; 14
     bb4:	e2 e0       	ldi	r30, 0x02	; 2
     bb6:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__epilogue_restores__+0x20>

00000bba <vfprintf>:
     bba:	ac e0       	ldi	r26, 0x0C	; 12
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 ee       	ldi	r30, 0xE3	; 227
     bc0:	f5 e0       	ldi	r31, 0x05	; 5
     bc2:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__prologue_saves__>
     bc6:	7c 01       	movw	r14, r24
     bc8:	6b 01       	movw	r12, r22
     bca:	8a 01       	movw	r16, r20
     bcc:	fc 01       	movw	r30, r24
     bce:	17 82       	std	Z+7, r1	; 0x07
     bd0:	16 82       	std	Z+6, r1	; 0x06
     bd2:	83 81       	ldd	r24, Z+3	; 0x03
     bd4:	81 ff       	sbrs	r24, 1
     bd6:	bd c1       	rjmp	.+890    	; 0xf52 <vfprintf+0x398>
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	4c 01       	movw	r8, r24
     bde:	f7 01       	movw	r30, r14
     be0:	93 81       	ldd	r25, Z+3	; 0x03
     be2:	f6 01       	movw	r30, r12
     be4:	93 fd       	sbrc	r25, 3
     be6:	85 91       	lpm	r24, Z+
     be8:	93 ff       	sbrs	r25, 3
     bea:	81 91       	ld	r24, Z+
     bec:	6f 01       	movw	r12, r30
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <vfprintf+0x3a>
     bf2:	ab c1       	rjmp	.+854    	; 0xf4a <vfprintf+0x390>
     bf4:	85 32       	cpi	r24, 0x25	; 37
     bf6:	39 f4       	brne	.+14     	; 0xc06 <vfprintf+0x4c>
     bf8:	93 fd       	sbrc	r25, 3
     bfa:	85 91       	lpm	r24, Z+
     bfc:	93 ff       	sbrs	r25, 3
     bfe:	81 91       	ld	r24, Z+
     c00:	6f 01       	movw	r12, r30
     c02:	85 32       	cpi	r24, 0x25	; 37
     c04:	29 f4       	brne	.+10     	; 0xc10 <vfprintf+0x56>
     c06:	b7 01       	movw	r22, r14
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     c0e:	e7 cf       	rjmp	.-50     	; 0xbde <vfprintf+0x24>
     c10:	51 2c       	mov	r5, r1
     c12:	31 2c       	mov	r3, r1
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	20 32       	cpi	r18, 0x20	; 32
     c18:	a0 f4       	brcc	.+40     	; 0xc42 <vfprintf+0x88>
     c1a:	8b 32       	cpi	r24, 0x2B	; 43
     c1c:	69 f0       	breq	.+26     	; 0xc38 <vfprintf+0x7e>
     c1e:	30 f4       	brcc	.+12     	; 0xc2c <vfprintf+0x72>
     c20:	80 32       	cpi	r24, 0x20	; 32
     c22:	59 f0       	breq	.+22     	; 0xc3a <vfprintf+0x80>
     c24:	83 32       	cpi	r24, 0x23	; 35
     c26:	69 f4       	brne	.+26     	; 0xc42 <vfprintf+0x88>
     c28:	20 61       	ori	r18, 0x10	; 16
     c2a:	2c c0       	rjmp	.+88     	; 0xc84 <vfprintf+0xca>
     c2c:	8d 32       	cpi	r24, 0x2D	; 45
     c2e:	39 f0       	breq	.+14     	; 0xc3e <vfprintf+0x84>
     c30:	80 33       	cpi	r24, 0x30	; 48
     c32:	39 f4       	brne	.+14     	; 0xc42 <vfprintf+0x88>
     c34:	21 60       	ori	r18, 0x01	; 1
     c36:	26 c0       	rjmp	.+76     	; 0xc84 <vfprintf+0xca>
     c38:	22 60       	ori	r18, 0x02	; 2
     c3a:	24 60       	ori	r18, 0x04	; 4
     c3c:	23 c0       	rjmp	.+70     	; 0xc84 <vfprintf+0xca>
     c3e:	28 60       	ori	r18, 0x08	; 8
     c40:	21 c0       	rjmp	.+66     	; 0xc84 <vfprintf+0xca>
     c42:	27 fd       	sbrc	r18, 7
     c44:	27 c0       	rjmp	.+78     	; 0xc94 <vfprintf+0xda>
     c46:	30 ed       	ldi	r19, 0xD0	; 208
     c48:	38 0f       	add	r19, r24
     c4a:	3a 30       	cpi	r19, 0x0A	; 10
     c4c:	78 f4       	brcc	.+30     	; 0xc6c <vfprintf+0xb2>
     c4e:	26 ff       	sbrs	r18, 6
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <vfprintf+0xa4>
     c52:	fa e0       	ldi	r31, 0x0A	; 10
     c54:	5f 9e       	mul	r5, r31
     c56:	30 0d       	add	r19, r0
     c58:	11 24       	eor	r1, r1
     c5a:	53 2e       	mov	r5, r19
     c5c:	13 c0       	rjmp	.+38     	; 0xc84 <vfprintf+0xca>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	38 9e       	mul	r3, r24
     c62:	30 0d       	add	r19, r0
     c64:	11 24       	eor	r1, r1
     c66:	33 2e       	mov	r3, r19
     c68:	20 62       	ori	r18, 0x20	; 32
     c6a:	0c c0       	rjmp	.+24     	; 0xc84 <vfprintf+0xca>
     c6c:	8e 32       	cpi	r24, 0x2E	; 46
     c6e:	21 f4       	brne	.+8      	; 0xc78 <vfprintf+0xbe>
     c70:	26 fd       	sbrc	r18, 6
     c72:	6b c1       	rjmp	.+726    	; 0xf4a <vfprintf+0x390>
     c74:	20 64       	ori	r18, 0x40	; 64
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <vfprintf+0xca>
     c78:	8c 36       	cpi	r24, 0x6C	; 108
     c7a:	11 f4       	brne	.+4      	; 0xc80 <vfprintf+0xc6>
     c7c:	20 68       	ori	r18, 0x80	; 128
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0xca>
     c80:	88 36       	cpi	r24, 0x68	; 104
     c82:	41 f4       	brne	.+16     	; 0xc94 <vfprintf+0xda>
     c84:	f6 01       	movw	r30, r12
     c86:	93 fd       	sbrc	r25, 3
     c88:	85 91       	lpm	r24, Z+
     c8a:	93 ff       	sbrs	r25, 3
     c8c:	81 91       	ld	r24, Z+
     c8e:	6f 01       	movw	r12, r30
     c90:	81 11       	cpse	r24, r1
     c92:	c1 cf       	rjmp	.-126    	; 0xc16 <vfprintf+0x5c>
     c94:	98 2f       	mov	r25, r24
     c96:	9f 7d       	andi	r25, 0xDF	; 223
     c98:	95 54       	subi	r25, 0x45	; 69
     c9a:	93 30       	cpi	r25, 0x03	; 3
     c9c:	28 f4       	brcc	.+10     	; 0xca8 <vfprintf+0xee>
     c9e:	0c 5f       	subi	r16, 0xFC	; 252
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	ff e3       	ldi	r31, 0x3F	; 63
     ca4:	f9 83       	std	Y+1, r31	; 0x01
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <vfprintf+0x108>
     ca8:	83 36       	cpi	r24, 0x63	; 99
     caa:	31 f0       	breq	.+12     	; 0xcb8 <vfprintf+0xfe>
     cac:	83 37       	cpi	r24, 0x73	; 115
     cae:	71 f0       	breq	.+28     	; 0xccc <vfprintf+0x112>
     cb0:	83 35       	cpi	r24, 0x53	; 83
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <vfprintf+0xfc>
     cb4:	5b c0       	rjmp	.+182    	; 0xd6c <vfprintf+0x1b2>
     cb6:	22 c0       	rjmp	.+68     	; 0xcfc <vfprintf+0x142>
     cb8:	f8 01       	movw	r30, r16
     cba:	80 81       	ld	r24, Z
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	0e 5f       	subi	r16, 0xFE	; 254
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	44 24       	eor	r4, r4
     cc4:	43 94       	inc	r4
     cc6:	51 2c       	mov	r5, r1
     cc8:	54 01       	movw	r10, r8
     cca:	15 c0       	rjmp	.+42     	; 0xcf6 <vfprintf+0x13c>
     ccc:	38 01       	movw	r6, r16
     cce:	f2 e0       	ldi	r31, 0x02	; 2
     cd0:	6f 0e       	add	r6, r31
     cd2:	71 1c       	adc	r7, r1
     cd4:	f8 01       	movw	r30, r16
     cd6:	a0 80       	ld	r10, Z
     cd8:	b1 80       	ldd	r11, Z+1	; 0x01
     cda:	26 ff       	sbrs	r18, 6
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x12a>
     cde:	65 2d       	mov	r22, r5
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x12e>
     ce4:	6f ef       	ldi	r22, 0xFF	; 255
     ce6:	7f ef       	ldi	r23, 0xFF	; 255
     ce8:	c5 01       	movw	r24, r10
     cea:	2c 87       	std	Y+12, r18	; 0x0c
     cec:	0e 94 82 0a 	call	0x1504	; 0x1504 <strnlen>
     cf0:	2c 01       	movw	r4, r24
     cf2:	83 01       	movw	r16, r6
     cf4:	2c 85       	ldd	r18, Y+12	; 0x0c
     cf6:	2f 77       	andi	r18, 0x7F	; 127
     cf8:	22 2e       	mov	r2, r18
     cfa:	17 c0       	rjmp	.+46     	; 0xd2a <vfprintf+0x170>
     cfc:	38 01       	movw	r6, r16
     cfe:	f2 e0       	ldi	r31, 0x02	; 2
     d00:	6f 0e       	add	r6, r31
     d02:	71 1c       	adc	r7, r1
     d04:	f8 01       	movw	r30, r16
     d06:	a0 80       	ld	r10, Z
     d08:	b1 80       	ldd	r11, Z+1	; 0x01
     d0a:	26 ff       	sbrs	r18, 6
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x15a>
     d0e:	65 2d       	mov	r22, r5
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x15e>
     d14:	6f ef       	ldi	r22, 0xFF	; 255
     d16:	7f ef       	ldi	r23, 0xFF	; 255
     d18:	c5 01       	movw	r24, r10
     d1a:	2c 87       	std	Y+12, r18	; 0x0c
     d1c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <strnlen_P>
     d20:	2c 01       	movw	r4, r24
     d22:	2c 85       	ldd	r18, Y+12	; 0x0c
     d24:	20 68       	ori	r18, 0x80	; 128
     d26:	22 2e       	mov	r2, r18
     d28:	83 01       	movw	r16, r6
     d2a:	23 fc       	sbrc	r2, 3
     d2c:	1b c0       	rjmp	.+54     	; 0xd64 <vfprintf+0x1aa>
     d2e:	83 2d       	mov	r24, r3
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	48 16       	cp	r4, r24
     d34:	59 06       	cpc	r5, r25
     d36:	b0 f4       	brcc	.+44     	; 0xd64 <vfprintf+0x1aa>
     d38:	b7 01       	movw	r22, r14
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     d42:	3a 94       	dec	r3
     d44:	f4 cf       	rjmp	.-24     	; 0xd2e <vfprintf+0x174>
     d46:	f5 01       	movw	r30, r10
     d48:	27 fc       	sbrc	r2, 7
     d4a:	85 91       	lpm	r24, Z+
     d4c:	27 fe       	sbrs	r2, 7
     d4e:	81 91       	ld	r24, Z+
     d50:	5f 01       	movw	r10, r30
     d52:	b7 01       	movw	r22, r14
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     d5a:	31 10       	cpse	r3, r1
     d5c:	3a 94       	dec	r3
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	4f 1a       	sub	r4, r31
     d62:	51 08       	sbc	r5, r1
     d64:	41 14       	cp	r4, r1
     d66:	51 04       	cpc	r5, r1
     d68:	71 f7       	brne	.-36     	; 0xd46 <vfprintf+0x18c>
     d6a:	e5 c0       	rjmp	.+458    	; 0xf36 <vfprintf+0x37c>
     d6c:	84 36       	cpi	r24, 0x64	; 100
     d6e:	11 f0       	breq	.+4      	; 0xd74 <vfprintf+0x1ba>
     d70:	89 36       	cpi	r24, 0x69	; 105
     d72:	39 f5       	brne	.+78     	; 0xdc2 <vfprintf+0x208>
     d74:	f8 01       	movw	r30, r16
     d76:	27 ff       	sbrs	r18, 7
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <vfprintf+0x1ce>
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	0c 5f       	subi	r16, 0xFC	; 252
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <vfprintf+0x1de>
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	88 27       	eor	r24, r24
     d8e:	77 fd       	sbrc	r23, 7
     d90:	80 95       	com	r24
     d92:	98 2f       	mov	r25, r24
     d94:	0e 5f       	subi	r16, 0xFE	; 254
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	2f 76       	andi	r18, 0x6F	; 111
     d9a:	b2 2e       	mov	r11, r18
     d9c:	97 ff       	sbrs	r25, 7
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <vfprintf+0x1f8>
     da0:	90 95       	com	r25
     da2:	80 95       	com	r24
     da4:	70 95       	com	r23
     da6:	61 95       	neg	r22
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	20 68       	ori	r18, 0x80	; 128
     db0:	b2 2e       	mov	r11, r18
     db2:	2a e0       	ldi	r18, 0x0A	; 10
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	a4 01       	movw	r20, r8
     db8:	0e 94 16 0b 	call	0x162c	; 0x162c <__ultoa_invert>
     dbc:	a8 2e       	mov	r10, r24
     dbe:	a8 18       	sub	r10, r8
     dc0:	44 c0       	rjmp	.+136    	; 0xe4a <vfprintf+0x290>
     dc2:	85 37       	cpi	r24, 0x75	; 117
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <vfprintf+0x216>
     dc6:	2f 7e       	andi	r18, 0xEF	; 239
     dc8:	b2 2e       	mov	r11, r18
     dca:	2a e0       	ldi	r18, 0x0A	; 10
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	25 c0       	rjmp	.+74     	; 0xe1a <vfprintf+0x260>
     dd0:	f2 2f       	mov	r31, r18
     dd2:	f9 7f       	andi	r31, 0xF9	; 249
     dd4:	bf 2e       	mov	r11, r31
     dd6:	8f 36       	cpi	r24, 0x6F	; 111
     dd8:	c1 f0       	breq	.+48     	; 0xe0a <vfprintf+0x250>
     dda:	18 f4       	brcc	.+6      	; 0xde2 <vfprintf+0x228>
     ddc:	88 35       	cpi	r24, 0x58	; 88
     dde:	79 f0       	breq	.+30     	; 0xdfe <vfprintf+0x244>
     de0:	b4 c0       	rjmp	.+360    	; 0xf4a <vfprintf+0x390>
     de2:	80 37       	cpi	r24, 0x70	; 112
     de4:	19 f0       	breq	.+6      	; 0xdec <vfprintf+0x232>
     de6:	88 37       	cpi	r24, 0x78	; 120
     de8:	21 f0       	breq	.+8      	; 0xdf2 <vfprintf+0x238>
     dea:	af c0       	rjmp	.+350    	; 0xf4a <vfprintf+0x390>
     dec:	2f 2f       	mov	r18, r31
     dee:	20 61       	ori	r18, 0x10	; 16
     df0:	b2 2e       	mov	r11, r18
     df2:	b4 fe       	sbrs	r11, 4
     df4:	0d c0       	rjmp	.+26     	; 0xe10 <vfprintf+0x256>
     df6:	8b 2d       	mov	r24, r11
     df8:	84 60       	ori	r24, 0x04	; 4
     dfa:	b8 2e       	mov	r11, r24
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <vfprintf+0x256>
     dfe:	24 ff       	sbrs	r18, 4
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <vfprintf+0x25c>
     e02:	9f 2f       	mov	r25, r31
     e04:	96 60       	ori	r25, 0x06	; 6
     e06:	b9 2e       	mov	r11, r25
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0x25c>
     e0a:	28 e0       	ldi	r18, 0x08	; 8
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <vfprintf+0x260>
     e10:	20 e1       	ldi	r18, 0x10	; 16
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <vfprintf+0x260>
     e16:	20 e1       	ldi	r18, 0x10	; 16
     e18:	32 e0       	ldi	r19, 0x02	; 2
     e1a:	f8 01       	movw	r30, r16
     e1c:	b7 fe       	sbrs	r11, 7
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <vfprintf+0x274>
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	0c 5f       	subi	r16, 0xFC	; 252
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <vfprintf+0x280>
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 5f       	subi	r16, 0xFE	; 254
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	a4 01       	movw	r20, r8
     e3c:	0e 94 16 0b 	call	0x162c	; 0x162c <__ultoa_invert>
     e40:	a8 2e       	mov	r10, r24
     e42:	a8 18       	sub	r10, r8
     e44:	fb 2d       	mov	r31, r11
     e46:	ff 77       	andi	r31, 0x7F	; 127
     e48:	bf 2e       	mov	r11, r31
     e4a:	b6 fe       	sbrs	r11, 6
     e4c:	0b c0       	rjmp	.+22     	; 0xe64 <vfprintf+0x2aa>
     e4e:	2b 2d       	mov	r18, r11
     e50:	2e 7f       	andi	r18, 0xFE	; 254
     e52:	a5 14       	cp	r10, r5
     e54:	50 f4       	brcc	.+20     	; 0xe6a <vfprintf+0x2b0>
     e56:	b4 fe       	sbrs	r11, 4
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <vfprintf+0x2b4>
     e5a:	b2 fc       	sbrc	r11, 2
     e5c:	08 c0       	rjmp	.+16     	; 0xe6e <vfprintf+0x2b4>
     e5e:	2b 2d       	mov	r18, r11
     e60:	2e 7e       	andi	r18, 0xEE	; 238
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <vfprintf+0x2b4>
     e64:	7a 2c       	mov	r7, r10
     e66:	2b 2d       	mov	r18, r11
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x2b6>
     e6a:	7a 2c       	mov	r7, r10
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <vfprintf+0x2b6>
     e6e:	75 2c       	mov	r7, r5
     e70:	24 ff       	sbrs	r18, 4
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <vfprintf+0x2d4>
     e74:	fe 01       	movw	r30, r28
     e76:	ea 0d       	add	r30, r10
     e78:	f1 1d       	adc	r31, r1
     e7a:	80 81       	ld	r24, Z
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	11 f4       	brne	.+4      	; 0xe84 <vfprintf+0x2ca>
     e80:	29 7e       	andi	r18, 0xE9	; 233
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <vfprintf+0x2dc>
     e84:	22 ff       	sbrs	r18, 2
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x2da>
     e88:	73 94       	inc	r7
     e8a:	73 94       	inc	r7
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <vfprintf+0x2dc>
     e8e:	82 2f       	mov	r24, r18
     e90:	86 78       	andi	r24, 0x86	; 134
     e92:	09 f0       	breq	.+2      	; 0xe96 <vfprintf+0x2dc>
     e94:	73 94       	inc	r7
     e96:	23 fd       	sbrc	r18, 3
     e98:	13 c0       	rjmp	.+38     	; 0xec0 <vfprintf+0x306>
     e9a:	20 ff       	sbrs	r18, 0
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <vfprintf+0x2f0>
     e9e:	5a 2c       	mov	r5, r10
     ea0:	73 14       	cp	r7, r3
     ea2:	18 f4       	brcc	.+6      	; 0xeaa <vfprintf+0x2f0>
     ea4:	53 0c       	add	r5, r3
     ea6:	57 18       	sub	r5, r7
     ea8:	73 2c       	mov	r7, r3
     eaa:	73 14       	cp	r7, r3
     eac:	68 f4       	brcc	.+26     	; 0xec8 <vfprintf+0x30e>
     eae:	b7 01       	movw	r22, r14
     eb0:	80 e2       	ldi	r24, 0x20	; 32
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	2c 87       	std	Y+12, r18	; 0x0c
     eb6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     eba:	73 94       	inc	r7
     ebc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ebe:	f5 cf       	rjmp	.-22     	; 0xeaa <vfprintf+0x2f0>
     ec0:	73 14       	cp	r7, r3
     ec2:	10 f4       	brcc	.+4      	; 0xec8 <vfprintf+0x30e>
     ec4:	37 18       	sub	r3, r7
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <vfprintf+0x310>
     ec8:	31 2c       	mov	r3, r1
     eca:	24 ff       	sbrs	r18, 4
     ecc:	12 c0       	rjmp	.+36     	; 0xef2 <vfprintf+0x338>
     ece:	b7 01       	movw	r22, r14
     ed0:	80 e3       	ldi	r24, 0x30	; 48
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	2c 87       	std	Y+12, r18	; 0x0c
     ed6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     eda:	2c 85       	ldd	r18, Y+12	; 0x0c
     edc:	22 ff       	sbrs	r18, 2
     ede:	17 c0       	rjmp	.+46     	; 0xf0e <vfprintf+0x354>
     ee0:	21 ff       	sbrs	r18, 1
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <vfprintf+0x330>
     ee4:	88 e5       	ldi	r24, 0x58	; 88
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x334>
     eea:	88 e7       	ldi	r24, 0x78	; 120
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b7 01       	movw	r22, r14
     ef0:	0c c0       	rjmp	.+24     	; 0xf0a <vfprintf+0x350>
     ef2:	82 2f       	mov	r24, r18
     ef4:	86 78       	andi	r24, 0x86	; 134
     ef6:	59 f0       	breq	.+22     	; 0xf0e <vfprintf+0x354>
     ef8:	21 fd       	sbrc	r18, 1
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x346>
     efc:	80 e2       	ldi	r24, 0x20	; 32
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <vfprintf+0x348>
     f00:	8b e2       	ldi	r24, 0x2B	; 43
     f02:	27 fd       	sbrc	r18, 7
     f04:	8d e2       	ldi	r24, 0x2D	; 45
     f06:	b7 01       	movw	r22, r14
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     f0e:	a5 14       	cp	r10, r5
     f10:	38 f4       	brcc	.+14     	; 0xf20 <vfprintf+0x366>
     f12:	b7 01       	movw	r22, r14
     f14:	80 e3       	ldi	r24, 0x30	; 48
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     f1c:	5a 94       	dec	r5
     f1e:	f7 cf       	rjmp	.-18     	; 0xf0e <vfprintf+0x354>
     f20:	aa 94       	dec	r10
     f22:	f4 01       	movw	r30, r8
     f24:	ea 0d       	add	r30, r10
     f26:	f1 1d       	adc	r31, r1
     f28:	80 81       	ld	r24, Z
     f2a:	b7 01       	movw	r22, r14
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     f32:	a1 10       	cpse	r10, r1
     f34:	f5 cf       	rjmp	.-22     	; 0xf20 <vfprintf+0x366>
     f36:	33 20       	and	r3, r3
     f38:	09 f4       	brne	.+2      	; 0xf3c <vfprintf+0x382>
     f3a:	51 ce       	rjmp	.-862    	; 0xbde <vfprintf+0x24>
     f3c:	b7 01       	movw	r22, r14
     f3e:	80 e2       	ldi	r24, 0x20	; 32
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 cb 0a 	call	0x1596	; 0x1596 <fputc>
     f46:	3a 94       	dec	r3
     f48:	f6 cf       	rjmp	.-20     	; 0xf36 <vfprintf+0x37c>
     f4a:	f7 01       	movw	r30, r14
     f4c:	86 81       	ldd	r24, Z+6	; 0x06
     f4e:	97 81       	ldd	r25, Z+7	; 0x07
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x39c>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	2c 96       	adiw	r28, 0x0c	; 12
     f58:	e2 e1       	ldi	r30, 0x12	; 18
     f5a:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__epilogue_restores__>

00000f5e <putval>:
     f5e:	20 fd       	sbrc	r18, 0
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <putval+0x16>
     f62:	fc 01       	movw	r30, r24
     f64:	23 fd       	sbrc	r18, 3
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <putval+0x14>
     f68:	22 ff       	sbrs	r18, 2
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <putval+0x12>
     f6c:	73 83       	std	Z+3, r23	; 0x03
     f6e:	62 83       	std	Z+2, r22	; 0x02
     f70:	51 83       	std	Z+1, r21	; 0x01
     f72:	40 83       	st	Z, r20
     f74:	08 95       	ret

00000f76 <mulacc>:
     f76:	44 fd       	sbrc	r20, 4
     f78:	10 c0       	rjmp	.+32     	; 0xf9a <mulacc+0x24>
     f7a:	46 fd       	sbrc	r20, 6
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <mulacc+0x28>
     f7e:	db 01       	movw	r26, r22
     f80:	fc 01       	movw	r30, r24
     f82:	aa 0f       	add	r26, r26
     f84:	bb 1f       	adc	r27, r27
     f86:	ee 1f       	adc	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	10 94       	com	r1
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <mulacc+0xc>
     f8e:	6a 0f       	add	r22, r26
     f90:	7b 1f       	adc	r23, r27
     f92:	8e 1f       	adc	r24, r30
     f94:	9f 1f       	adc	r25, r31
     f96:	31 e0       	ldi	r19, 0x01	; 1
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <mulacc+0x2a>
     f9a:	33 e0       	ldi	r19, 0x03	; 3
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <mulacc+0x2a>
     f9e:	34 e0       	ldi	r19, 0x04	; 4
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	88 1f       	adc	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	31 50       	subi	r19, 0x01	; 1
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <mulacc+0x2a>
     fac:	62 0f       	add	r22, r18
     fae:	71 1d       	adc	r23, r1
     fb0:	81 1d       	adc	r24, r1
     fb2:	91 1d       	adc	r25, r1
     fb4:	08 95       	ret

00000fb6 <skip_spaces>:
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	8c 01       	movw	r16, r24
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
     fc6:	ec 01       	movw	r28, r24
     fc8:	97 fd       	sbrc	r25, 7
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <skip_spaces+0x26>
     fcc:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <isspace>
     fd0:	89 2b       	or	r24, r25
     fd2:	b1 f7       	brne	.-20     	; 0xfc0 <skip_spaces+0xa>
     fd4:	b8 01       	movw	r22, r16
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ungetc>
     fdc:	ce 01       	movw	r24, r28
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <conv_int>:
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	ec 01       	movw	r28, r24
    1000:	a6 2e       	mov	r10, r22
    1002:	4a 01       	movw	r8, r20
    1004:	02 2f       	mov	r16, r18
    1006:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    100a:	ac 01       	movw	r20, r24
    100c:	55 27       	eor	r21, r21
    100e:	4b 32       	cpi	r20, 0x2B	; 43
    1010:	51 05       	cpc	r21, r1
    1012:	21 f0       	breq	.+8      	; 0x101c <conv_int+0x34>
    1014:	4d 32       	cpi	r20, 0x2D	; 45
    1016:	51 05       	cpc	r21, r1
    1018:	51 f4       	brne	.+20     	; 0x102e <conv_int+0x46>
    101a:	00 68       	ori	r16, 0x80	; 128
    101c:	aa 94       	dec	r10
    101e:	11 f4       	brne	.+4      	; 0x1024 <conv_int+0x3c>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	67 c0       	rjmp	.+206    	; 0x10f2 <conv_int+0x10a>
    1024:	ce 01       	movw	r24, r28
    1026:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    102a:	97 fd       	sbrc	r25, 7
    102c:	f9 cf       	rjmp	.-14     	; 0x1020 <conv_int+0x38>
    102e:	10 2f       	mov	r17, r16
    1030:	1d 7f       	andi	r17, 0xFD	; 253
    1032:	30 2f       	mov	r19, r16
    1034:	30 73       	andi	r19, 0x30	; 48
    1036:	01 f5       	brne	.+64     	; 0x1078 <conv_int+0x90>
    1038:	80 33       	cpi	r24, 0x30	; 48
    103a:	f1 f4       	brne	.+60     	; 0x1078 <conv_int+0x90>
    103c:	ff 24       	eor	r15, r15
    103e:	fa 94       	dec	r15
    1040:	fa 0c       	add	r15, r10
    1042:	09 f4       	brne	.+2      	; 0x1046 <conv_int+0x5e>
    1044:	42 c0       	rjmp	.+132    	; 0x10ca <conv_int+0xe2>
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    104c:	97 fd       	sbrc	r25, 7
    104e:	3d c0       	rjmp	.+122    	; 0x10ca <conv_int+0xe2>
    1050:	38 2f       	mov	r19, r24
    1052:	3f 7d       	andi	r19, 0xDF	; 223
    1054:	38 35       	cpi	r19, 0x58	; 88
    1056:	51 f4       	brne	.+20     	; 0x106c <conv_int+0x84>
    1058:	12 64       	ori	r17, 0x42	; 66
    105a:	aa 94       	dec	r10
    105c:	aa 94       	dec	r10
    105e:	a9 f1       	breq	.+106    	; 0x10ca <conv_int+0xe2>
    1060:	ce 01       	movw	r24, r28
    1062:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    1066:	97 ff       	sbrs	r25, 7
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <conv_int+0x90>
    106a:	2f c0       	rjmp	.+94     	; 0x10ca <conv_int+0xe2>
    106c:	06 ff       	sbrs	r16, 6
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <conv_int+0x8c>
    1070:	12 60       	ori	r17, 0x02	; 2
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <conv_int+0x8e>
    1074:	12 61       	ori	r17, 0x12	; 18
    1076:	af 2c       	mov	r10, r15
    1078:	c1 2c       	mov	r12, r1
    107a:	d1 2c       	mov	r13, r1
    107c:	76 01       	movw	r14, r12
    107e:	20 ed       	ldi	r18, 0xD0	; 208
    1080:	28 0f       	add	r18, r24
    1082:	28 30       	cpi	r18, 0x08	; 8
    1084:	80 f0       	brcs	.+32     	; 0x10a6 <conv_int+0xbe>
    1086:	14 ff       	sbrs	r17, 4
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <conv_int+0xaa>
    108a:	be 01       	movw	r22, r28
    108c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ungetc>
    1090:	19 c0       	rjmp	.+50     	; 0x10c4 <conv_int+0xdc>
    1092:	2a 30       	cpi	r18, 0x0A	; 10
    1094:	40 f0       	brcs	.+16     	; 0x10a6 <conv_int+0xbe>
    1096:	16 ff       	sbrs	r17, 6
    1098:	f8 cf       	rjmp	.-16     	; 0x108a <conv_int+0xa2>
    109a:	2f 7d       	andi	r18, 0xDF	; 223
    109c:	3f ee       	ldi	r19, 0xEF	; 239
    109e:	32 0f       	add	r19, r18
    10a0:	36 30       	cpi	r19, 0x06	; 6
    10a2:	98 f7       	brcc	.-26     	; 0x108a <conv_int+0xa2>
    10a4:	27 50       	subi	r18, 0x07	; 7
    10a6:	41 2f       	mov	r20, r17
    10a8:	c7 01       	movw	r24, r14
    10aa:	b6 01       	movw	r22, r12
    10ac:	0e 94 bb 07 	call	0xf76	; 0xf76 <mulacc>
    10b0:	6b 01       	movw	r12, r22
    10b2:	7c 01       	movw	r14, r24
    10b4:	12 60       	ori	r17, 0x02	; 2
    10b6:	aa 94       	dec	r10
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <conv_int+0xe8>
    10ba:	ce 01       	movw	r24, r28
    10bc:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    10c0:	97 ff       	sbrs	r25, 7
    10c2:	dd cf       	rjmp	.-70     	; 0x107e <conv_int+0x96>
    10c4:	11 fd       	sbrc	r17, 1
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <conv_int+0xe8>
    10c8:	ab cf       	rjmp	.-170    	; 0x1020 <conv_int+0x38>
    10ca:	c1 2c       	mov	r12, r1
    10cc:	d1 2c       	mov	r13, r1
    10ce:	76 01       	movw	r14, r12
    10d0:	17 ff       	sbrs	r17, 7
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <conv_int+0xfc>
    10d4:	f0 94       	com	r15
    10d6:	e0 94       	com	r14
    10d8:	d0 94       	com	r13
    10da:	c0 94       	com	r12
    10dc:	c1 1c       	adc	r12, r1
    10de:	d1 1c       	adc	r13, r1
    10e0:	e1 1c       	adc	r14, r1
    10e2:	f1 1c       	adc	r15, r1
    10e4:	21 2f       	mov	r18, r17
    10e6:	b7 01       	movw	r22, r14
    10e8:	a6 01       	movw	r20, r12
    10ea:	c4 01       	movw	r24, r8
    10ec:	0e 94 af 07 	call	0xf5e	; 0xf5e <putval>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	af 90       	pop	r10
    1104:	9f 90       	pop	r9
    1106:	8f 90       	pop	r8
    1108:	08 95       	ret

0000110a <conv_brk>:
    110a:	a1 e2       	ldi	r26, 0x21	; 33
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e8       	ldi	r30, 0x8B	; 139
    1110:	f8 e0       	ldi	r31, 0x08	; 8
    1112:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__prologue_saves__+0xa>
    1116:	5c 01       	movw	r10, r24
    1118:	7a 01       	movw	r14, r20
    111a:	8e 01       	movw	r16, r28
    111c:	0f 5f       	subi	r16, 0xFF	; 255
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	68 01       	movw	r12, r16
    1122:	80 e2       	ldi	r24, 0x20	; 32
    1124:	d8 01       	movw	r26, r16
    1126:	1d 92       	st	X+, r1
    1128:	8a 95       	dec	r24
    112a:	e9 f7       	brne	.-6      	; 0x1126 <conv_brk+0x1c>
    112c:	f5 01       	movw	r30, r10
    112e:	73 80       	ldd	r7, Z+3	; 0x03
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	81 2c       	mov	r8, r1
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	91 2c       	mov	r9, r1
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	f9 01       	movw	r30, r18
    1140:	73 fc       	sbrc	r7, 3
    1142:	a5 91       	lpm	r26, Z+
    1144:	73 fe       	sbrs	r7, 3
    1146:	a1 91       	ld	r26, Z+
    1148:	8f 01       	movw	r16, r30
    114a:	7a 2f       	mov	r23, r26
    114c:	9f 01       	movw	r18, r30
    114e:	a1 11       	cpse	r26, r1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <conv_brk+0x4e>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	7d c0       	rjmp	.+250    	; 0x1252 <conv_brk+0x148>
    1158:	ae 35       	cpi	r26, 0x5E	; 94
    115a:	19 f4       	brne	.+6      	; 0x1162 <conv_brk+0x58>
    115c:	41 15       	cp	r20, r1
    115e:	51 05       	cpc	r21, r1
    1160:	59 f1       	breq	.+86     	; 0x11b8 <conv_brk+0xae>
    1162:	e9 2d       	mov	r30, r9
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	e4 17       	cp	r30, r20
    1168:	f5 07       	cpc	r31, r21
    116a:	3c f4       	brge	.+14     	; 0x117a <conv_brk+0x70>
    116c:	ad 35       	cpi	r26, 0x5D	; 93
    116e:	69 f1       	breq	.+90     	; 0x11ca <conv_brk+0xc0>
    1170:	ad 32       	cpi	r26, 0x2D	; 45
    1172:	19 f4       	brne	.+6      	; 0x117a <conv_brk+0x70>
    1174:	bb 23       	and	r27, r27
    1176:	19 f1       	breq	.+70     	; 0x11be <conv_brk+0xb4>
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <conv_brk+0x76>
    117a:	b1 11       	cpse	r27, r1
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <conv_brk+0x76>
    117e:	8a 2e       	mov	r8, r26
    1180:	e7 2f       	mov	r30, r23
    1182:	e6 95       	lsr	r30
    1184:	e6 95       	lsr	r30
    1186:	e6 95       	lsr	r30
    1188:	86 01       	movw	r16, r12
    118a:	0e 0f       	add	r16, r30
    118c:	11 1d       	adc	r17, r1
    118e:	f8 01       	movw	r30, r16
    1190:	a7 2f       	mov	r26, r23
    1192:	a7 70       	andi	r26, 0x07	; 7
    1194:	8c 01       	movw	r16, r24
    1196:	02 c0       	rjmp	.+4      	; 0x119c <conv_brk+0x92>
    1198:	00 0f       	add	r16, r16
    119a:	11 1f       	adc	r17, r17
    119c:	aa 95       	dec	r26
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <conv_brk+0x8e>
    11a0:	d8 01       	movw	r26, r16
    11a2:	b0 81       	ld	r27, Z
    11a4:	ba 2b       	or	r27, r26
    11a6:	b0 83       	st	Z, r27
    11a8:	78 15       	cp	r23, r8
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <conv_brk+0xb8>
    11ac:	78 15       	cp	r23, r8
    11ae:	10 f4       	brcc	.+4      	; 0x11b4 <conv_brk+0xaa>
    11b0:	7f 5f       	subi	r23, 0xFF	; 255
    11b2:	e6 cf       	rjmp	.-52     	; 0x1180 <conv_brk+0x76>
    11b4:	71 50       	subi	r23, 0x01	; 1
    11b6:	e4 cf       	rjmp	.-56     	; 0x1180 <conv_brk+0x76>
    11b8:	99 24       	eor	r9, r9
    11ba:	93 94       	inc	r9
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <conv_brk+0xba>
    11be:	b1 e0       	ldi	r27, 0x01	; 1
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <conv_brk+0xba>
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	4f 5f       	subi	r20, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	ba cf       	rjmp	.-140    	; 0x113e <conv_brk+0x34>
    11ca:	bb 23       	and	r27, r27
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <conv_brk+0xca>
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	80 62       	ori	r24, 0x20	; 32
    11d2:	8e 83       	std	Y+6, r24	; 0x06
    11d4:	91 10       	cpse	r9, r1
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <conv_brk+0xd4>
    11d8:	99 24       	eor	r9, r9
    11da:	93 94       	inc	r9
    11dc:	15 c0       	rjmp	.+42     	; 0x1208 <conv_brk+0xfe>
    11de:	f6 01       	movw	r30, r12
    11e0:	ce 01       	movw	r24, r28
    11e2:	81 96       	adiw	r24, 0x21	; 33
    11e4:	20 81       	ld	r18, Z
    11e6:	20 95       	com	r18
    11e8:	21 93       	st	Z+, r18
    11ea:	e8 17       	cp	r30, r24
    11ec:	f9 07       	cpc	r31, r25
    11ee:	d1 f7       	brne	.-12     	; 0x11e4 <conv_brk+0xda>
    11f0:	f3 cf       	rjmp	.-26     	; 0x11d8 <conv_brk+0xce>
    11f2:	e1 14       	cp	r14, r1
    11f4:	f1 04       	cpc	r15, r1
    11f6:	29 f0       	breq	.+10     	; 0x1202 <conv_brk+0xf8>
    11f8:	d7 01       	movw	r26, r14
    11fa:	8c 93       	st	X, r24
    11fc:	f7 01       	movw	r30, r14
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	7f 01       	movw	r14, r30
    1202:	61 50       	subi	r22, 0x01	; 1
    1204:	01 f1       	breq	.+64     	; 0x1246 <conv_brk+0x13c>
    1206:	91 2c       	mov	r9, r1
    1208:	c5 01       	movw	r24, r10
    120a:	69 a3       	std	Y+33, r22	; 0x21
    120c:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    1210:	69 a1       	ldd	r22, Y+33	; 0x21
    1212:	97 fd       	sbrc	r25, 7
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <conv_brk+0x138>
    1216:	28 2f       	mov	r18, r24
    1218:	26 95       	lsr	r18
    121a:	26 95       	lsr	r18
    121c:	26 95       	lsr	r18
    121e:	f6 01       	movw	r30, r12
    1220:	e2 0f       	add	r30, r18
    1222:	f1 1d       	adc	r31, r1
    1224:	20 81       	ld	r18, Z
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	ac 01       	movw	r20, r24
    122a:	47 70       	andi	r20, 0x07	; 7
    122c:	55 27       	eor	r21, r21
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <conv_brk+0x12a>
    1230:	35 95       	asr	r19
    1232:	27 95       	ror	r18
    1234:	4a 95       	dec	r20
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <conv_brk+0x126>
    1238:	20 fd       	sbrc	r18, 0
    123a:	db cf       	rjmp	.-74     	; 0x11f2 <conv_brk+0xe8>
    123c:	b5 01       	movw	r22, r10
    123e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ungetc>
    1242:	91 10       	cpse	r9, r1
    1244:	86 cf       	rjmp	.-244    	; 0x1152 <conv_brk+0x48>
    1246:	e1 14       	cp	r14, r1
    1248:	f1 04       	cpc	r15, r1
    124a:	11 f0       	breq	.+4      	; 0x1250 <conv_brk+0x146>
    124c:	d7 01       	movw	r26, r14
    124e:	1c 92       	st	X, r1
    1250:	c8 01       	movw	r24, r16
    1252:	a1 96       	adiw	r28, 0x21	; 33
    1254:	ed e0       	ldi	r30, 0x0D	; 13
    1256:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__epilogue_restores__+0xa>

0000125a <vfscanf>:
    125a:	4f 92       	push	r4
    125c:	5f 92       	push	r5
    125e:	7f 92       	push	r7
    1260:	8f 92       	push	r8
    1262:	9f 92       	push	r9
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	1f 92       	push	r1
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	8c 01       	movw	r16, r24
    1280:	2b 01       	movw	r4, r22
    1282:	7a 01       	movw	r14, r20
    1284:	fc 01       	movw	r30, r24
    1286:	17 82       	std	Z+7, r1	; 0x07
    1288:	16 82       	std	Z+6, r1	; 0x06
    128a:	a1 2c       	mov	r10, r1
    128c:	f8 01       	movw	r30, r16
    128e:	d3 80       	ldd	r13, Z+3	; 0x03
    1290:	f2 01       	movw	r30, r4
    1292:	d3 fc       	sbrc	r13, 3
    1294:	85 91       	lpm	r24, Z+
    1296:	d3 fe       	sbrs	r13, 3
    1298:	81 91       	ld	r24, Z+
    129a:	38 2f       	mov	r19, r24
    129c:	2f 01       	movw	r4, r30
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfscanf+0x4a>
    12a2:	fc c0       	rjmp	.+504    	; 0x149c <vfscanf+0x242>
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	39 83       	std	Y+1, r19	; 0x01
    12a8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <isspace>
    12ac:	39 81       	ldd	r19, Y+1	; 0x01
    12ae:	89 2b       	or	r24, r25
    12b0:	21 f0       	breq	.+8      	; 0x12ba <vfscanf+0x60>
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <skip_spaces>
    12b8:	e9 cf       	rjmp	.-46     	; 0x128c <vfscanf+0x32>
    12ba:	35 32       	cpi	r19, 0x25	; 37
    12bc:	41 f4       	brne	.+16     	; 0x12ce <vfscanf+0x74>
    12be:	f2 01       	movw	r30, r4
    12c0:	d3 fc       	sbrc	r13, 3
    12c2:	35 91       	lpm	r19, Z+
    12c4:	d3 fe       	sbrs	r13, 3
    12c6:	31 91       	ld	r19, Z+
    12c8:	2f 01       	movw	r4, r30
    12ca:	35 32       	cpi	r19, 0x25	; 37
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <vfscanf+0x8e>
    12ce:	c8 01       	movw	r24, r16
    12d0:	39 83       	std	Y+1, r19	; 0x01
    12d2:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    12d6:	39 81       	ldd	r19, Y+1	; 0x01
    12d8:	97 fd       	sbrc	r25, 7
    12da:	de c0       	rjmp	.+444    	; 0x1498 <vfscanf+0x23e>
    12dc:	38 17       	cp	r19, r24
    12de:	b1 f2       	breq	.-84     	; 0x128c <vfscanf+0x32>
    12e0:	b8 01       	movw	r22, r16
    12e2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ungetc>
    12e6:	da c0       	rjmp	.+436    	; 0x149c <vfscanf+0x242>
    12e8:	3a 32       	cpi	r19, 0x2A	; 42
    12ea:	41 f4       	brne	.+16     	; 0x12fc <vfscanf+0xa2>
    12ec:	d3 fc       	sbrc	r13, 3
    12ee:	35 91       	lpm	r19, Z+
    12f0:	d3 fe       	sbrs	r13, 3
    12f2:	31 91       	ld	r19, Z+
    12f4:	2f 01       	movw	r4, r30
    12f6:	bb 24       	eor	r11, r11
    12f8:	b3 94       	inc	r11
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <vfscanf+0xa4>
    12fc:	b1 2c       	mov	r11, r1
    12fe:	71 2c       	mov	r7, r1
    1300:	20 ed       	ldi	r18, 0xD0	; 208
    1302:	23 0f       	add	r18, r19
    1304:	2a 30       	cpi	r18, 0x0A	; 10
    1306:	90 f4       	brcc	.+36     	; 0x132c <vfscanf+0xd2>
    1308:	fb 2d       	mov	r31, r11
    130a:	f2 60       	ori	r31, 0x02	; 2
    130c:	bf 2e       	mov	r11, r31
    130e:	67 2d       	mov	r22, r7
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	40 e2       	ldi	r20, 0x20	; 32
    1318:	0e 94 bb 07 	call	0xf76	; 0xf76 <mulacc>
    131c:	76 2e       	mov	r7, r22
    131e:	f2 01       	movw	r30, r4
    1320:	d3 fc       	sbrc	r13, 3
    1322:	35 91       	lpm	r19, Z+
    1324:	d3 fe       	sbrs	r13, 3
    1326:	31 91       	ld	r19, Z+
    1328:	2f 01       	movw	r4, r30
    132a:	ea cf       	rjmp	.-44     	; 0x1300 <vfscanf+0xa6>
    132c:	b1 fe       	sbrs	r11, 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vfscanf+0xdc>
    1330:	71 10       	cpse	r7, r1
    1332:	03 c0       	rjmp	.+6      	; 0x133a <vfscanf+0xe0>
    1334:	b3 c0       	rjmp	.+358    	; 0x149c <vfscanf+0x242>
    1336:	77 24       	eor	r7, r7
    1338:	7a 94       	dec	r7
    133a:	38 36       	cpi	r19, 0x68	; 104
    133c:	19 f0       	breq	.+6      	; 0x1344 <vfscanf+0xea>
    133e:	3c 36       	cpi	r19, 0x6C	; 108
    1340:	61 f0       	breq	.+24     	; 0x135a <vfscanf+0x100>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <vfscanf+0x112>
    1344:	f2 01       	movw	r30, r4
    1346:	d3 fc       	sbrc	r13, 3
    1348:	35 91       	lpm	r19, Z+
    134a:	d3 fe       	sbrs	r13, 3
    134c:	31 91       	ld	r19, Z+
    134e:	2f 01       	movw	r4, r30
    1350:	38 36       	cpi	r19, 0x68	; 104
    1352:	61 f4       	brne	.+24     	; 0x136c <vfscanf+0x112>
    1354:	fb 2d       	mov	r31, r11
    1356:	f8 60       	ori	r31, 0x08	; 8
    1358:	bf 2e       	mov	r11, r31
    135a:	8b 2d       	mov	r24, r11
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	b8 2e       	mov	r11, r24
    1360:	f2 01       	movw	r30, r4
    1362:	d3 fc       	sbrc	r13, 3
    1364:	35 91       	lpm	r19, Z+
    1366:	d3 fe       	sbrs	r13, 3
    1368:	31 91       	ld	r19, Z+
    136a:	2f 01       	movw	r4, r30
    136c:	33 23       	and	r19, r19
    136e:	09 f4       	brne	.+2      	; 0x1372 <vfscanf+0x118>
    1370:	95 c0       	rjmp	.+298    	; 0x149c <vfscanf+0x242>
    1372:	63 2f       	mov	r22, r19
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	84 e5       	ldi	r24, 0x54	; 84
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	39 83       	std	Y+1, r19	; 0x01
    137c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strchr_P>
    1380:	39 81       	ldd	r19, Y+1	; 0x01
    1382:	89 2b       	or	r24, r25
    1384:	09 f4       	brne	.+2      	; 0x1388 <vfscanf+0x12e>
    1386:	8a c0       	rjmp	.+276    	; 0x149c <vfscanf+0x242>
    1388:	b0 fc       	sbrc	r11, 0
    138a:	07 c0       	rjmp	.+14     	; 0x139a <vfscanf+0x140>
    138c:	f7 01       	movw	r30, r14
    138e:	c0 80       	ld	r12, Z
    1390:	d1 80       	ldd	r13, Z+1	; 0x01
    1392:	c7 01       	movw	r24, r14
    1394:	02 96       	adiw	r24, 0x02	; 2
    1396:	7c 01       	movw	r14, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfscanf+0x144>
    139a:	c1 2c       	mov	r12, r1
    139c:	d1 2c       	mov	r13, r1
    139e:	3e 36       	cpi	r19, 0x6E	; 110
    13a0:	51 f4       	brne	.+20     	; 0x13b6 <vfscanf+0x15c>
    13a2:	f8 01       	movw	r30, r16
    13a4:	46 81       	ldd	r20, Z+6	; 0x06
    13a6:	57 81       	ldd	r21, Z+7	; 0x07
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	2b 2d       	mov	r18, r11
    13ae:	c6 01       	movw	r24, r12
    13b0:	0e 94 af 07 	call	0xf5e	; 0xf5e <putval>
    13b4:	6b cf       	rjmp	.-298    	; 0x128c <vfscanf+0x32>
    13b6:	33 36       	cpi	r19, 0x63	; 99
    13b8:	a1 f4       	brne	.+40     	; 0x13e2 <vfscanf+0x188>
    13ba:	b1 fc       	sbrc	r11, 1
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfscanf+0x168>
    13be:	77 24       	eor	r7, r7
    13c0:	73 94       	inc	r7
    13c2:	c8 01       	movw	r24, r16
    13c4:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    13c8:	97 fd       	sbrc	r25, 7
    13ca:	66 c0       	rjmp	.+204    	; 0x1498 <vfscanf+0x23e>
    13cc:	c1 14       	cp	r12, r1
    13ce:	d1 04       	cpc	r13, r1
    13d0:	29 f0       	breq	.+10     	; 0x13dc <vfscanf+0x182>
    13d2:	f6 01       	movw	r30, r12
    13d4:	80 83       	st	Z, r24
    13d6:	c6 01       	movw	r24, r12
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	6c 01       	movw	r12, r24
    13dc:	7a 94       	dec	r7
    13de:	89 f7       	brne	.-30     	; 0x13c2 <vfscanf+0x168>
    13e0:	57 c0       	rjmp	.+174    	; 0x1490 <vfscanf+0x236>
    13e2:	3b 35       	cpi	r19, 0x5B	; 91
    13e4:	59 f4       	brne	.+22     	; 0x13fc <vfscanf+0x1a2>
    13e6:	92 01       	movw	r18, r4
    13e8:	a6 01       	movw	r20, r12
    13ea:	67 2d       	mov	r22, r7
    13ec:	c8 01       	movw	r24, r16
    13ee:	0e 94 85 08 	call	0x110a	; 0x110a <conv_brk>
    13f2:	2c 01       	movw	r4, r24
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfscanf+0x1a0>
    13f8:	4b c0       	rjmp	.+150    	; 0x1490 <vfscanf+0x236>
    13fa:	45 c0       	rjmp	.+138    	; 0x1486 <vfscanf+0x22c>
    13fc:	c8 01       	movw	r24, r16
    13fe:	39 83       	std	Y+1, r19	; 0x01
    1400:	0e 94 db 07 	call	0xfb6	; 0xfb6 <skip_spaces>
    1404:	39 81       	ldd	r19, Y+1	; 0x01
    1406:	97 fd       	sbrc	r25, 7
    1408:	47 c0       	rjmp	.+142    	; 0x1498 <vfscanf+0x23e>
    140a:	3f 36       	cpi	r19, 0x6F	; 111
    140c:	69 f1       	breq	.+90     	; 0x1468 <vfscanf+0x20e>
    140e:	28 f4       	brcc	.+10     	; 0x141a <vfscanf+0x1c0>
    1410:	34 36       	cpi	r19, 0x64	; 100
    1412:	31 f1       	breq	.+76     	; 0x1460 <vfscanf+0x206>
    1414:	39 36       	cpi	r19, 0x69	; 105
    1416:	79 f1       	breq	.+94     	; 0x1476 <vfscanf+0x21c>
    1418:	2b c0       	rjmp	.+86     	; 0x1470 <vfscanf+0x216>
    141a:	33 37       	cpi	r19, 0x73	; 115
    141c:	69 f0       	breq	.+26     	; 0x1438 <vfscanf+0x1de>
    141e:	35 37       	cpi	r19, 0x75	; 117
    1420:	f9 f0       	breq	.+62     	; 0x1460 <vfscanf+0x206>
    1422:	26 c0       	rjmp	.+76     	; 0x1470 <vfscanf+0x216>
    1424:	c1 14       	cp	r12, r1
    1426:	d1 04       	cpc	r13, r1
    1428:	29 f0       	breq	.+10     	; 0x1434 <vfscanf+0x1da>
    142a:	f6 01       	movw	r30, r12
    142c:	80 82       	st	Z, r8
    142e:	c6 01       	movw	r24, r12
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	6c 01       	movw	r12, r24
    1434:	7a 94       	dec	r7
    1436:	71 f0       	breq	.+28     	; 0x1454 <vfscanf+0x1fa>
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 8d 0a 	call	0x151a	; 0x151a <fgetc>
    143e:	4c 01       	movw	r8, r24
    1440:	97 fd       	sbrc	r25, 7
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <vfscanf+0x1fa>
    1444:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <isspace>
    1448:	89 2b       	or	r24, r25
    144a:	61 f3       	breq	.-40     	; 0x1424 <vfscanf+0x1ca>
    144c:	b8 01       	movw	r22, r16
    144e:	c4 01       	movw	r24, r8
    1450:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ungetc>
    1454:	c1 14       	cp	r12, r1
    1456:	d1 04       	cpc	r13, r1
    1458:	d9 f0       	breq	.+54     	; 0x1490 <vfscanf+0x236>
    145a:	f6 01       	movw	r30, r12
    145c:	10 82       	st	Z, r1
    145e:	18 c0       	rjmp	.+48     	; 0x1490 <vfscanf+0x236>
    1460:	fb 2d       	mov	r31, r11
    1462:	f0 62       	ori	r31, 0x20	; 32
    1464:	bf 2e       	mov	r11, r31
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <vfscanf+0x21c>
    1468:	8b 2d       	mov	r24, r11
    146a:	80 61       	ori	r24, 0x10	; 16
    146c:	b8 2e       	mov	r11, r24
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfscanf+0x21c>
    1470:	9b 2d       	mov	r25, r11
    1472:	90 64       	ori	r25, 0x40	; 64
    1474:	b9 2e       	mov	r11, r25
    1476:	2b 2d       	mov	r18, r11
    1478:	a6 01       	movw	r20, r12
    147a:	67 2d       	mov	r22, r7
    147c:	c8 01       	movw	r24, r16
    147e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <conv_int>
    1482:	81 11       	cpse	r24, r1
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <vfscanf+0x236>
    1486:	f8 01       	movw	r30, r16
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	80 73       	andi	r24, 0x30	; 48
    148c:	29 f4       	brne	.+10     	; 0x1498 <vfscanf+0x23e>
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfscanf+0x242>
    1490:	b0 fc       	sbrc	r11, 0
    1492:	fc ce       	rjmp	.-520    	; 0x128c <vfscanf+0x32>
    1494:	a3 94       	inc	r10
    1496:	fa ce       	rjmp	.-524    	; 0x128c <vfscanf+0x32>
    1498:	aa 20       	and	r10, r10
    149a:	19 f0       	breq	.+6      	; 0x14a2 <vfscanf+0x248>
    149c:	8a 2d       	mov	r24, r10
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfscanf+0x24c>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	bf 90       	pop	r11
    14ba:	af 90       	pop	r10
    14bc:	9f 90       	pop	r9
    14be:	8f 90       	pop	r8
    14c0:	7f 90       	pop	r7
    14c2:	5f 90       	pop	r5
    14c4:	4f 90       	pop	r4
    14c6:	08 95       	ret

000014c8 <isspace>:
    14c8:	91 11       	cpse	r25, r1
    14ca:	0e c1       	rjmp	.+540    	; 0x16e8 <__ctype_isfalse>
    14cc:	80 32       	cpi	r24, 0x20	; 32
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <isspace+0xe>
    14d0:	89 50       	subi	r24, 0x09	; 9
    14d2:	85 50       	subi	r24, 0x05	; 5
    14d4:	d0 f7       	brcc	.-12     	; 0x14ca <isspace+0x2>
    14d6:	08 95       	ret

000014d8 <strchr_P>:
    14d8:	fc 01       	movw	r30, r24
    14da:	05 90       	lpm	r0, Z+
    14dc:	06 16       	cp	r0, r22
    14de:	21 f0       	breq	.+8      	; 0x14e8 <strchr_P+0x10>
    14e0:	00 20       	and	r0, r0
    14e2:	d9 f7       	brne	.-10     	; 0x14da <strchr_P+0x2>
    14e4:	c0 01       	movw	r24, r0
    14e6:	08 95       	ret
    14e8:	31 97       	sbiw	r30, 0x01	; 1
    14ea:	cf 01       	movw	r24, r30
    14ec:	08 95       	ret

000014ee <strnlen_P>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	05 90       	lpm	r0, Z+
    14f2:	61 50       	subi	r22, 0x01	; 1
    14f4:	70 40       	sbci	r23, 0x00	; 0
    14f6:	01 10       	cpse	r0, r1
    14f8:	d8 f7       	brcc	.-10     	; 0x14f0 <strnlen_P+0x2>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	8e 0f       	add	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	08 95       	ret

00001504 <strnlen>:
    1504:	fc 01       	movw	r30, r24
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 90       	ld	r0, Z+
    150c:	01 10       	cpse	r0, r1
    150e:	d8 f7       	brcc	.-10     	; 0x1506 <strnlen+0x2>
    1510:	80 95       	com	r24
    1512:	90 95       	com	r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	08 95       	ret

0000151a <fgetc>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	20 ff       	sbrs	r18, 0
    1524:	33 c0       	rjmp	.+102    	; 0x158c <fgetc+0x72>
    1526:	26 ff       	sbrs	r18, 6
    1528:	0a c0       	rjmp	.+20     	; 0x153e <fgetc+0x24>
    152a:	2f 7b       	andi	r18, 0xBF	; 191
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	9f 81       	ldd	r25, Y+7	; 0x07
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	9f 83       	std	Y+7, r25	; 0x07
    1536:	8e 83       	std	Y+6, r24	; 0x06
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	29 c0       	rjmp	.+82     	; 0x1590 <fgetc+0x76>
    153e:	22 ff       	sbrs	r18, 2
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <fgetc+0x46>
    1542:	e8 81       	ld	r30, Y
    1544:	f9 81       	ldd	r31, Y+1	; 0x01
    1546:	80 81       	ld	r24, Z
    1548:	99 27       	eor	r25, r25
    154a:	87 fd       	sbrc	r24, 7
    154c:	90 95       	com	r25
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	19 f4       	brne	.+6      	; 0x1558 <fgetc+0x3e>
    1552:	20 62       	ori	r18, 0x20	; 32
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	1a c0       	rjmp	.+52     	; 0x158c <fgetc+0x72>
    1558:	31 96       	adiw	r30, 0x01	; 1
    155a:	f9 83       	std	Y+1, r31	; 0x01
    155c:	e8 83       	st	Y, r30
    155e:	0e c0       	rjmp	.+28     	; 0x157c <fgetc+0x62>
    1560:	ea 85       	ldd	r30, Y+10	; 0x0a
    1562:	fb 85       	ldd	r31, Y+11	; 0x0b
    1564:	09 95       	icall
    1566:	97 ff       	sbrs	r25, 7
    1568:	09 c0       	rjmp	.+18     	; 0x157c <fgetc+0x62>
    156a:	2b 81       	ldd	r18, Y+3	; 0x03
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	11 f4       	brne	.+4      	; 0x1574 <fgetc+0x5a>
    1570:	80 e1       	ldi	r24, 0x10	; 16
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <fgetc+0x5c>
    1574:	80 e2       	ldi	r24, 0x20	; 32
    1576:	82 2b       	or	r24, r18
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	08 c0       	rjmp	.+16     	; 0x158c <fgetc+0x72>
    157c:	2e 81       	ldd	r18, Y+6	; 0x06
    157e:	3f 81       	ldd	r19, Y+7	; 0x07
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	3f 83       	std	Y+7, r19	; 0x07
    1586:	2e 83       	std	Y+6, r18	; 0x06
    1588:	99 27       	eor	r25, r25
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <fgetc+0x76>
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <fputc>:
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	18 2f       	mov	r17, r24
    15a0:	09 2f       	mov	r16, r25
    15a2:	eb 01       	movw	r28, r22
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 fd       	sbrc	r24, 1
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <fputc+0x1a>
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	20 c0       	rjmp	.+64     	; 0x15f0 <fputc+0x5a>
    15b0:	82 ff       	sbrs	r24, 2
    15b2:	10 c0       	rjmp	.+32     	; 0x15d4 <fputc+0x3e>
    15b4:	4e 81       	ldd	r20, Y+6	; 0x06
    15b6:	5f 81       	ldd	r21, Y+7	; 0x07
    15b8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ba:	3d 81       	ldd	r19, Y+5	; 0x05
    15bc:	42 17       	cp	r20, r18
    15be:	53 07       	cpc	r21, r19
    15c0:	7c f4       	brge	.+30     	; 0x15e0 <fputc+0x4a>
    15c2:	e8 81       	ld	r30, Y
    15c4:	f9 81       	ldd	r31, Y+1	; 0x01
    15c6:	9f 01       	movw	r18, r30
    15c8:	2f 5f       	subi	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	39 83       	std	Y+1, r19	; 0x01
    15ce:	28 83       	st	Y, r18
    15d0:	10 83       	st	Z, r17
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <fputc+0x4a>
    15d4:	e8 85       	ldd	r30, Y+8	; 0x08
    15d6:	f9 85       	ldd	r31, Y+9	; 0x09
    15d8:	81 2f       	mov	r24, r17
    15da:	09 95       	icall
    15dc:	89 2b       	or	r24, r25
    15de:	29 f7       	brne	.-54     	; 0x15aa <fputc+0x14>
    15e0:	2e 81       	ldd	r18, Y+6	; 0x06
    15e2:	3f 81       	ldd	r19, Y+7	; 0x07
    15e4:	2f 5f       	subi	r18, 0xFF	; 255
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	3f 83       	std	Y+7, r19	; 0x07
    15ea:	2e 83       	std	Y+6, r18	; 0x06
    15ec:	81 2f       	mov	r24, r17
    15ee:	90 2f       	mov	r25, r16
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	08 95       	ret

000015fa <ungetc>:
    15fa:	fb 01       	movw	r30, r22
    15fc:	23 81       	ldd	r18, Z+3	; 0x03
    15fe:	20 ff       	sbrs	r18, 0
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <ungetc+0x2c>
    1602:	26 fd       	sbrc	r18, 6
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <ungetc+0x2c>
    1606:	8f 3f       	cpi	r24, 0xFF	; 255
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	93 07       	cpc	r25, r19
    160c:	61 f0       	breq	.+24     	; 0x1626 <ungetc+0x2c>
    160e:	82 83       	std	Z+2, r24	; 0x02
    1610:	2f 7d       	andi	r18, 0xDF	; 223
    1612:	20 64       	ori	r18, 0x40	; 64
    1614:	23 83       	std	Z+3, r18	; 0x03
    1616:	26 81       	ldd	r18, Z+6	; 0x06
    1618:	37 81       	ldd	r19, Z+7	; 0x07
    161a:	21 50       	subi	r18, 0x01	; 1
    161c:	31 09       	sbc	r19, r1
    161e:	37 83       	std	Z+7, r19	; 0x07
    1620:	26 83       	std	Z+6, r18	; 0x06
    1622:	99 27       	eor	r25, r25
    1624:	08 95       	ret
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	08 95       	ret

0000162c <__ultoa_invert>:
    162c:	fa 01       	movw	r30, r20
    162e:	aa 27       	eor	r26, r26
    1630:	28 30       	cpi	r18, 0x08	; 8
    1632:	51 f1       	breq	.+84     	; 0x1688 <__ultoa_invert+0x5c>
    1634:	20 31       	cpi	r18, 0x10	; 16
    1636:	81 f1       	breq	.+96     	; 0x1698 <__ultoa_invert+0x6c>
    1638:	e8 94       	clt
    163a:	6f 93       	push	r22
    163c:	6e 7f       	andi	r22, 0xFE	; 254
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	af 4f       	sbci	r26, 0xFF	; 255
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	3e d0       	rcall	.+124    	; 0x16c8 <__ultoa_invert+0x9c>
    164c:	b4 e0       	ldi	r27, 0x04	; 4
    164e:	3c d0       	rcall	.+120    	; 0x16c8 <__ultoa_invert+0x9c>
    1650:	67 0f       	add	r22, r23
    1652:	78 1f       	adc	r23, r24
    1654:	89 1f       	adc	r24, r25
    1656:	9a 1f       	adc	r25, r26
    1658:	a1 1d       	adc	r26, r1
    165a:	68 0f       	add	r22, r24
    165c:	79 1f       	adc	r23, r25
    165e:	8a 1f       	adc	r24, r26
    1660:	91 1d       	adc	r25, r1
    1662:	a1 1d       	adc	r26, r1
    1664:	6a 0f       	add	r22, r26
    1666:	71 1d       	adc	r23, r1
    1668:	81 1d       	adc	r24, r1
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	20 d0       	rcall	.+64     	; 0x16b0 <__ultoa_invert+0x84>
    1670:	09 f4       	brne	.+2      	; 0x1674 <__ultoa_invert+0x48>
    1672:	68 94       	set
    1674:	3f 91       	pop	r19
    1676:	2a e0       	ldi	r18, 0x0A	; 10
    1678:	26 9f       	mul	r18, r22
    167a:	11 24       	eor	r1, r1
    167c:	30 19       	sub	r19, r0
    167e:	30 5d       	subi	r19, 0xD0	; 208
    1680:	31 93       	st	Z+, r19
    1682:	de f6       	brtc	.-74     	; 0x163a <__ultoa_invert+0xe>
    1684:	cf 01       	movw	r24, r30
    1686:	08 95       	ret
    1688:	46 2f       	mov	r20, r22
    168a:	47 70       	andi	r20, 0x07	; 7
    168c:	40 5d       	subi	r20, 0xD0	; 208
    168e:	41 93       	st	Z+, r20
    1690:	b3 e0       	ldi	r27, 0x03	; 3
    1692:	0f d0       	rcall	.+30     	; 0x16b2 <__ultoa_invert+0x86>
    1694:	c9 f7       	brne	.-14     	; 0x1688 <__ultoa_invert+0x5c>
    1696:	f6 cf       	rjmp	.-20     	; 0x1684 <__ultoa_invert+0x58>
    1698:	46 2f       	mov	r20, r22
    169a:	4f 70       	andi	r20, 0x0F	; 15
    169c:	40 5d       	subi	r20, 0xD0	; 208
    169e:	4a 33       	cpi	r20, 0x3A	; 58
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <__ultoa_invert+0x7c>
    16a2:	49 5d       	subi	r20, 0xD9	; 217
    16a4:	31 fd       	sbrc	r19, 1
    16a6:	40 52       	subi	r20, 0x20	; 32
    16a8:	41 93       	st	Z+, r20
    16aa:	02 d0       	rcall	.+4      	; 0x16b0 <__ultoa_invert+0x84>
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__ultoa_invert+0x6c>
    16ae:	ea cf       	rjmp	.-44     	; 0x1684 <__ultoa_invert+0x58>
    16b0:	b4 e0       	ldi	r27, 0x04	; 4
    16b2:	a6 95       	lsr	r26
    16b4:	97 95       	ror	r25
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	ba 95       	dec	r27
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__ultoa_invert+0x86>
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	61 05       	cpc	r22, r1
    16c4:	71 05       	cpc	r23, r1
    16c6:	08 95       	ret
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	0a 2e       	mov	r0, r26
    16ce:	06 94       	lsr	r0
    16d0:	57 95       	ror	r21
    16d2:	47 95       	ror	r20
    16d4:	37 95       	ror	r19
    16d6:	27 95       	ror	r18
    16d8:	ba 95       	dec	r27
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__ultoa_invert+0xa2>
    16dc:	62 0f       	add	r22, r18
    16de:	73 1f       	adc	r23, r19
    16e0:	84 1f       	adc	r24, r20
    16e2:	95 1f       	adc	r25, r21
    16e4:	a0 1d       	adc	r26, r0
    16e6:	08 95       	ret

000016e8 <__ctype_isfalse>:
    16e8:	99 27       	eor	r25, r25
    16ea:	88 27       	eor	r24, r24

000016ec <__ctype_istrue>:
    16ec:	08 95       	ret

000016ee <__prologue_saves__>:
    16ee:	2f 92       	push	r2
    16f0:	3f 92       	push	r3
    16f2:	4f 92       	push	r4
    16f4:	5f 92       	push	r5
    16f6:	6f 92       	push	r6
    16f8:	7f 92       	push	r7
    16fa:	8f 92       	push	r8
    16fc:	9f 92       	push	r9
    16fe:	af 92       	push	r10
    1700:	bf 92       	push	r11
    1702:	cf 92       	push	r12
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	ca 1b       	sub	r28, r26
    1718:	db 0b       	sbc	r29, r27
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	09 94       	ijmp

00001726 <__epilogue_restores__>:
    1726:	2a 88       	ldd	r2, Y+18	; 0x12
    1728:	39 88       	ldd	r3, Y+17	; 0x11
    172a:	48 88       	ldd	r4, Y+16	; 0x10
    172c:	5f 84       	ldd	r5, Y+15	; 0x0f
    172e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1730:	7d 84       	ldd	r7, Y+13	; 0x0d
    1732:	8c 84       	ldd	r8, Y+12	; 0x0c
    1734:	9b 84       	ldd	r9, Y+11	; 0x0b
    1736:	aa 84       	ldd	r10, Y+10	; 0x0a
    1738:	b9 84       	ldd	r11, Y+9	; 0x09
    173a:	c8 84       	ldd	r12, Y+8	; 0x08
    173c:	df 80       	ldd	r13, Y+7	; 0x07
    173e:	ee 80       	ldd	r14, Y+6	; 0x06
    1740:	fd 80       	ldd	r15, Y+5	; 0x05
    1742:	0c 81       	ldd	r16, Y+4	; 0x04
    1744:	1b 81       	ldd	r17, Y+3	; 0x03
    1746:	aa 81       	ldd	r26, Y+2	; 0x02
    1748:	b9 81       	ldd	r27, Y+1	; 0x01
    174a:	ce 0f       	add	r28, r30
    174c:	d1 1d       	adc	r29, r1
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	ed 01       	movw	r28, r26
    175a:	08 95       	ret

0000175c <_exit>:
    175c:	f8 94       	cli

0000175e <__stop_program>:
    175e:	ff cf       	rjmp	.-2      	; 0x175e <__stop_program>
