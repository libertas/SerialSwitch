
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000186e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  0000186e  00001902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d9  00800142  00800142  000019e4  2**0
                  ALLOC
  3 .stab         00001f5c  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb3  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000048f3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_4>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_9>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_11>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	8c 00       	.word	0x008c	; ????
      56:	ba 02       	muls	r27, r26
      58:	f4 00       	.word	0x00f4	; ????
      5a:	ba 02       	muls	r27, r26
      5c:	58 01       	movw	r10, r16
      5e:	a7 02       	muls	r26, r23
      60:	ba 02       	muls	r27, r26
      62:	ba 02       	muls	r27, r26
      64:	ba 02       	muls	r27, r26
      66:	ba 02       	muls	r27, r26
      68:	ba 02       	muls	r27, r26
      6a:	ba 02       	muls	r27, r26
      6c:	ba 02       	muls	r27, r26
      6e:	ba 02       	muls	r27, r26
      70:	ba 02       	muls	r27, r26
      72:	ba 02       	muls	r27, r26
      74:	ba 02       	muls	r27, r26
      76:	99 02       	muls	r25, r25
      78:	ba 02       	muls	r27, r26
      7a:	e0 01       	movw	r28, r0
      7c:	3f 02       	muls	r19, r31

0000007e <__trampolines_end>:
      7e:	63 64       	ori	r22, 0x43	; 67
      80:	69 6e       	ori	r22, 0xE9	; 233
      82:	6f 70       	andi	r22, 0x0F	; 15
      84:	73 75       	andi	r23, 0x53	; 83
      86:	78 58       	subi	r23, 0x88	; 136
      88:	5b 00       	.word	0x005b	; ????

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	ee e6       	ldi	r30, 0x6E	; 110
      9e:	f8 e1       	ldi	r31, 0x18	; 24
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a2 34       	cpi	r26, 0x42	; 66
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a2 e4       	ldi	r26, 0x42	; 66
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	ab 31       	cpi	r26, 0x1B	; 27
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <main>
      c0:	0c 94 35 0c 	jmp	0x186a	; 0x186a <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	28 97       	sbiw	r28, 0x08	; 8
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      ea:	dc 01       	movw	r26, r24
      ec:	11 96       	adiw	r26, 0x01	; 1
      ee:	fc 90       	ld	r15, X
      f0:	11 97       	sbiw	r26, 0x01	; 1
      f2:	2f 2d       	mov	r18, r15
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	c9 01       	movw	r24, r18
      f8:	c0 97       	sbiw	r24, 0x30	; 48
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	8d 83       	std	Y+5, r24	; 0x05
	switch (code[0]) {
      fe:	4c 91       	ld	r20, X
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	41 54       	subi	r20, 0x41	; 65
     104:	51 09       	sbc	r21, r1
     106:	45 31       	cpi	r20, 0x15	; 21
     108:	51 05       	cpc	r21, r1
     10a:	08 f0       	brcs	.+2      	; 0x10e <runCmd+0x46>
     10c:	33 c2       	rjmp	.+1126   	; 0x574 <__stack+0x115>
     10e:	46 5d       	subi	r20, 0xD6	; 214
     110:	5f 4f       	sbci	r21, 0xFF	; 255
     112:	fa 01       	movw	r30, r20
     114:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__tablejump2__>
	case 'A':		// control port a
		if (code[2] - '0') {
     118:	d8 01       	movw	r26, r16
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	20 33       	cpi	r18, 0x30	; 48
     120:	29 f1       	breq	.+74     	; 0x16c <runCmd+0xa4>
			writeEEPROM(addr, '1');
     122:	61 e3       	ldi	r22, 0x31	; 49
     124:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			PORTA |= 1 << addr;
     128:	2b b3       	in	r18, 0x1b	; 27
     12a:	ee 24       	eor	r14, r14
     12c:	e3 94       	inc	r14
     12e:	f1 2c       	mov	r15, r1
     130:	c7 01       	movw	r24, r14
     132:	0d 80       	ldd	r0, Y+5	; 0x05
     134:	02 c0       	rjmp	.+4      	; 0x13a <runCmd+0x72>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <runCmd+0x6e>
     13e:	28 2b       	or	r18, r24
     140:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     142:	f8 01       	movw	r30, r16
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	1f 92       	push	r1
     148:	8f 93       	push	r24
     14a:	80 e7       	ldi	r24, 0x70	; 112
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	8d e4       	ldi	r24, 0x4D	; 77
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
			status |= 1 << addr;
     15e:	0d 80       	ldd	r0, Y+5	; 0x05
     160:	02 c0       	rjmp	.+4      	; 0x166 <runCmd+0x9e>
     162:	ee 0c       	add	r14, r14
     164:	ff 1c       	adc	r15, r15
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <runCmd+0x9a>
     16a:	6a c0       	rjmp	.+212    	; 0x240 <runCmd+0x178>
		} else {
			writeEEPROM(addr, '0');
     16c:	60 e3       	ldi	r22, 0x30	; 48
     16e:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			PORTA &= ~(1 << addr);
     172:	2b b3       	in	r18, 0x1b	; 27
     174:	ee 24       	eor	r14, r14
     176:	e3 94       	inc	r14
     178:	f1 2c       	mov	r15, r1
     17a:	c7 01       	movw	r24, r14
     17c:	0d 80       	ldd	r0, Y+5	; 0x05
     17e:	02 c0       	rjmp	.+4      	; 0x184 <runCmd+0xbc>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <runCmd+0xb8>
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     18e:	d8 01       	movw	r26, r16
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	8c 91       	ld	r24, X
     194:	1f 92       	push	r1
     196:	8f 93       	push	r24
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	8d e4       	ldi	r24, 0x4D	; 77
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
			status &= ~(1 << addr);
     1ac:	97 01       	movw	r18, r14
     1ae:	0d 80       	ldd	r0, Y+5	; 0x05
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <runCmd+0xee>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <runCmd+0xea>
     1ba:	20 95       	com	r18
     1bc:	30 95       	com	r19
     1be:	80 91 f3 01 	lds	r24, 0x01F3
     1c2:	90 91 f4 01 	lds	r25, 0x01F4
     1c6:	82 23       	and	r24, r18
     1c8:	93 23       	and	r25, r19
     1ca:	90 93 f4 01 	sts	0x01F4, r25
     1ce:	80 93 f3 01 	sts	0x01F3, r24
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
		}
		runCmd(buf);
     1de:	8d e4       	ldi	r24, 0x4D	; 77
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
		break;
     1e6:	db c1       	rjmp	.+950    	; 0x59e <__stack+0x13f>
	case 'C':		// control port c
		if (code[2] - '0') {
     1e8:	f8 01       	movw	r30, r16
     1ea:	22 81       	ldd	r18, Z+2	; 0x02
     1ec:	08 96       	adiw	r24, 0x08	; 8
     1ee:	20 33       	cpi	r18, 0x30	; 48
     1f0:	71 f1       	breq	.+92     	; 0x24e <runCmd+0x186>
			writeEEPROM(8 + addr, '1');
     1f2:	61 e3       	ldi	r22, 0x31	; 49
     1f4:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			PORTC |= 1 << addr;
     1f8:	25 b3       	in	r18, 0x15	; 21
     1fa:	ee 24       	eor	r14, r14
     1fc:	e3 94       	inc	r14
     1fe:	f1 2c       	mov	r15, r1
     200:	c7 01       	movw	r24, r14
     202:	0d 80       	ldd	r0, Y+5	; 0x05
     204:	02 c0       	rjmp	.+4      	; 0x20a <runCmd+0x142>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	0a 94       	dec	r0
     20c:	e2 f7       	brpl	.-8      	; 0x206 <runCmd+0x13e>
     20e:	28 2b       	or	r18, r24
     210:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     212:	d8 01       	movw	r26, r16
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	8c 91       	ld	r24, X
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	8d e4       	ldi	r24, 0x4D	; 77
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
			status |= 1 << (8 + addr);
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	08 96       	adiw	r24, 0x08	; 8
     236:	02 c0       	rjmp	.+4      	; 0x23c <runCmd+0x174>
     238:	ee 0c       	add	r14, r14
     23a:	ff 1c       	adc	r15, r15
     23c:	8a 95       	dec	r24
     23e:	e2 f7       	brpl	.-8      	; 0x238 <runCmd+0x170>
     240:	80 91 f3 01 	lds	r24, 0x01F3
     244:	90 91 f4 01 	lds	r25, 0x01F4
     248:	8e 29       	or	r24, r14
     24a:	9f 29       	or	r25, r15
     24c:	be cf       	rjmp	.-132    	; 0x1ca <runCmd+0x102>
		} else {
			writeEEPROM(8 + addr, '0');
     24e:	60 e3       	ldi	r22, 0x30	; 48
     250:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			PORTC &= ~(1 << addr);
     254:	25 b3       	in	r18, 0x15	; 21
     256:	ee 24       	eor	r14, r14
     258:	e3 94       	inc	r14
     25a:	f1 2c       	mov	r15, r1
     25c:	c7 01       	movw	r24, r14
     25e:	0d 80       	ldd	r0, Y+5	; 0x05
     260:	02 c0       	rjmp	.+4      	; 0x266 <runCmd+0x19e>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <runCmd+0x19a>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     270:	f8 01       	movw	r30, r16
     272:	81 81       	ldd	r24, Z+1	; 0x01
     274:	1f 92       	push	r1
     276:	8f 93       	push	r24
     278:	84 e9       	ldi	r24, 0x94	; 148
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	8d e4       	ldi	r24, 0x4D	; 77
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
			status ^= ~(1 << (8 + addr));
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	08 96       	adiw	r24, 0x08	; 8
     292:	97 01       	movw	r18, r14
     294:	02 c0       	rjmp	.+4      	; 0x29a <runCmd+0x1d2>
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <runCmd+0x1ce>
     29e:	20 95       	com	r18
     2a0:	30 95       	com	r19
     2a2:	80 91 f3 01 	lds	r24, 0x01F3
     2a6:	90 91 f4 01 	lds	r25, 0x01F4
     2aa:	82 27       	eor	r24, r18
     2ac:	93 27       	eor	r25, r19
     2ae:	8d cf       	rjmp	.-230    	; 0x1ca <runCmd+0x102>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2b0:	d8 01       	movw	r26, r16
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	6c 91       	ld	r22, X
     2b6:	69 36       	cpi	r22, 0x69	; 105
     2b8:	81 f4       	brne	.+32     	; 0x2da <runCmd+0x212>
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++) {
				wdt_reset();
     2be:	a8 95       	wdr
				writeEEPROM(i, code[1]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	61 81       	ldd	r22, Z+1	; 0x01
     2c4:	c7 01       	movw	r24, r14
     2c6:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
			for (i = 0; i < 16; i++) {
     2ca:	ff ef       	ldi	r31, 0xFF	; 255
     2cc:	ef 1a       	sub	r14, r31
     2ce:	ff 0a       	sbc	r15, r31
     2d0:	20 e1       	ldi	r18, 0x10	; 16
     2d2:	e2 16       	cp	r14, r18
     2d4:	f1 04       	cpc	r15, r1
     2d6:	99 f7       	brne	.-26     	; 0x2be <runCmd+0x1f6>
     2d8:	62 c1       	rjmp	.+708    	; 0x59e <__stack+0x13f>
				wdt_reset();
				writeEEPROM(i, code[1]);
			}
		} else if (code[2] == 'f')
     2da:	66 36       	cpi	r22, 0x66	; 102
     2dc:	d1 f4       	brne	.+52     	; 0x312 <runCmd+0x24a>
		{
			if(code[1] == 'a')
     2de:	31 e6       	ldi	r19, 0x61	; 97
     2e0:	f3 12       	cpse	r15, r19
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <runCmd+0x222>
				addr = EEPROM_SIZE;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <runCmd+0x226>
			else
				addr = 16;
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9e 83       	std	Y+6, r25	; 0x06
     2f0:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	08 17       	cp	r16, r24
     2fc:	19 07       	cpc	r17, r25
     2fe:	08 f0       	brcs	.+2      	; 0x302 <runCmd+0x23a>
     300:	4e c1       	rjmp	.+668    	; 0x59e <__stack+0x13f>
				wdt_reset();
     302:	a8 95       	wdr
				writeEEPROM(i, 0xff);
     304:	6f ef       	ldi	r22, 0xFF	; 255
     306:	c8 01       	movw	r24, r16
     308:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	f2 cf       	rjmp	.-28     	; 0x2f6 <runCmd+0x22e>
				wdt_reset();
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
     312:	62 37       	cpi	r22, 0x72	; 114
     314:	31 f4       	brne	.+12     	; 0x322 <runCmd+0x25a>
			PORTA = ~readEEPROM(code[1]);
     316:	c9 01       	movw	r24, r18
     318:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     31c:	80 95       	com	r24
     31e:	8b bb       	out	0x1b, r24	; 27
     320:	3e c1       	rjmp	.+636    	; 0x59e <__stack+0x13f>
		} else if (code[1] == 'R') {
     322:	82 e5       	ldi	r24, 0x52	; 82
     324:	f8 12       	cpse	r15, r24
     326:	4a c0       	rjmp	.+148    	; 0x3bc <runCmd+0x2f4>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     328:	ce 01       	movw	r24, r28
     32a:	05 96       	adiw	r24, 0x05	; 5
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	81 ec       	ldi	r24, 0xC1	; 193
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 5f       	subi	r16, 0xFE	; 254
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	1f 93       	push	r17
     33e:	0f 93       	push	r16
     340:	0e 94 4b 06 	call	0xc96	; 0xc96 <sscanf>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	69 f4       	brne	.+26     	; 0x36e <runCmd+0x2a6>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     354:	8d 81       	ldd	r24, Y+5	; 0x05
     356:	9e 81       	ldd	r25, Y+6	; 0x06
     358:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     35c:	1f 92       	push	r1
     35e:	8f 93       	push	r24
     360:	8e 81       	ldd	r24, Y+6	; 0x06
     362:	8f 93       	push	r24
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	8f 93       	push	r24
     368:	80 ea       	ldi	r24, 0xA0	; 160
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	f8 c0       	rjmp	.+496    	; 0x55e <__stack+0xff>
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
			PORTA = ~readEEPROM(code[1]);
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     372:	30 ea       	ldi	r19, 0xA0	; 160
     374:	c3 2e       	mov	r12, r19
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	d3 2e       	mov	r13, r19
     37a:	4d e4       	ldi	r20, 0x4D	; 77
     37c:	e4 2e       	mov	r14, r20
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     382:	c8 01       	movw	r24, r16
     384:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     388:	1f 92       	push	r1
     38a:	8f 93       	push	r24
     38c:	1f 93       	push	r17
     38e:	0f 93       	push	r16
     390:	df 92       	push	r13
     392:	cf 92       	push	r12
     394:	ff 92       	push	r15
     396:	ef 92       	push	r14
     398:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
						readEEPROM(i));
					printf(buf);
     39c:	ff 92       	push	r15
     39e:	ef 92       	push	r14
     3a0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <printf>
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	01 15       	cp	r16, r1
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	1f 07       	cpc	r17, r31
     3b8:	21 f7       	brne	.-56     	; 0x382 <runCmd+0x2ba>
     3ba:	f1 c0       	rjmp	.+482    	; 0x59e <__stack+0x13f>
						readEEPROM(i));
					printf(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
     3bc:	c9 01       	movw	r24, r18
     3be:	59 c0       	rjmp	.+178    	; 0x472 <__stack+0x13>
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	03 96       	adiw	r24, 0x03	; 3
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	87 ea       	ldi	r24, 0xA7	; 167
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	1f 93       	push	r17
     3d6:	0f 93       	push	r16
     3d8:	0e 94 4b 06 	call	0xc96	; 0xc96 <sscanf>
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	02 97       	sbiw	r24, 0x02	; 2
     3e8:	09 f0       	breq	.+2      	; 0x3ec <runCmd+0x324>
     3ea:	46 c0       	rjmp	.+140    	; 0x478 <__stack+0x19>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3ec:	6c 81       	ldd	r22, Y+4	; 0x04
     3ee:	80 91 b1 01 	lds	r24, 0x01B1
     3f2:	90 91 b2 01 	lds	r25, 0x01B2
     3f6:	9c 01       	movw	r18, r24
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	31 09       	sbc	r19, r1
     3fc:	30 93 b2 01 	sts	0x01B2, r19
     400:	20 93 b1 01 	sts	0x01B1, r18
     404:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     408:	6b 81       	ldd	r22, Y+3	; 0x03
     40a:	80 91 b1 01 	lds	r24, 0x01B1
     40e:	90 91 b2 01 	lds	r25, 0x01B2
     412:	9c 01       	movw	r18, r24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	31 09       	sbc	r19, r1
     418:	30 93 b2 01 	sts	0x01B2, r19
     41c:	20 93 b1 01 	sts	0x01B1, r18
     420:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     424:	78 01       	movw	r14, r16
     426:	f8 01       	movw	r30, r16
     428:	01 90       	ld	r0, Z+
     42a:	00 20       	and	r0, r0
     42c:	e9 f7       	brne	.-6      	; 0x428 <runCmd+0x360>
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	e0 1b       	sub	r30, r16
     432:	f1 0b       	sbc	r31, r17
     434:	80 91 b1 01 	lds	r24, 0x01B1
     438:	90 91 b2 01 	lds	r25, 0x01B2
     43c:	97 01       	movw	r18, r14
     43e:	20 1b       	sub	r18, r16
     440:	31 0b       	sbc	r19, r17
     442:	2e 17       	cp	r18, r30
     444:	3f 07       	cpc	r19, r31
     446:	68 f4       	brcc	.+26     	; 0x462 <__stack+0x3>
				writeEEPROM(stackTail--, code[i]);
     448:	d7 01       	movw	r26, r14
     44a:	6d 91       	ld	r22, X+
     44c:	7d 01       	movw	r14, r26
     44e:	9c 01       	movw	r18, r24
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	30 93 b2 01 	sts	0x01B2, r19
     458:	20 93 b1 01 	sts	0x01B1, r18
     45c:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
     460:	e2 cf       	rjmp	.-60     	; 0x426 <runCmd+0x35e>
			}
			writeEEPROM(stackTail--, '\n');
     462:	9c 01       	movw	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	31 09       	sbc	r19, r1
     468:	30 93 b2 01 	sts	0x01B2, r19
     46c:	20 93 b1 01 	sts	0x01B1, r18
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
		} else {
			printf("Wrong code!\n");
			return;
		}
		break;
     476:	93 c0       	rjmp	.+294    	; 0x59e <__stack+0x13f>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			printf("Wrong code!\n");
     478:	8d ea       	ldi	r24, 0xAD	; 173
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	3d c0       	rjmp	.+122    	; 0x4f8 <__stack+0x99>
			return;
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	02 96       	adiw	r24, 0x02	; 2
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	04 96       	adiw	r24, 0x04	; 4
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	89 eb       	ldi	r24, 0xB9	; 185
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	1f 93       	push	r17
     4a2:	0f 93       	push	r16
     4a4:	0e 94 4b 06 	call	0xc96	; 0xc96 <sscanf>
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	04 97       	sbiw	r24, 0x04	; 4
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__stack+0x59>
     4b6:	73 c0       	rjmp	.+230    	; 0x59e <__stack+0x13f>
			if (port == 'A')
     4b8:	88 85       	ldd	r24, Y+8	; 0x08
     4ba:	81 34       	cpi	r24, 0x41	; 65
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <__stack+0x65>
				addr = 16;
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__stack+0x6d>
			else if (port == 'C')
     4c4:	83 34       	cpi	r24, 0x43	; 67
     4c6:	b1 f4       	brne	.+44     	; 0x4f4 <__stack+0x95>
				addr = 48;
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	9e 83       	std	Y+6, r25	; 0x06
     4ce:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	90 ed       	ldi	r25, 0xD0	; 208
     4d4:	98 0f       	add	r25, r24
     4d6:	9a 30       	cpi	r25, 0x0A	; 10
     4d8:	90 f4       	brcc	.+36     	; 0x4fe <__stack+0x9f>
				addr += (pin - '0') * 4;
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	c0 97       	sbiw	r24, 0x30	; 48
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	2d 81       	ldd	r18, Y+5	; 0x05
     4e8:	3e 81       	ldd	r19, Y+6	; 0x06
     4ea:	28 0f       	add	r18, r24
     4ec:	39 1f       	adc	r19, r25
     4ee:	3e 83       	std	Y+6, r19	; 0x06
     4f0:	2d 83       	std	Y+5, r18	; 0x05
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <__stack+0x9f>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <puts>
				return;
     4fc:	50 c0       	rjmp	.+160    	; 0x59e <__stack+0x13f>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     4fe:	6c 81       	ldd	r22, Y+4	; 0x04
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			writeEEPROM(addr + 1, time);
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	6b 81       	ldd	r22, Y+3	; 0x03
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     514:	6a 81       	ldd	r22, Y+2	; 0x02
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	9e 81       	ldd	r25, Y+6	; 0x06
     51a:	02 96       	adiw	r24, 0x02	; 2
     51c:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     520:	8d 81       	ldd	r24, Y+5	; 0x05
     522:	9e 81       	ldd	r25, Y+6	; 0x06
     524:	69 81       	ldd	r22, Y+1	; 0x01
     526:	03 96       	adiw	r24, 0x03	; 3
     528:	0e 94 de 02 	call	0x5bc	; 0x5bc <writeEEPROM>
			setDuty();
     52c:	0e 94 ed 02 	call	0x5da	; 0x5da <setDuty>
     530:	36 c0       	rjmp	.+108    	; 0x59e <__stack+0x13f>
		}
		break;
	case 'R':		// Reboot
		printf("REBOOTING\n");
     532:	8f ec       	ldi	r24, 0xCF	; 207
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <puts>
		wdt_enable(WDTO_15MS);
     53a:	28 e0       	ldi	r18, 0x08	; 8
     53c:	88 e1       	ldi	r24, 0x18	; 24
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	a8 95       	wdr
     546:	81 bd       	out	0x21, r24	; 33
     548:	0f be       	out	0x3f, r0	; 63
     54a:	21 bd       	out	0x21, r18	; 33
     54c:	ff cf       	rjmp	.-2      	; 0x54c <__stack+0xed>
		while (1);
		break;
	case 'F':		// Print CPU frequency
		sprintf(buf, "F_CPU: %ld Hz\n", F_CPU);
     54e:	1f 92       	push	r1
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	8f 93       	push	r24
     554:	84 e2       	ldi	r24, 0x24	; 36
     556:	8f 93       	push	r24
     558:	1f 92       	push	r1
     55a:	89 ed       	ldi	r24, 0xD9	; 217
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0d e4       	ldi	r16, 0x4D	; 77
     564:	11 e0       	ldi	r17, 0x01	; 1
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
		printf(buf);
     56e:	1f 93       	push	r17
     570:	0f 93       	push	r16
     572:	0e c0       	rjmp	.+28     	; 0x590 <__stack+0x131>
		break;
	default:
		sprintf(buf, "Unrecognized code:%s\n", code);
     574:	1f 93       	push	r17
     576:	0f 93       	push	r16
     578:	88 ee       	ldi	r24, 0xE8	; 232
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0d e4       	ldi	r16, 0x4D	; 77
     582:	11 e0       	ldi	r17, 0x01	; 1
     584:	1f 93       	push	r17
     586:	0f 93       	push	r16
     588:	0e 94 29 06 	call	0xc52	; 0xc52 <sprintf>
		printf(buf);
     58c:	1f 93       	push	r17
     58e:	0f 93       	push	r16
     590:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <printf>
		break;
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
	}
}
     59e:	28 96       	adiw	r28, 0x08	; 8
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	08 95       	ret

000005bc <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     5bc:	e1 99       	sbic	0x1c, 1	; 28
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <writeEEPROM>
	EEAR = addr;
     5c0:	9f bb       	out	0x1f, r25	; 31
     5c2:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     5c4:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     5c6:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     5c8:	e1 9a       	sbi	0x1c, 1	; 28
     5ca:	08 95       	ret

000005cc <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     5cc:	e1 99       	sbic	0x1c, 1	; 28
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <readEEPROM>
	EEAR = addr;
     5d0:	9f bb       	out	0x1f, r25	; 31
     5d2:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     5d4:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     5d6:	8d b3       	in	r24, 0x1d	; 29
}
     5d8:	08 95       	ret

000005da <setDuty>:

void setDuty()
{
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5e8:	8e 01       	movw	r16, r28
     5ea:	15 95       	asr	r17
     5ec:	07 95       	ror	r16
     5ee:	15 95       	asr	r17
     5f0:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5f2:	ce 01       	movw	r24, r28
     5f4:	40 96       	adiw	r24, 0x10	; 16
     5f6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     5fa:	f8 2e       	mov	r15, r24
     5fc:	ce 01       	movw	r24, r28
     5fe:	41 96       	adiw	r24, 0x11	; 17
     600:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     604:	00 0f       	add	r16, r16
     606:	11 1f       	adc	r17, r17
     608:	f8 01       	movw	r30, r16
     60a:	ed 54       	subi	r30, 0x4D	; 77
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     60e:	2f 2d       	mov	r18, r15
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	32 2f       	mov	r19, r18
     614:	22 27       	eor	r18, r18
     616:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     618:	31 83       	std	Z+1, r19	; 0x01
     61a:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     61c:	ce 01       	movw	r24, r28
     61e:	42 96       	adiw	r24, 0x12	; 18
     620:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     624:	f8 2e       	mov	r15, r24
     626:	ce 01       	movw	r24, r28
     628:	43 96       	adiw	r24, 0x13	; 19
     62a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     62e:	f8 01       	movw	r30, r16
     630:	ed 52       	subi	r30, 0x2D	; 45
     632:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     634:	2f 2d       	mov	r18, r15
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	32 2f       	mov	r19, r18
     63a:	22 27       	eor	r18, r18
     63c:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     63e:	31 83       	std	Z+1, r19	; 0x01
     640:	20 83       	st	Z, r18
     642:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     644:	c0 34       	cpi	r28, 0x40	; 64
     646:	d1 05       	cpc	r29, r1
     648:	79 f6       	brne	.-98     	; 0x5e8 <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     64a:	40 91 f3 01 	lds	r20, 0x01F3
     64e:	50 91 f4 01 	lds	r21, 0x01F4
     652:	c3 eb       	ldi	r28, 0xB3	; 179
     654:	d1 e0       	ldi	r29, 0x01	; 1
     656:	e5 ef       	ldi	r30, 0xF5	; 245
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	a3 ed       	ldi	r26, 0xD3	; 211
     65c:	b1 e0       	ldi	r27, 0x01	; 1
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	9b 01       	movw	r18, r22
     668:	08 2e       	mov	r0, r24
     66a:	02 c0       	rjmp	.+4      	; 0x670 <setDuty+0x96>
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <setDuty+0x92>
     674:	24 23       	and	r18, r20
     676:	35 23       	and	r19, r21
     678:	23 2b       	or	r18, r19
     67a:	19 f0       	breq	.+6      	; 0x682 <setDuty+0xa8>
			m[i] = dutyH[i];
     67c:	28 81       	ld	r18, Y
     67e:	39 81       	ldd	r19, Y+1	; 0x01
     680:	03 c0       	rjmp	.+6      	; 0x688 <setDuty+0xae>
		else
			m[i] = dutyL[i];
     682:	2d 91       	ld	r18, X+
     684:	3c 91       	ld	r19, X
     686:	11 97       	sbiw	r26, 0x01	; 1
     688:	31 83       	std	Z+1, r19	; 0x01
     68a:	20 83       	st	Z, r18
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	22 96       	adiw	r28, 0x02	; 2
     690:	32 96       	adiw	r30, 0x02	; 2
     692:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     694:	80 31       	cpi	r24, 0x10	; 16
     696:	91 05       	cpc	r25, r1
     698:	31 f7       	brne	.-52     	; 0x666 <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	08 95       	ret

000006a6 <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	c4 56       	subi	r28, 0x64	; 100
     6de:	d1 09       	sbc	r29, r1
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     6e4:	80 91 47 01 	lds	r24, 0x0147
     6e8:	90 91 48 01 	lds	r25, 0x0148
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	90 93 48 01 	sts	0x0148, r25
     6f2:	80 93 47 01 	sts	0x0147, r24
	if (t > F_CPU / 256 / 1024) {
     6f6:	ce 97       	sbiw	r24, 0x3e	; 62
     6f8:	08 f4       	brcc	.+2      	; 0x6fc <__vector_9+0x56>
     6fa:	9b c0       	rjmp	.+310    	; 0x832 <__vector_9+0x18c>
		g_seconds++;
     6fc:	80 91 49 01 	lds	r24, 0x0149
     700:	90 91 4a 01 	lds	r25, 0x014A
     704:	a0 91 4b 01 	lds	r26, 0x014B
     708:	b0 91 4c 01 	lds	r27, 0x014C
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	a1 1d       	adc	r26, r1
     710:	b1 1d       	adc	r27, r1
     712:	80 93 49 01 	sts	0x0149, r24
     716:	90 93 4a 01 	sts	0x014A, r25
     71a:	a0 93 4b 01 	sts	0x014B, r26
     71e:	b0 93 4c 01 	sts	0x014C, r27

		t = 0;
     722:	10 92 48 01 	sts	0x0148, r1
     726:	10 92 47 01 	sts	0x0147, r1
		seconds++;
     72a:	80 91 45 01 	lds	r24, 0x0145
     72e:	90 91 46 01 	lds	r25, 0x0146
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	90 93 46 01 	sts	0x0146, r25
     738:	80 93 45 01 	sts	0x0145, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     73c:	80 91 60 00 	lds	r24, 0x0060
     740:	90 91 61 00 	lds	r25, 0x0061
     744:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     748:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     74a:	80 91 60 00 	lds	r24, 0x0060
     74e:	90 91 61 00 	lds	r25, 0x0061
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
		g_seconds++;

		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     758:	21 2f       	mov	r18, r17
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	32 2f       	mov	r19, r18
     75e:	22 27       	eor	r18, r18
	if (t > F_CPU / 256 / 1024) {
		g_seconds++;

		t = 0;
		seconds++;
		time =
     760:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     762:	2f 3f       	cpi	r18, 0xFF	; 255
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	38 07       	cpc	r19, r24
     768:	09 f4       	brne	.+2      	; 0x76c <__vector_9+0xc6>
     76a:	63 c0       	rjmp	.+198    	; 0x832 <__vector_9+0x18c>
			if (seconds >= time) {
     76c:	80 91 45 01 	lds	r24, 0x0145
     770:	90 91 46 01 	lds	r25, 0x0146
     774:	82 17       	cp	r24, r18
     776:	93 07       	cpc	r25, r19
     778:	08 f4       	brcc	.+2      	; 0x77c <__vector_9+0xd6>
     77a:	5b c0       	rjmp	.+182    	; 0x832 <__vector_9+0x18c>
				p -= 2;
     77c:	80 91 60 00 	lds	r24, 0x0060
     780:	90 91 61 00 	lds	r25, 0x0061
     784:	02 97       	sbiw	r24, 0x02	; 2
     786:	90 93 61 00 	sts	0x0061, r25
     78a:	80 93 60 00 	sts	0x0060, r24
     78e:	fe 01       	movw	r30, r28
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	7f 01       	movw	r14, r30
     794:	8f 01       	movw	r16, r30
     796:	67 01       	movw	r12, r14
     798:	c0 1a       	sub	r12, r16
     79a:	d1 0a       	sbc	r13, r17
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     79c:	80 91 60 00 	lds	r24, 0x0060
     7a0:	90 91 61 00 	lds	r25, 0x0061
     7a4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     7a8:	f7 01       	movw	r30, r14
     7aa:	81 93       	st	Z+, r24
     7ac:	7f 01       	movw	r14, r30
     7ae:	20 91 60 00 	lds	r18, 0x0060
     7b2:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     7b6:	8a 30       	cpi	r24, 0x0A	; 10
     7b8:	99 f5       	brne	.+102    	; 0x820 <__vector_9+0x17a>
					    cmd[i + 1] = 0;
     7ba:	fe 01       	movw	r30, r28
     7bc:	ec 0d       	add	r30, r12
     7be:	fd 1d       	adc	r31, r13
     7c0:	12 82       	std	Z+2, r1	; 0x02
						p--;
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	31 09       	sbc	r19, r1
     7c6:	30 93 61 00 	sts	0x0061, r19
     7ca:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				printf("time:%ld\n", g_seconds);
     7ce:	80 91 4c 01 	lds	r24, 0x014C
     7d2:	8f 93       	push	r24
     7d4:	80 91 4b 01 	lds	r24, 0x014B
     7d8:	8f 93       	push	r24
     7da:	80 91 4a 01 	lds	r24, 0x014A
     7de:	8f 93       	push	r24
     7e0:	80 91 49 01 	lds	r24, 0x0149
     7e4:	8f 93       	push	r24
     7e6:	8e ef       	ldi	r24, 0xFE	; 254
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <printf>
				printf("Auto running command:");
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <printf>
				printf(cmd);
     7fe:	1f 93       	push	r17
     800:	0f 93       	push	r16
     802:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <printf>
				runCmd(cmd);
     806:	c8 01       	movw	r24, r16
     808:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
				seconds = 0;
     80c:	10 92 46 01 	sts	0x0146, r1
     810:	10 92 45 01 	sts	0x0145, r1
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	09 c0       	rjmp	.+18     	; 0x832 <__vector_9+0x18c>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     820:	83 31       	cpi	r24, 0x13	; 19
     822:	59 f2       	breq	.-106    	; 0x7ba <__vector_9+0x114>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     824:	21 50       	subi	r18, 0x01	; 1
     826:	31 09       	sbc	r19, r1
     828:	30 93 61 00 	sts	0x0061, r19
     82c:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     830:	b2 cf       	rjmp	.-156    	; 0x796 <__vector_9+0xf0>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     832:	cc 59       	subi	r28, 0x9C	; 156
     834:	df 4f       	sbci	r29, 0xFF	; 255
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	0f 90       	pop	r0
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	0f 90       	pop	r0
     86e:	1f 90       	pop	r1
     870:	18 95       	reti

00000872 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	0f 92       	push	r0
     87a:	11 24       	eor	r1, r1
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     89c:	80 91 43 01 	lds	r24, 0x0143
     8a0:	90 91 44 01 	lds	r25, 0x0144
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	90 93 44 01 	sts	0x0144, r25
     8aa:	80 93 43 01 	sts	0x0143, r24
	if (t > F_CPU / 256 / 1024) {
     8ae:	ce 97       	sbiw	r24, 0x3e	; 62
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <__vector_4+0x42>
     8b2:	61 c0       	rjmp	.+194    	; 0x976 <__vector_4+0x104>
		t = 0;
     8b4:	10 92 44 01 	sts	0x0144, r1
     8b8:	10 92 43 01 	sts	0x0143, r1
		sec++;
     8bc:	80 91 42 01 	lds	r24, 0x0142
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 42 01 	sts	0x0142, r24
		if (sec >= 60) {
     8c6:	8c 33       	cpi	r24, 0x3C	; 60
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <__vector_4+0x5a>
     8ca:	55 c0       	rjmp	.+170    	; 0x976 <__vector_4+0x104>
			sec = 0;
     8cc:	10 92 42 01 	sts	0x0142, r1
     8d0:	e5 ef       	ldi	r30, 0xF5	; 245
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	c3 ed       	ldi	r28, 0xD3	; 211
     8d6:	d1 e0       	ldi	r29, 0x01	; 1
     8d8:	a3 eb       	ldi	r26, 0xB3	; 179
     8da:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     8e4:	40 81       	ld	r20, Z
     8e6:	51 81       	ldd	r21, Z+1	; 0x01
     8e8:	41 15       	cp	r20, r1
     8ea:	51 05       	cpc	r21, r1
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__vector_4+0x86>
					m[i]--;
     8ee:	41 50       	subi	r20, 0x01	; 1
     8f0:	51 09       	sbc	r21, r1
     8f2:	51 83       	std	Z+1, r21	; 0x01
     8f4:	40 83       	st	Z, r20
     8f6:	37 c0       	rjmp	.+110    	; 0x966 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     8f8:	88 30       	cpi	r24, 0x08	; 8
     8fa:	91 05       	cpc	r25, r1
     8fc:	50 f4       	brcc	.+20     	; 0x912 <__vector_4+0xa0>
						PORTA ^= 1 << i;
     8fe:	6b b3       	in	r22, 0x1b	; 27
     900:	a9 01       	movw	r20, r18
     902:	08 2e       	mov	r0, r24
     904:	01 c0       	rjmp	.+2      	; 0x908 <__vector_4+0x96>
     906:	44 0f       	add	r20, r20
     908:	0a 94       	dec	r0
     90a:	ea f7       	brpl	.-6      	; 0x906 <__vector_4+0x94>
     90c:	64 27       	eor	r22, r20
     90e:	6b bb       	out	0x1b, r22	; 27
     910:	0c c0       	rjmp	.+24     	; 0x92a <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     912:	65 b3       	in	r22, 0x15	; 21
     914:	ac 01       	movw	r20, r24
     916:	48 50       	subi	r20, 0x08	; 8
     918:	51 09       	sbc	r21, r1
     91a:	89 01       	movw	r16, r18
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__vector_4+0xb0>
     91e:	00 0f       	add	r16, r16
     920:	11 1f       	adc	r17, r17
     922:	4a 95       	dec	r20
     924:	e2 f7       	brpl	.-8      	; 0x91e <__vector_4+0xac>
     926:	60 27       	eor	r22, r16
     928:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     92a:	60 91 f3 01 	lds	r22, 0x01F3
     92e:	70 91 f4 01 	lds	r23, 0x01F4
     932:	a9 01       	movw	r20, r18
     934:	08 2e       	mov	r0, r24
     936:	02 c0       	rjmp	.+4      	; 0x93c <__vector_4+0xca>
     938:	44 0f       	add	r20, r20
     93a:	55 1f       	adc	r21, r21
     93c:	0a 94       	dec	r0
     93e:	e2 f7       	brpl	.-8      	; 0x938 <__vector_4+0xc6>
     940:	8a 01       	movw	r16, r20
     942:	06 23       	and	r16, r22
     944:	17 23       	and	r17, r23
     946:	01 2b       	or	r16, r17
     948:	19 f0       	breq	.+6      	; 0x950 <__vector_4+0xde>
						m[i] = dutyL[i];
     94a:	08 81       	ld	r16, Y
     94c:	19 81       	ldd	r17, Y+1	; 0x01
     94e:	03 c0       	rjmp	.+6      	; 0x956 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     950:	0d 91       	ld	r16, X+
     952:	1c 91       	ld	r17, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	11 83       	std	Z+1, r17	; 0x01
     958:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     95a:	46 27       	eor	r20, r22
     95c:	57 27       	eor	r21, r23
     95e:	50 93 f4 01 	sts	0x01F4, r21
     962:	40 93 f3 01 	sts	0x01F3, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	32 96       	adiw	r30, 0x02	; 2
     96a:	22 96       	adiw	r28, 0x02	; 2
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	80 31       	cpi	r24, 0x10	; 16
     970:	91 05       	cpc	r25, r1
     972:	09 f0       	breq	.+2      	; 0x976 <__vector_4+0x104>
     974:	b7 cf       	rjmp	.-146    	; 0x8e4 <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_11>:

ISR(USART_RXC_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
     9d6:	c4 56       	subi	r28, 0x64	; 100
     9d8:	d1 09       	sbc	r29, r1
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	7c 01       	movw	r14, r24
     9e4:	00 e0       	ldi	r16, 0x00	; 0
     9e6:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     9e8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <receiveUSART>
     9ec:	f7 01       	movw	r30, r14
     9ee:	81 93       	st	Z+, r24
     9f0:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     9f2:	83 31       	cpi	r24, 0x13	; 19
     9f4:	41 f4       	brne	.+16     	; 0xa06 <__vector_11+0x66>
			codeUSART[i] = '\0';
     9f6:	e1 e0       	ldi	r30, 0x01	; 1
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	ec 0f       	add	r30, r28
     9fc:	fd 1f       	adc	r31, r29
     9fe:	e0 0f       	add	r30, r16
     a00:	f1 1f       	adc	r31, r17
     a02:	10 82       	st	Z, r1
			break;
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     a06:	8a 30       	cpi	r24, 0x0A	; 10
     a08:	b1 f3       	breq	.-20     	; 0x9f6 <__vector_11+0x56>
     a0a:	0f 5f       	subi	r16, 0xFF	; 255
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     a0e:	04 36       	cpi	r16, 0x64	; 100
     a10:	11 05       	cpc	r17, r1
     a12:	51 f7       	brne	.-44     	; 0x9e8 <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	88 23       	and	r24, r24
     a18:	e1 f0       	breq	.+56     	; 0xa52 <__vector_11+0xb2>
		printf("\nReceived:\n");
     a1a:	8e e1       	ldi	r24, 0x1E	; 30
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <puts>
     a22:	6e 01       	movw	r12, r28
     a24:	f5 e6       	ldi	r31, 0x65	; 101
     a26:	cf 0e       	add	r12, r31
     a28:	d1 1c       	adc	r13, r1
     a2a:	8e 01       	movw	r16, r28
     a2c:	0f 5f       	subi	r16, 0xFF	; 255
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     a32:	f8 01       	movw	r30, r16
     a34:	81 91       	ld	r24, Z+
     a36:	8f 01       	movw	r16, r30
     a38:	0e 94 c8 05 	call	0xb90	; 0xb90 <sendUSART>
			if (codeUSART[i] == '\0')
     a3c:	f7 01       	movw	r30, r14
     a3e:	80 81       	ld	r24, Z
     a40:	88 23       	and	r24, r24
     a42:	19 f0       	breq	.+6      	; 0xa4a <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		printf("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     a44:	0c 15       	cp	r16, r12
     a46:	1d 05       	cpc	r17, r13
     a48:	99 f7       	brne	.-26     	; 0xa30 <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		printf("\n");
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 f5 05 	call	0xbea	; 0xbea <putchar>
	}

	runCmd(codeUSART);
     a52:	ce 01       	movw	r24, r28
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
}
     a5a:	cc 59       	subi	r28, 0x9C	; 156
     a5c:	df 4f       	sbci	r29, 0xFF	; 255
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <main>:

int main()
{
	uint8_t i;

	cli();
     a9a:	f8 94       	cli

	wdt_enable(WDTO_60MS);
     a9c:	2a e0       	ldi	r18, 0x0A	; 10
     a9e:	88 e1       	ldi	r24, 0x18	; 24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	a8 95       	wdr
     aa8:	81 bd       	out	0x21, r24	; 33
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	21 bd       	out	0x21, r18	; 33
     aae:	c0 e0       	ldi	r28, 0x00	; 0
     ab0:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     ab2:	8b b3       	in	r24, 0x1b	; 27
     ab4:	86 95       	lsr	r24
     ab6:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     ab8:	1b b3       	in	r17, 0x1b	; 27
     aba:	ce 01       	movw	r24, r28
     abc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     ac0:	20 e8       	ldi	r18, 0x80	; 128
     ac2:	82 9f       	mul	r24, r18
     ac4:	c0 01       	movw	r24, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	81 2b       	or	r24, r17
     aca:	8b bb       	out	0x1b, r24	; 27
     acc:	21 96       	adiw	r28, 0x01	; 1

	cli();

	wdt_enable(WDTO_60MS);

	for (i = 0; i < 8; i++) {
     ace:	c8 30       	cpi	r28, 0x08	; 8
     ad0:	d1 05       	cpc	r29, r1
     ad2:	79 f7       	brne	.-34     	; 0xab2 <main+0x18>
     ad4:	c8 e0       	ldi	r28, 0x08	; 8
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     ad8:	85 b3       	in	r24, 0x15	; 21
     ada:	86 95       	lsr	r24
     adc:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     ade:	15 b3       	in	r17, 0x15	; 21
     ae0:	ce 01       	movw	r24, r28
     ae2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     ae6:	20 e8       	ldi	r18, 0x80	; 128
     ae8:	82 9f       	mul	r24, r18
     aea:	c0 01       	movw	r24, r0
     aec:	11 24       	eor	r1, r1
     aee:	81 2b       	or	r24, r17
     af0:	85 bb       	out	0x15, r24	; 21
     af2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     af4:	c0 31       	cpi	r28, 0x10	; 16
     af6:	d1 05       	cpc	r29, r1
     af8:	79 f7       	brne	.-34     	; 0xad8 <main+0x3e>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	DDRA = 0xff;
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     afe:	84 bb       	out	0x14, r24	; 20

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	90 93 b2 01 	sts	0x01B2, r25
     b08:	80 93 b1 01 	sts	0x01B1, r24
     b0c:	80 91 b1 01 	lds	r24, 0x01B1
     b10:	90 91 b2 01 	lds	r25, 0x01B2
     b14:	0e 94 e6 02 	call	0x5cc	; 0x5cc <readEEPROM>
     b18:	8f 3f       	cpi	r24, 0xFF	; 255
     b1a:	31 f0       	breq	.+12     	; 0xb28 <main+0x8e>
     b1c:	80 91 b1 01 	lds	r24, 0x01B1
     b20:	90 91 b2 01 	lds	r25, 0x01B2
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	ee cf       	rjmp	.-36     	; 0xb04 <main+0x6a>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     b28:	25 b3       	in	r18, 0x15	; 21
     b2a:	8b b3       	in	r24, 0x1b	; 27
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	92 2b       	or	r25, r18
     b30:	90 93 f4 01 	sts	0x01F4, r25
     b34:	80 93 f3 01 	sts	0x01F3, r24

	initUSART();
     b38:	0e 94 b9 05 	call	0xb72	; 0xb72 <initUSART>

	setDuty();
     b3c:	0e 94 ed 02 	call	0x5da	; 0x5da <setDuty>

	initTimer0();
     b40:	0e 94 ab 05 	call	0xb56	; 0xb56 <initTimer0>

	initTimer2();
     b44:	0e 94 b2 05 	call	0xb64	; 0xb64 <initTimer2>

	sei();
     b48:	78 94       	sei

	printf("\nEntering the main loop\n");
     b4a:	89 e2       	ldi	r24, 0x29	; 41
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <puts>
	while (1) {
		wdt_reset();
     b52:	a8 95       	wdr
     b54:	fe cf       	rjmp	.-4      	; 0xb52 <main+0xb8>

00000b56 <initTimer0>:

unsigned long g_seconds = 0;

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     b56:	85 e0       	ldi	r24, 0x05	; 5
     b58:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     b5a:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     b5c:	89 b7       	in	r24, 0x39	; 57
     b5e:	81 60       	ori	r24, 0x01	; 1
     b60:	89 bf       	out	0x39, r24	; 57
     b62:	08 95       	ret

00000b64 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     b64:	87 e0       	ldi	r24, 0x07	; 7
     b66:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     b68:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     b6a:	89 b7       	in	r24, 0x39	; 57
     b6c:	80 64       	ori	r24, 0x40	; 64
     b6e:	89 bf       	out	0x39, r24	; 57
     b70:	08 95       	ret

00000b72 <initUSART>:

static FILE mystdout = FDEV_SETUP_STREAM(myfputc, NULL,_FDEV_SETUP_WRITE);

void initUSART()
{
	UCSRA |= (1 << U2X);
     b72:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     b74:	10 bc       	out	0x20, r1	; 32
	UBRRL = 207;		// 9600Hz on 16MHz F_CPU
     b76:	8f ec       	ldi	r24, 0xCF	; 207
     b78:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     b7a:	88 e9       	ldi	r24, 0x98	; 152
     b7c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     b7e:	86 e8       	ldi	r24, 0x86	; 134
     b80:	80 bd       	out	0x20, r24	; 32

	stdout = &mystdout;
     b82:	82 e6       	ldi	r24, 0x62	; 98
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 18 02 	sts	0x0218, r25
     b8a:	80 93 17 02 	sts	0x0217, r24
     b8e:	08 95       	ret

00000b90 <sendUSART>:
}

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE)))
     b90:	5d 99       	sbic	0x0b, 5	; 11
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <sendUSART+0x8>
		wdt_reset();
     b94:	a8 95       	wdr
     b96:	fc cf       	rjmp	.-8      	; 0xb90 <sendUSART>
	UDR = data;
     b98:	8c b9       	out	0x0c, r24	; 12
     b9a:	08 95       	ret

00000b9c <myfputc>:
		wdt_reset();
	return UDR;
}

char myfputc(char ch, FILE *f)
{
     b9c:	cf 93       	push	r28
     b9e:	c8 2f       	mov	r28, r24
	sendUSART(ch);
     ba0:	0e 94 c8 05 	call	0xb90	; 0xb90 <sendUSART>
	return ch;
}
     ba4:	8c 2f       	mov	r24, r28
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <receiveUSART>:
	UDR = data;
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC)))
     baa:	5f 99       	sbic	0x0b, 7	; 11
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <receiveUSART+0x8>
		wdt_reset();
     bae:	a8 95       	wdr
     bb0:	fc cf       	rjmp	.-8      	; 0xbaa <receiveUSART>
	return UDR;
     bb2:	8c b1       	in	r24, 0x0c	; 12
}
     bb4:	08 95       	ret

00000bb6 <__tablejump2__>:
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31

00000bba <__tablejump__>:
     bba:	05 90       	lpm	r0, Z+
     bbc:	f4 91       	lpm	r31, Z
     bbe:	e0 2d       	mov	r30, r0
     bc0:	09 94       	ijmp

00000bc2 <printf>:
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 ee       	ldi	r30, 0xE7	; 231
     bc8:	f5 e0       	ldi	r31, 0x05	; 5
     bca:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__prologue_saves__+0x20>
     bce:	fe 01       	movw	r30, r28
     bd0:	35 96       	adiw	r30, 0x05	; 5
     bd2:	61 91       	ld	r22, Z+
     bd4:	71 91       	ld	r23, Z+
     bd6:	af 01       	movw	r20, r30
     bd8:	80 91 17 02 	lds	r24, 0x0217
     bdc:	90 91 18 02 	lds	r25, 0x0218
     be0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <vfprintf>
     be4:	e2 e0       	ldi	r30, 0x02	; 2
     be6:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x20>

00000bea <putchar>:
     bea:	60 91 17 02 	lds	r22, 0x0217
     bee:	70 91 18 02 	lds	r23, 0x0218
     bf2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     bf6:	08 95       	ret

00000bf8 <puts>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	e0 91 17 02 	lds	r30, 0x0217
     c04:	f0 91 18 02 	lds	r31, 0x0218
     c08:	23 81       	ldd	r18, Z+3	; 0x03
     c0a:	21 ff       	sbrs	r18, 1
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <puts+0x4c>
     c0e:	ec 01       	movw	r28, r24
     c10:	00 e0       	ldi	r16, 0x00	; 0
     c12:	10 e0       	ldi	r17, 0x00	; 0
     c14:	89 91       	ld	r24, Y+
     c16:	60 91 17 02 	lds	r22, 0x0217
     c1a:	70 91 18 02 	lds	r23, 0x0218
     c1e:	db 01       	movw	r26, r22
     c20:	18 96       	adiw	r26, 0x08	; 8
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	19 97       	sbiw	r26, 0x09	; 9
     c28:	88 23       	and	r24, r24
     c2a:	31 f0       	breq	.+12     	; 0xc38 <puts+0x40>
     c2c:	09 95       	icall
     c2e:	89 2b       	or	r24, r25
     c30:	89 f3       	breq	.-30     	; 0xc14 <puts+0x1c>
     c32:	0f ef       	ldi	r16, 0xFF	; 255
     c34:	1f ef       	ldi	r17, 0xFF	; 255
     c36:	ee cf       	rjmp	.-36     	; 0xc14 <puts+0x1c>
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	09 95       	icall
     c3c:	89 2b       	or	r24, r25
     c3e:	11 f4       	brne	.+4      	; 0xc44 <puts+0x4c>
     c40:	c8 01       	movw	r24, r16
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <puts+0x50>
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <sprintf>:
     c52:	ae e0       	ldi	r26, 0x0E	; 14
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ef e2       	ldi	r30, 0x2F	; 47
     c58:	f6 e0       	ldi	r31, 0x06	; 6
     c5a:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__prologue_saves__+0x1c>
     c5e:	0d 89       	ldd	r16, Y+21	; 0x15
     c60:	1e 89       	ldd	r17, Y+22	; 0x16
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	8c 83       	std	Y+4, r24	; 0x04
     c66:	1a 83       	std	Y+2, r17	; 0x02
     c68:	09 83       	std	Y+1, r16	; 0x01
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	9f e7       	ldi	r25, 0x7F	; 127
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	ae 01       	movw	r20, r28
     c74:	47 5e       	subi	r20, 0xE7	; 231
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	6f 89       	ldd	r22, Y+23	; 0x17
     c7a:	78 8d       	ldd	r23, Y+24	; 0x18
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 64 06 	call	0xcc8	; 0xcc8 <vfprintf>
     c84:	ef 81       	ldd	r30, Y+7	; 0x07
     c86:	f8 85       	ldd	r31, Y+8	; 0x08
     c88:	e0 0f       	add	r30, r16
     c8a:	f1 1f       	adc	r31, r17
     c8c:	10 82       	st	Z, r1
     c8e:	2e 96       	adiw	r28, 0x0e	; 14
     c90:	e4 e0       	ldi	r30, 0x04	; 4
     c92:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__epilogue_restores__+0x1c>

00000c96 <sscanf>:
     c96:	ae e0       	ldi	r26, 0x0E	; 14
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e1 e5       	ldi	r30, 0x51	; 81
     c9c:	f6 e0       	ldi	r31, 0x06	; 6
     c9e:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__prologue_saves__+0x20>
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	8c 83       	std	Y+4, r24	; 0x04
     ca6:	8b 89       	ldd	r24, Y+19	; 0x13
     ca8:	9c 89       	ldd	r25, Y+20	; 0x14
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	ae 01       	movw	r20, r28
     cb0:	49 5e       	subi	r20, 0xE9	; 233
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	6d 89       	ldd	r22, Y+21	; 0x15
     cb6:	7e 89       	ldd	r23, Y+22	; 0x16
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	0e 94 b4 09 	call	0x1368	; 0x1368 <vfscanf>
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	e2 e0       	ldi	r30, 0x02	; 2
     cc4:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__epilogue_restores__+0x20>

00000cc8 <vfprintf>:
     cc8:	ac e0       	ldi	r26, 0x0C	; 12
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e6       	ldi	r30, 0x6A	; 106
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__prologue_saves__>
     cd4:	7c 01       	movw	r14, r24
     cd6:	6b 01       	movw	r12, r22
     cd8:	8a 01       	movw	r16, r20
     cda:	fc 01       	movw	r30, r24
     cdc:	17 82       	std	Z+7, r1	; 0x07
     cde:	16 82       	std	Z+6, r1	; 0x06
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	81 ff       	sbrs	r24, 1
     ce4:	bd c1       	rjmp	.+890    	; 0x1060 <vfprintf+0x398>
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	4c 01       	movw	r8, r24
     cec:	f7 01       	movw	r30, r14
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	f6 01       	movw	r30, r12
     cf2:	93 fd       	sbrc	r25, 3
     cf4:	85 91       	lpm	r24, Z+
     cf6:	93 ff       	sbrs	r25, 3
     cf8:	81 91       	ld	r24, Z+
     cfa:	6f 01       	movw	r12, r30
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <vfprintf+0x3a>
     d00:	ab c1       	rjmp	.+854    	; 0x1058 <vfprintf+0x390>
     d02:	85 32       	cpi	r24, 0x25	; 37
     d04:	39 f4       	brne	.+14     	; 0xd14 <vfprintf+0x4c>
     d06:	93 fd       	sbrc	r25, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	93 ff       	sbrs	r25, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	6f 01       	movw	r12, r30
     d10:	85 32       	cpi	r24, 0x25	; 37
     d12:	29 f4       	brne	.+10     	; 0xd1e <vfprintf+0x56>
     d14:	b7 01       	movw	r22, r14
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     d1c:	e7 cf       	rjmp	.-50     	; 0xcec <vfprintf+0x24>
     d1e:	51 2c       	mov	r5, r1
     d20:	31 2c       	mov	r3, r1
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	20 32       	cpi	r18, 0x20	; 32
     d26:	a0 f4       	brcc	.+40     	; 0xd50 <vfprintf+0x88>
     d28:	8b 32       	cpi	r24, 0x2B	; 43
     d2a:	69 f0       	breq	.+26     	; 0xd46 <vfprintf+0x7e>
     d2c:	30 f4       	brcc	.+12     	; 0xd3a <vfprintf+0x72>
     d2e:	80 32       	cpi	r24, 0x20	; 32
     d30:	59 f0       	breq	.+22     	; 0xd48 <vfprintf+0x80>
     d32:	83 32       	cpi	r24, 0x23	; 35
     d34:	69 f4       	brne	.+26     	; 0xd50 <vfprintf+0x88>
     d36:	20 61       	ori	r18, 0x10	; 16
     d38:	2c c0       	rjmp	.+88     	; 0xd92 <vfprintf+0xca>
     d3a:	8d 32       	cpi	r24, 0x2D	; 45
     d3c:	39 f0       	breq	.+14     	; 0xd4c <vfprintf+0x84>
     d3e:	80 33       	cpi	r24, 0x30	; 48
     d40:	39 f4       	brne	.+14     	; 0xd50 <vfprintf+0x88>
     d42:	21 60       	ori	r18, 0x01	; 1
     d44:	26 c0       	rjmp	.+76     	; 0xd92 <vfprintf+0xca>
     d46:	22 60       	ori	r18, 0x02	; 2
     d48:	24 60       	ori	r18, 0x04	; 4
     d4a:	23 c0       	rjmp	.+70     	; 0xd92 <vfprintf+0xca>
     d4c:	28 60       	ori	r18, 0x08	; 8
     d4e:	21 c0       	rjmp	.+66     	; 0xd92 <vfprintf+0xca>
     d50:	27 fd       	sbrc	r18, 7
     d52:	27 c0       	rjmp	.+78     	; 0xda2 <vfprintf+0xda>
     d54:	30 ed       	ldi	r19, 0xD0	; 208
     d56:	38 0f       	add	r19, r24
     d58:	3a 30       	cpi	r19, 0x0A	; 10
     d5a:	78 f4       	brcc	.+30     	; 0xd7a <vfprintf+0xb2>
     d5c:	26 ff       	sbrs	r18, 6
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <vfprintf+0xa4>
     d60:	fa e0       	ldi	r31, 0x0A	; 10
     d62:	5f 9e       	mul	r5, r31
     d64:	30 0d       	add	r19, r0
     d66:	11 24       	eor	r1, r1
     d68:	53 2e       	mov	r5, r19
     d6a:	13 c0       	rjmp	.+38     	; 0xd92 <vfprintf+0xca>
     d6c:	8a e0       	ldi	r24, 0x0A	; 10
     d6e:	38 9e       	mul	r3, r24
     d70:	30 0d       	add	r19, r0
     d72:	11 24       	eor	r1, r1
     d74:	33 2e       	mov	r3, r19
     d76:	20 62       	ori	r18, 0x20	; 32
     d78:	0c c0       	rjmp	.+24     	; 0xd92 <vfprintf+0xca>
     d7a:	8e 32       	cpi	r24, 0x2E	; 46
     d7c:	21 f4       	brne	.+8      	; 0xd86 <vfprintf+0xbe>
     d7e:	26 fd       	sbrc	r18, 6
     d80:	6b c1       	rjmp	.+726    	; 0x1058 <vfprintf+0x390>
     d82:	20 64       	ori	r18, 0x40	; 64
     d84:	06 c0       	rjmp	.+12     	; 0xd92 <vfprintf+0xca>
     d86:	8c 36       	cpi	r24, 0x6C	; 108
     d88:	11 f4       	brne	.+4      	; 0xd8e <vfprintf+0xc6>
     d8a:	20 68       	ori	r18, 0x80	; 128
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0xca>
     d8e:	88 36       	cpi	r24, 0x68	; 104
     d90:	41 f4       	brne	.+16     	; 0xda2 <vfprintf+0xda>
     d92:	f6 01       	movw	r30, r12
     d94:	93 fd       	sbrc	r25, 3
     d96:	85 91       	lpm	r24, Z+
     d98:	93 ff       	sbrs	r25, 3
     d9a:	81 91       	ld	r24, Z+
     d9c:	6f 01       	movw	r12, r30
     d9e:	81 11       	cpse	r24, r1
     da0:	c1 cf       	rjmp	.-126    	; 0xd24 <vfprintf+0x5c>
     da2:	98 2f       	mov	r25, r24
     da4:	9f 7d       	andi	r25, 0xDF	; 223
     da6:	95 54       	subi	r25, 0x45	; 69
     da8:	93 30       	cpi	r25, 0x03	; 3
     daa:	28 f4       	brcc	.+10     	; 0xdb6 <vfprintf+0xee>
     dac:	0c 5f       	subi	r16, 0xFC	; 252
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	ff e3       	ldi	r31, 0x3F	; 63
     db2:	f9 83       	std	Y+1, r31	; 0x01
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <vfprintf+0x108>
     db6:	83 36       	cpi	r24, 0x63	; 99
     db8:	31 f0       	breq	.+12     	; 0xdc6 <vfprintf+0xfe>
     dba:	83 37       	cpi	r24, 0x73	; 115
     dbc:	71 f0       	breq	.+28     	; 0xdda <vfprintf+0x112>
     dbe:	83 35       	cpi	r24, 0x53	; 83
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <vfprintf+0xfc>
     dc2:	5b c0       	rjmp	.+182    	; 0xe7a <vfprintf+0x1b2>
     dc4:	22 c0       	rjmp	.+68     	; 0xe0a <vfprintf+0x142>
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 81       	ld	r24, Z
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	0e 5f       	subi	r16, 0xFE	; 254
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	44 24       	eor	r4, r4
     dd2:	43 94       	inc	r4
     dd4:	51 2c       	mov	r5, r1
     dd6:	54 01       	movw	r10, r8
     dd8:	15 c0       	rjmp	.+42     	; 0xe04 <vfprintf+0x13c>
     dda:	38 01       	movw	r6, r16
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	6f 0e       	add	r6, r31
     de0:	71 1c       	adc	r7, r1
     de2:	f8 01       	movw	r30, r16
     de4:	a0 80       	ld	r10, Z
     de6:	b1 80       	ldd	r11, Z+1	; 0x01
     de8:	26 ff       	sbrs	r18, 6
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x12a>
     dec:	65 2d       	mov	r22, r5
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0x12e>
     df2:	6f ef       	ldi	r22, 0xFF	; 255
     df4:	7f ef       	ldi	r23, 0xFF	; 255
     df6:	c5 01       	movw	r24, r10
     df8:	2c 87       	std	Y+12, r18	; 0x0c
     dfa:	0e 94 09 0b 	call	0x1612	; 0x1612 <strnlen>
     dfe:	2c 01       	movw	r4, r24
     e00:	83 01       	movw	r16, r6
     e02:	2c 85       	ldd	r18, Y+12	; 0x0c
     e04:	2f 77       	andi	r18, 0x7F	; 127
     e06:	22 2e       	mov	r2, r18
     e08:	17 c0       	rjmp	.+46     	; 0xe38 <vfprintf+0x170>
     e0a:	38 01       	movw	r6, r16
     e0c:	f2 e0       	ldi	r31, 0x02	; 2
     e0e:	6f 0e       	add	r6, r31
     e10:	71 1c       	adc	r7, r1
     e12:	f8 01       	movw	r30, r16
     e14:	a0 80       	ld	r10, Z
     e16:	b1 80       	ldd	r11, Z+1	; 0x01
     e18:	26 ff       	sbrs	r18, 6
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <vfprintf+0x15a>
     e1c:	65 2d       	mov	r22, r5
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x15e>
     e22:	6f ef       	ldi	r22, 0xFF	; 255
     e24:	7f ef       	ldi	r23, 0xFF	; 255
     e26:	c5 01       	movw	r24, r10
     e28:	2c 87       	std	Y+12, r18	; 0x0c
     e2a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <strnlen_P>
     e2e:	2c 01       	movw	r4, r24
     e30:	2c 85       	ldd	r18, Y+12	; 0x0c
     e32:	20 68       	ori	r18, 0x80	; 128
     e34:	22 2e       	mov	r2, r18
     e36:	83 01       	movw	r16, r6
     e38:	23 fc       	sbrc	r2, 3
     e3a:	1b c0       	rjmp	.+54     	; 0xe72 <vfprintf+0x1aa>
     e3c:	83 2d       	mov	r24, r3
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	48 16       	cp	r4, r24
     e42:	59 06       	cpc	r5, r25
     e44:	b0 f4       	brcc	.+44     	; 0xe72 <vfprintf+0x1aa>
     e46:	b7 01       	movw	r22, r14
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     e50:	3a 94       	dec	r3
     e52:	f4 cf       	rjmp	.-24     	; 0xe3c <vfprintf+0x174>
     e54:	f5 01       	movw	r30, r10
     e56:	27 fc       	sbrc	r2, 7
     e58:	85 91       	lpm	r24, Z+
     e5a:	27 fe       	sbrs	r2, 7
     e5c:	81 91       	ld	r24, Z+
     e5e:	5f 01       	movw	r10, r30
     e60:	b7 01       	movw	r22, r14
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     e68:	31 10       	cpse	r3, r1
     e6a:	3a 94       	dec	r3
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	4f 1a       	sub	r4, r31
     e70:	51 08       	sbc	r5, r1
     e72:	41 14       	cp	r4, r1
     e74:	51 04       	cpc	r5, r1
     e76:	71 f7       	brne	.-36     	; 0xe54 <vfprintf+0x18c>
     e78:	e5 c0       	rjmp	.+458    	; 0x1044 <vfprintf+0x37c>
     e7a:	84 36       	cpi	r24, 0x64	; 100
     e7c:	11 f0       	breq	.+4      	; 0xe82 <vfprintf+0x1ba>
     e7e:	89 36       	cpi	r24, 0x69	; 105
     e80:	39 f5       	brne	.+78     	; 0xed0 <vfprintf+0x208>
     e82:	f8 01       	movw	r30, r16
     e84:	27 ff       	sbrs	r18, 7
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <vfprintf+0x1ce>
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	0c 5f       	subi	r16, 0xFC	; 252
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <vfprintf+0x1de>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	88 27       	eor	r24, r24
     e9c:	77 fd       	sbrc	r23, 7
     e9e:	80 95       	com	r24
     ea0:	98 2f       	mov	r25, r24
     ea2:	0e 5f       	subi	r16, 0xFE	; 254
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	2f 76       	andi	r18, 0x6F	; 111
     ea8:	b2 2e       	mov	r11, r18
     eaa:	97 ff       	sbrs	r25, 7
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <vfprintf+0x1f8>
     eae:	90 95       	com	r25
     eb0:	80 95       	com	r24
     eb2:	70 95       	com	r23
     eb4:	61 95       	neg	r22
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f 4f       	sbci	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	20 68       	ori	r18, 0x80	; 128
     ebe:	b2 2e       	mov	r11, r18
     ec0:	2a e0       	ldi	r18, 0x0A	; 10
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	a4 01       	movw	r20, r8
     ec6:	0e 94 9d 0b 	call	0x173a	; 0x173a <__ultoa_invert>
     eca:	a8 2e       	mov	r10, r24
     ecc:	a8 18       	sub	r10, r8
     ece:	44 c0       	rjmp	.+136    	; 0xf58 <vfprintf+0x290>
     ed0:	85 37       	cpi	r24, 0x75	; 117
     ed2:	29 f4       	brne	.+10     	; 0xede <vfprintf+0x216>
     ed4:	2f 7e       	andi	r18, 0xEF	; 239
     ed6:	b2 2e       	mov	r11, r18
     ed8:	2a e0       	ldi	r18, 0x0A	; 10
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <vfprintf+0x260>
     ede:	f2 2f       	mov	r31, r18
     ee0:	f9 7f       	andi	r31, 0xF9	; 249
     ee2:	bf 2e       	mov	r11, r31
     ee4:	8f 36       	cpi	r24, 0x6F	; 111
     ee6:	c1 f0       	breq	.+48     	; 0xf18 <vfprintf+0x250>
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <vfprintf+0x228>
     eea:	88 35       	cpi	r24, 0x58	; 88
     eec:	79 f0       	breq	.+30     	; 0xf0c <vfprintf+0x244>
     eee:	b4 c0       	rjmp	.+360    	; 0x1058 <vfprintf+0x390>
     ef0:	80 37       	cpi	r24, 0x70	; 112
     ef2:	19 f0       	breq	.+6      	; 0xefa <vfprintf+0x232>
     ef4:	88 37       	cpi	r24, 0x78	; 120
     ef6:	21 f0       	breq	.+8      	; 0xf00 <vfprintf+0x238>
     ef8:	af c0       	rjmp	.+350    	; 0x1058 <vfprintf+0x390>
     efa:	2f 2f       	mov	r18, r31
     efc:	20 61       	ori	r18, 0x10	; 16
     efe:	b2 2e       	mov	r11, r18
     f00:	b4 fe       	sbrs	r11, 4
     f02:	0d c0       	rjmp	.+26     	; 0xf1e <vfprintf+0x256>
     f04:	8b 2d       	mov	r24, r11
     f06:	84 60       	ori	r24, 0x04	; 4
     f08:	b8 2e       	mov	r11, r24
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <vfprintf+0x256>
     f0c:	24 ff       	sbrs	r18, 4
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <vfprintf+0x25c>
     f10:	9f 2f       	mov	r25, r31
     f12:	96 60       	ori	r25, 0x06	; 6
     f14:	b9 2e       	mov	r11, r25
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <vfprintf+0x25c>
     f18:	28 e0       	ldi	r18, 0x08	; 8
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <vfprintf+0x260>
     f1e:	20 e1       	ldi	r18, 0x10	; 16
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x260>
     f24:	20 e1       	ldi	r18, 0x10	; 16
     f26:	32 e0       	ldi	r19, 0x02	; 2
     f28:	f8 01       	movw	r30, r16
     f2a:	b7 fe       	sbrs	r11, 7
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <vfprintf+0x274>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	0c 5f       	subi	r16, 0xFC	; 252
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0x280>
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 5f       	subi	r16, 0xFE	; 254
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	a4 01       	movw	r20, r8
     f4a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__ultoa_invert>
     f4e:	a8 2e       	mov	r10, r24
     f50:	a8 18       	sub	r10, r8
     f52:	fb 2d       	mov	r31, r11
     f54:	ff 77       	andi	r31, 0x7F	; 127
     f56:	bf 2e       	mov	r11, r31
     f58:	b6 fe       	sbrs	r11, 6
     f5a:	0b c0       	rjmp	.+22     	; 0xf72 <vfprintf+0x2aa>
     f5c:	2b 2d       	mov	r18, r11
     f5e:	2e 7f       	andi	r18, 0xFE	; 254
     f60:	a5 14       	cp	r10, r5
     f62:	50 f4       	brcc	.+20     	; 0xf78 <vfprintf+0x2b0>
     f64:	b4 fe       	sbrs	r11, 4
     f66:	0a c0       	rjmp	.+20     	; 0xf7c <vfprintf+0x2b4>
     f68:	b2 fc       	sbrc	r11, 2
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <vfprintf+0x2b4>
     f6c:	2b 2d       	mov	r18, r11
     f6e:	2e 7e       	andi	r18, 0xEE	; 238
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <vfprintf+0x2b4>
     f72:	7a 2c       	mov	r7, r10
     f74:	2b 2d       	mov	r18, r11
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x2b6>
     f78:	7a 2c       	mov	r7, r10
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <vfprintf+0x2b6>
     f7c:	75 2c       	mov	r7, r5
     f7e:	24 ff       	sbrs	r18, 4
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <vfprintf+0x2d4>
     f82:	fe 01       	movw	r30, r28
     f84:	ea 0d       	add	r30, r10
     f86:	f1 1d       	adc	r31, r1
     f88:	80 81       	ld	r24, Z
     f8a:	80 33       	cpi	r24, 0x30	; 48
     f8c:	11 f4       	brne	.+4      	; 0xf92 <vfprintf+0x2ca>
     f8e:	29 7e       	andi	r18, 0xE9	; 233
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <vfprintf+0x2dc>
     f92:	22 ff       	sbrs	r18, 2
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <vfprintf+0x2da>
     f96:	73 94       	inc	r7
     f98:	73 94       	inc	r7
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <vfprintf+0x2dc>
     f9c:	82 2f       	mov	r24, r18
     f9e:	86 78       	andi	r24, 0x86	; 134
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <vfprintf+0x2dc>
     fa2:	73 94       	inc	r7
     fa4:	23 fd       	sbrc	r18, 3
     fa6:	13 c0       	rjmp	.+38     	; 0xfce <vfprintf+0x306>
     fa8:	20 ff       	sbrs	r18, 0
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <vfprintf+0x2f0>
     fac:	5a 2c       	mov	r5, r10
     fae:	73 14       	cp	r7, r3
     fb0:	18 f4       	brcc	.+6      	; 0xfb8 <vfprintf+0x2f0>
     fb2:	53 0c       	add	r5, r3
     fb4:	57 18       	sub	r5, r7
     fb6:	73 2c       	mov	r7, r3
     fb8:	73 14       	cp	r7, r3
     fba:	68 f4       	brcc	.+26     	; 0xfd6 <vfprintf+0x30e>
     fbc:	b7 01       	movw	r22, r14
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	2c 87       	std	Y+12, r18	; 0x0c
     fc4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     fc8:	73 94       	inc	r7
     fca:	2c 85       	ldd	r18, Y+12	; 0x0c
     fcc:	f5 cf       	rjmp	.-22     	; 0xfb8 <vfprintf+0x2f0>
     fce:	73 14       	cp	r7, r3
     fd0:	10 f4       	brcc	.+4      	; 0xfd6 <vfprintf+0x30e>
     fd2:	37 18       	sub	r3, r7
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <vfprintf+0x310>
     fd6:	31 2c       	mov	r3, r1
     fd8:	24 ff       	sbrs	r18, 4
     fda:	12 c0       	rjmp	.+36     	; 0x1000 <vfprintf+0x338>
     fdc:	b7 01       	movw	r22, r14
     fde:	80 e3       	ldi	r24, 0x30	; 48
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	2c 87       	std	Y+12, r18	; 0x0c
     fe4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
     fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fea:	22 ff       	sbrs	r18, 2
     fec:	17 c0       	rjmp	.+46     	; 0x101c <vfprintf+0x354>
     fee:	21 ff       	sbrs	r18, 1
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <vfprintf+0x330>
     ff2:	88 e5       	ldi	r24, 0x58	; 88
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <vfprintf+0x334>
     ff8:	88 e7       	ldi	r24, 0x78	; 120
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	b7 01       	movw	r22, r14
     ffe:	0c c0       	rjmp	.+24     	; 0x1018 <vfprintf+0x350>
    1000:	82 2f       	mov	r24, r18
    1002:	86 78       	andi	r24, 0x86	; 134
    1004:	59 f0       	breq	.+22     	; 0x101c <vfprintf+0x354>
    1006:	21 fd       	sbrc	r18, 1
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x346>
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <vfprintf+0x348>
    100e:	8b e2       	ldi	r24, 0x2B	; 43
    1010:	27 fd       	sbrc	r18, 7
    1012:	8d e2       	ldi	r24, 0x2D	; 45
    1014:	b7 01       	movw	r22, r14
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    101c:	a5 14       	cp	r10, r5
    101e:	38 f4       	brcc	.+14     	; 0x102e <vfprintf+0x366>
    1020:	b7 01       	movw	r22, r14
    1022:	80 e3       	ldi	r24, 0x30	; 48
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    102a:	5a 94       	dec	r5
    102c:	f7 cf       	rjmp	.-18     	; 0x101c <vfprintf+0x354>
    102e:	aa 94       	dec	r10
    1030:	f4 01       	movw	r30, r8
    1032:	ea 0d       	add	r30, r10
    1034:	f1 1d       	adc	r31, r1
    1036:	80 81       	ld	r24, Z
    1038:	b7 01       	movw	r22, r14
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1040:	a1 10       	cpse	r10, r1
    1042:	f5 cf       	rjmp	.-22     	; 0x102e <vfprintf+0x366>
    1044:	33 20       	and	r3, r3
    1046:	09 f4       	brne	.+2      	; 0x104a <vfprintf+0x382>
    1048:	51 ce       	rjmp	.-862    	; 0xcec <vfprintf+0x24>
    104a:	b7 01       	movw	r22, r14
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1054:	3a 94       	dec	r3
    1056:	f6 cf       	rjmp	.-20     	; 0x1044 <vfprintf+0x37c>
    1058:	f7 01       	movw	r30, r14
    105a:	86 81       	ldd	r24, Z+6	; 0x06
    105c:	97 81       	ldd	r25, Z+7	; 0x07
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <vfprintf+0x39c>
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	9f ef       	ldi	r25, 0xFF	; 255
    1064:	2c 96       	adiw	r28, 0x0c	; 12
    1066:	e2 e1       	ldi	r30, 0x12	; 18
    1068:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__epilogue_restores__>

0000106c <putval>:
    106c:	20 fd       	sbrc	r18, 0
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <putval+0x16>
    1070:	fc 01       	movw	r30, r24
    1072:	23 fd       	sbrc	r18, 3
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <putval+0x14>
    1076:	22 ff       	sbrs	r18, 2
    1078:	02 c0       	rjmp	.+4      	; 0x107e <putval+0x12>
    107a:	73 83       	std	Z+3, r23	; 0x03
    107c:	62 83       	std	Z+2, r22	; 0x02
    107e:	51 83       	std	Z+1, r21	; 0x01
    1080:	40 83       	st	Z, r20
    1082:	08 95       	ret

00001084 <mulacc>:
    1084:	44 fd       	sbrc	r20, 4
    1086:	10 c0       	rjmp	.+32     	; 0x10a8 <mulacc+0x24>
    1088:	46 fd       	sbrc	r20, 6
    108a:	10 c0       	rjmp	.+32     	; 0x10ac <mulacc+0x28>
    108c:	db 01       	movw	r26, r22
    108e:	fc 01       	movw	r30, r24
    1090:	aa 0f       	add	r26, r26
    1092:	bb 1f       	adc	r27, r27
    1094:	ee 1f       	adc	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	10 94       	com	r1
    109a:	d1 f7       	brne	.-12     	; 0x1090 <mulacc+0xc>
    109c:	6a 0f       	add	r22, r26
    109e:	7b 1f       	adc	r23, r27
    10a0:	8e 1f       	adc	r24, r30
    10a2:	9f 1f       	adc	r25, r31
    10a4:	31 e0       	ldi	r19, 0x01	; 1
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <mulacc+0x2a>
    10a8:	33 e0       	ldi	r19, 0x03	; 3
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <mulacc+0x2a>
    10ac:	34 e0       	ldi	r19, 0x04	; 4
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	31 50       	subi	r19, 0x01	; 1
    10b8:	d1 f7       	brne	.-12     	; 0x10ae <mulacc+0x2a>
    10ba:	62 0f       	add	r22, r18
    10bc:	71 1d       	adc	r23, r1
    10be:	81 1d       	adc	r24, r1
    10c0:	91 1d       	adc	r25, r1
    10c2:	08 95       	ret

000010c4 <skip_spaces>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	8c 01       	movw	r16, r24
    10ce:	c8 01       	movw	r24, r16
    10d0:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    10d4:	ec 01       	movw	r28, r24
    10d6:	97 fd       	sbrc	r25, 7
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <skip_spaces+0x26>
    10da:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <isspace>
    10de:	89 2b       	or	r24, r25
    10e0:	b1 f7       	brne	.-20     	; 0x10ce <skip_spaces+0xa>
    10e2:	b8 01       	movw	r22, r16
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 84 0b 	call	0x1708	; 0x1708 <ungetc>
    10ea:	ce 01       	movw	r24, r28
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <conv_int>:
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ec 01       	movw	r28, r24
    110e:	a6 2e       	mov	r10, r22
    1110:	4a 01       	movw	r8, r20
    1112:	02 2f       	mov	r16, r18
    1114:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    1118:	ac 01       	movw	r20, r24
    111a:	55 27       	eor	r21, r21
    111c:	4b 32       	cpi	r20, 0x2B	; 43
    111e:	51 05       	cpc	r21, r1
    1120:	21 f0       	breq	.+8      	; 0x112a <conv_int+0x34>
    1122:	4d 32       	cpi	r20, 0x2D	; 45
    1124:	51 05       	cpc	r21, r1
    1126:	51 f4       	brne	.+20     	; 0x113c <conv_int+0x46>
    1128:	00 68       	ori	r16, 0x80	; 128
    112a:	aa 94       	dec	r10
    112c:	11 f4       	brne	.+4      	; 0x1132 <conv_int+0x3c>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	67 c0       	rjmp	.+206    	; 0x1200 <conv_int+0x10a>
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    1138:	97 fd       	sbrc	r25, 7
    113a:	f9 cf       	rjmp	.-14     	; 0x112e <conv_int+0x38>
    113c:	10 2f       	mov	r17, r16
    113e:	1d 7f       	andi	r17, 0xFD	; 253
    1140:	30 2f       	mov	r19, r16
    1142:	30 73       	andi	r19, 0x30	; 48
    1144:	01 f5       	brne	.+64     	; 0x1186 <conv_int+0x90>
    1146:	80 33       	cpi	r24, 0x30	; 48
    1148:	f1 f4       	brne	.+60     	; 0x1186 <conv_int+0x90>
    114a:	ff 24       	eor	r15, r15
    114c:	fa 94       	dec	r15
    114e:	fa 0c       	add	r15, r10
    1150:	09 f4       	brne	.+2      	; 0x1154 <conv_int+0x5e>
    1152:	42 c0       	rjmp	.+132    	; 0x11d8 <conv_int+0xe2>
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    115a:	97 fd       	sbrc	r25, 7
    115c:	3d c0       	rjmp	.+122    	; 0x11d8 <conv_int+0xe2>
    115e:	38 2f       	mov	r19, r24
    1160:	3f 7d       	andi	r19, 0xDF	; 223
    1162:	38 35       	cpi	r19, 0x58	; 88
    1164:	51 f4       	brne	.+20     	; 0x117a <conv_int+0x84>
    1166:	12 64       	ori	r17, 0x42	; 66
    1168:	aa 94       	dec	r10
    116a:	aa 94       	dec	r10
    116c:	a9 f1       	breq	.+106    	; 0x11d8 <conv_int+0xe2>
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    1174:	97 ff       	sbrs	r25, 7
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <conv_int+0x90>
    1178:	2f c0       	rjmp	.+94     	; 0x11d8 <conv_int+0xe2>
    117a:	06 ff       	sbrs	r16, 6
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <conv_int+0x8c>
    117e:	12 60       	ori	r17, 0x02	; 2
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <conv_int+0x8e>
    1182:	12 61       	ori	r17, 0x12	; 18
    1184:	af 2c       	mov	r10, r15
    1186:	c1 2c       	mov	r12, r1
    1188:	d1 2c       	mov	r13, r1
    118a:	76 01       	movw	r14, r12
    118c:	20 ed       	ldi	r18, 0xD0	; 208
    118e:	28 0f       	add	r18, r24
    1190:	28 30       	cpi	r18, 0x08	; 8
    1192:	80 f0       	brcs	.+32     	; 0x11b4 <conv_int+0xbe>
    1194:	14 ff       	sbrs	r17, 4
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <conv_int+0xaa>
    1198:	be 01       	movw	r22, r28
    119a:	0e 94 84 0b 	call	0x1708	; 0x1708 <ungetc>
    119e:	19 c0       	rjmp	.+50     	; 0x11d2 <conv_int+0xdc>
    11a0:	2a 30       	cpi	r18, 0x0A	; 10
    11a2:	40 f0       	brcs	.+16     	; 0x11b4 <conv_int+0xbe>
    11a4:	16 ff       	sbrs	r17, 6
    11a6:	f8 cf       	rjmp	.-16     	; 0x1198 <conv_int+0xa2>
    11a8:	2f 7d       	andi	r18, 0xDF	; 223
    11aa:	3f ee       	ldi	r19, 0xEF	; 239
    11ac:	32 0f       	add	r19, r18
    11ae:	36 30       	cpi	r19, 0x06	; 6
    11b0:	98 f7       	brcc	.-26     	; 0x1198 <conv_int+0xa2>
    11b2:	27 50       	subi	r18, 0x07	; 7
    11b4:	41 2f       	mov	r20, r17
    11b6:	c7 01       	movw	r24, r14
    11b8:	b6 01       	movw	r22, r12
    11ba:	0e 94 42 08 	call	0x1084	; 0x1084 <mulacc>
    11be:	6b 01       	movw	r12, r22
    11c0:	7c 01       	movw	r14, r24
    11c2:	12 60       	ori	r17, 0x02	; 2
    11c4:	aa 94       	dec	r10
    11c6:	59 f0       	breq	.+22     	; 0x11de <conv_int+0xe8>
    11c8:	ce 01       	movw	r24, r28
    11ca:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    11ce:	97 ff       	sbrs	r25, 7
    11d0:	dd cf       	rjmp	.-70     	; 0x118c <conv_int+0x96>
    11d2:	11 fd       	sbrc	r17, 1
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <conv_int+0xe8>
    11d6:	ab cf       	rjmp	.-170    	; 0x112e <conv_int+0x38>
    11d8:	c1 2c       	mov	r12, r1
    11da:	d1 2c       	mov	r13, r1
    11dc:	76 01       	movw	r14, r12
    11de:	17 ff       	sbrs	r17, 7
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <conv_int+0xfc>
    11e2:	f0 94       	com	r15
    11e4:	e0 94       	com	r14
    11e6:	d0 94       	com	r13
    11e8:	c0 94       	com	r12
    11ea:	c1 1c       	adc	r12, r1
    11ec:	d1 1c       	adc	r13, r1
    11ee:	e1 1c       	adc	r14, r1
    11f0:	f1 1c       	adc	r15, r1
    11f2:	21 2f       	mov	r18, r17
    11f4:	b7 01       	movw	r22, r14
    11f6:	a6 01       	movw	r20, r12
    11f8:	c4 01       	movw	r24, r8
    11fa:	0e 94 36 08 	call	0x106c	; 0x106c <putval>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	08 95       	ret

00001218 <conv_brk>:
    1218:	a1 e2       	ldi	r26, 0x21	; 33
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__prologue_saves__+0xa>
    1224:	5c 01       	movw	r10, r24
    1226:	7a 01       	movw	r14, r20
    1228:	8e 01       	movw	r16, r28
    122a:	0f 5f       	subi	r16, 0xFF	; 255
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	68 01       	movw	r12, r16
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	d8 01       	movw	r26, r16
    1234:	1d 92       	st	X+, r1
    1236:	8a 95       	dec	r24
    1238:	e9 f7       	brne	.-6      	; 0x1234 <conv_brk+0x1c>
    123a:	f5 01       	movw	r30, r10
    123c:	73 80       	ldd	r7, Z+3	; 0x03
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	81 2c       	mov	r8, r1
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	91 2c       	mov	r9, r1
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	f9 01       	movw	r30, r18
    124e:	73 fc       	sbrc	r7, 3
    1250:	a5 91       	lpm	r26, Z+
    1252:	73 fe       	sbrs	r7, 3
    1254:	a1 91       	ld	r26, Z+
    1256:	8f 01       	movw	r16, r30
    1258:	7a 2f       	mov	r23, r26
    125a:	9f 01       	movw	r18, r30
    125c:	a1 11       	cpse	r26, r1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <conv_brk+0x4e>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	7d c0       	rjmp	.+250    	; 0x1360 <conv_brk+0x148>
    1266:	ae 35       	cpi	r26, 0x5E	; 94
    1268:	19 f4       	brne	.+6      	; 0x1270 <conv_brk+0x58>
    126a:	41 15       	cp	r20, r1
    126c:	51 05       	cpc	r21, r1
    126e:	59 f1       	breq	.+86     	; 0x12c6 <conv_brk+0xae>
    1270:	e9 2d       	mov	r30, r9
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	e4 17       	cp	r30, r20
    1276:	f5 07       	cpc	r31, r21
    1278:	3c f4       	brge	.+14     	; 0x1288 <conv_brk+0x70>
    127a:	ad 35       	cpi	r26, 0x5D	; 93
    127c:	69 f1       	breq	.+90     	; 0x12d8 <conv_brk+0xc0>
    127e:	ad 32       	cpi	r26, 0x2D	; 45
    1280:	19 f4       	brne	.+6      	; 0x1288 <conv_brk+0x70>
    1282:	bb 23       	and	r27, r27
    1284:	19 f1       	breq	.+70     	; 0x12cc <conv_brk+0xb4>
    1286:	03 c0       	rjmp	.+6      	; 0x128e <conv_brk+0x76>
    1288:	b1 11       	cpse	r27, r1
    128a:	01 c0       	rjmp	.+2      	; 0x128e <conv_brk+0x76>
    128c:	8a 2e       	mov	r8, r26
    128e:	e7 2f       	mov	r30, r23
    1290:	e6 95       	lsr	r30
    1292:	e6 95       	lsr	r30
    1294:	e6 95       	lsr	r30
    1296:	86 01       	movw	r16, r12
    1298:	0e 0f       	add	r16, r30
    129a:	11 1d       	adc	r17, r1
    129c:	f8 01       	movw	r30, r16
    129e:	a7 2f       	mov	r26, r23
    12a0:	a7 70       	andi	r26, 0x07	; 7
    12a2:	8c 01       	movw	r16, r24
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <conv_brk+0x92>
    12a6:	00 0f       	add	r16, r16
    12a8:	11 1f       	adc	r17, r17
    12aa:	aa 95       	dec	r26
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <conv_brk+0x8e>
    12ae:	d8 01       	movw	r26, r16
    12b0:	b0 81       	ld	r27, Z
    12b2:	ba 2b       	or	r27, r26
    12b4:	b0 83       	st	Z, r27
    12b6:	78 15       	cp	r23, r8
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <conv_brk+0xb8>
    12ba:	78 15       	cp	r23, r8
    12bc:	10 f4       	brcc	.+4      	; 0x12c2 <conv_brk+0xaa>
    12be:	7f 5f       	subi	r23, 0xFF	; 255
    12c0:	e6 cf       	rjmp	.-52     	; 0x128e <conv_brk+0x76>
    12c2:	71 50       	subi	r23, 0x01	; 1
    12c4:	e4 cf       	rjmp	.-56     	; 0x128e <conv_brk+0x76>
    12c6:	99 24       	eor	r9, r9
    12c8:	93 94       	inc	r9
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <conv_brk+0xba>
    12cc:	b1 e0       	ldi	r27, 0x01	; 1
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <conv_brk+0xba>
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	4f 5f       	subi	r20, 0xFF	; 255
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	ba cf       	rjmp	.-140    	; 0x124c <conv_brk+0x34>
    12d8:	bb 23       	and	r27, r27
    12da:	19 f0       	breq	.+6      	; 0x12e2 <conv_brk+0xca>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	80 62       	ori	r24, 0x20	; 32
    12e0:	8e 83       	std	Y+6, r24	; 0x06
    12e2:	91 10       	cpse	r9, r1
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <conv_brk+0xd4>
    12e6:	99 24       	eor	r9, r9
    12e8:	93 94       	inc	r9
    12ea:	15 c0       	rjmp	.+42     	; 0x1316 <conv_brk+0xfe>
    12ec:	f6 01       	movw	r30, r12
    12ee:	ce 01       	movw	r24, r28
    12f0:	81 96       	adiw	r24, 0x21	; 33
    12f2:	20 81       	ld	r18, Z
    12f4:	20 95       	com	r18
    12f6:	21 93       	st	Z+, r18
    12f8:	e8 17       	cp	r30, r24
    12fa:	f9 07       	cpc	r31, r25
    12fc:	d1 f7       	brne	.-12     	; 0x12f2 <conv_brk+0xda>
    12fe:	f3 cf       	rjmp	.-26     	; 0x12e6 <conv_brk+0xce>
    1300:	e1 14       	cp	r14, r1
    1302:	f1 04       	cpc	r15, r1
    1304:	29 f0       	breq	.+10     	; 0x1310 <conv_brk+0xf8>
    1306:	d7 01       	movw	r26, r14
    1308:	8c 93       	st	X, r24
    130a:	f7 01       	movw	r30, r14
    130c:	31 96       	adiw	r30, 0x01	; 1
    130e:	7f 01       	movw	r14, r30
    1310:	61 50       	subi	r22, 0x01	; 1
    1312:	01 f1       	breq	.+64     	; 0x1354 <conv_brk+0x13c>
    1314:	91 2c       	mov	r9, r1
    1316:	c5 01       	movw	r24, r10
    1318:	69 a3       	std	Y+33, r22	; 0x21
    131a:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    131e:	69 a1       	ldd	r22, Y+33	; 0x21
    1320:	97 fd       	sbrc	r25, 7
    1322:	16 c0       	rjmp	.+44     	; 0x1350 <conv_brk+0x138>
    1324:	28 2f       	mov	r18, r24
    1326:	26 95       	lsr	r18
    1328:	26 95       	lsr	r18
    132a:	26 95       	lsr	r18
    132c:	f6 01       	movw	r30, r12
    132e:	e2 0f       	add	r30, r18
    1330:	f1 1d       	adc	r31, r1
    1332:	20 81       	ld	r18, Z
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	ac 01       	movw	r20, r24
    1338:	47 70       	andi	r20, 0x07	; 7
    133a:	55 27       	eor	r21, r21
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <conv_brk+0x12a>
    133e:	35 95       	asr	r19
    1340:	27 95       	ror	r18
    1342:	4a 95       	dec	r20
    1344:	e2 f7       	brpl	.-8      	; 0x133e <conv_brk+0x126>
    1346:	20 fd       	sbrc	r18, 0
    1348:	db cf       	rjmp	.-74     	; 0x1300 <conv_brk+0xe8>
    134a:	b5 01       	movw	r22, r10
    134c:	0e 94 84 0b 	call	0x1708	; 0x1708 <ungetc>
    1350:	91 10       	cpse	r9, r1
    1352:	86 cf       	rjmp	.-244    	; 0x1260 <conv_brk+0x48>
    1354:	e1 14       	cp	r14, r1
    1356:	f1 04       	cpc	r15, r1
    1358:	11 f0       	breq	.+4      	; 0x135e <conv_brk+0x146>
    135a:	d7 01       	movw	r26, r14
    135c:	1c 92       	st	X, r1
    135e:	c8 01       	movw	r24, r16
    1360:	a1 96       	adiw	r28, 0x21	; 33
    1362:	ed e0       	ldi	r30, 0x0D	; 13
    1364:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <__epilogue_restores__+0xa>

00001368 <vfscanf>:
    1368:	4f 92       	push	r4
    136a:	5f 92       	push	r5
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	1f 92       	push	r1
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	8c 01       	movw	r16, r24
    138e:	2b 01       	movw	r4, r22
    1390:	7a 01       	movw	r14, r20
    1392:	fc 01       	movw	r30, r24
    1394:	17 82       	std	Z+7, r1	; 0x07
    1396:	16 82       	std	Z+6, r1	; 0x06
    1398:	a1 2c       	mov	r10, r1
    139a:	f8 01       	movw	r30, r16
    139c:	d3 80       	ldd	r13, Z+3	; 0x03
    139e:	f2 01       	movw	r30, r4
    13a0:	d3 fc       	sbrc	r13, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	d3 fe       	sbrs	r13, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	38 2f       	mov	r19, r24
    13aa:	2f 01       	movw	r4, r30
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <vfscanf+0x4a>
    13b0:	fc c0       	rjmp	.+504    	; 0x15aa <vfscanf+0x242>
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	39 83       	std	Y+1, r19	; 0x01
    13b6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <isspace>
    13ba:	39 81       	ldd	r19, Y+1	; 0x01
    13bc:	89 2b       	or	r24, r25
    13be:	21 f0       	breq	.+8      	; 0x13c8 <vfscanf+0x60>
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <skip_spaces>
    13c6:	e9 cf       	rjmp	.-46     	; 0x139a <vfscanf+0x32>
    13c8:	35 32       	cpi	r19, 0x25	; 37
    13ca:	41 f4       	brne	.+16     	; 0x13dc <vfscanf+0x74>
    13cc:	f2 01       	movw	r30, r4
    13ce:	d3 fc       	sbrc	r13, 3
    13d0:	35 91       	lpm	r19, Z+
    13d2:	d3 fe       	sbrs	r13, 3
    13d4:	31 91       	ld	r19, Z+
    13d6:	2f 01       	movw	r4, r30
    13d8:	35 32       	cpi	r19, 0x25	; 37
    13da:	69 f4       	brne	.+26     	; 0x13f6 <vfscanf+0x8e>
    13dc:	c8 01       	movw	r24, r16
    13de:	39 83       	std	Y+1, r19	; 0x01
    13e0:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    13e4:	39 81       	ldd	r19, Y+1	; 0x01
    13e6:	97 fd       	sbrc	r25, 7
    13e8:	de c0       	rjmp	.+444    	; 0x15a6 <vfscanf+0x23e>
    13ea:	38 17       	cp	r19, r24
    13ec:	b1 f2       	breq	.-84     	; 0x139a <vfscanf+0x32>
    13ee:	b8 01       	movw	r22, r16
    13f0:	0e 94 84 0b 	call	0x1708	; 0x1708 <ungetc>
    13f4:	da c0       	rjmp	.+436    	; 0x15aa <vfscanf+0x242>
    13f6:	3a 32       	cpi	r19, 0x2A	; 42
    13f8:	41 f4       	brne	.+16     	; 0x140a <vfscanf+0xa2>
    13fa:	d3 fc       	sbrc	r13, 3
    13fc:	35 91       	lpm	r19, Z+
    13fe:	d3 fe       	sbrs	r13, 3
    1400:	31 91       	ld	r19, Z+
    1402:	2f 01       	movw	r4, r30
    1404:	bb 24       	eor	r11, r11
    1406:	b3 94       	inc	r11
    1408:	01 c0       	rjmp	.+2      	; 0x140c <vfscanf+0xa4>
    140a:	b1 2c       	mov	r11, r1
    140c:	71 2c       	mov	r7, r1
    140e:	20 ed       	ldi	r18, 0xD0	; 208
    1410:	23 0f       	add	r18, r19
    1412:	2a 30       	cpi	r18, 0x0A	; 10
    1414:	90 f4       	brcc	.+36     	; 0x143a <vfscanf+0xd2>
    1416:	fb 2d       	mov	r31, r11
    1418:	f2 60       	ori	r31, 0x02	; 2
    141a:	bf 2e       	mov	r11, r31
    141c:	67 2d       	mov	r22, r7
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	0e 94 42 08 	call	0x1084	; 0x1084 <mulacc>
    142a:	76 2e       	mov	r7, r22
    142c:	f2 01       	movw	r30, r4
    142e:	d3 fc       	sbrc	r13, 3
    1430:	35 91       	lpm	r19, Z+
    1432:	d3 fe       	sbrs	r13, 3
    1434:	31 91       	ld	r19, Z+
    1436:	2f 01       	movw	r4, r30
    1438:	ea cf       	rjmp	.-44     	; 0x140e <vfscanf+0xa6>
    143a:	b1 fe       	sbrs	r11, 1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfscanf+0xdc>
    143e:	71 10       	cpse	r7, r1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfscanf+0xe0>
    1442:	b3 c0       	rjmp	.+358    	; 0x15aa <vfscanf+0x242>
    1444:	77 24       	eor	r7, r7
    1446:	7a 94       	dec	r7
    1448:	38 36       	cpi	r19, 0x68	; 104
    144a:	19 f0       	breq	.+6      	; 0x1452 <vfscanf+0xea>
    144c:	3c 36       	cpi	r19, 0x6C	; 108
    144e:	61 f0       	breq	.+24     	; 0x1468 <vfscanf+0x100>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <vfscanf+0x112>
    1452:	f2 01       	movw	r30, r4
    1454:	d3 fc       	sbrc	r13, 3
    1456:	35 91       	lpm	r19, Z+
    1458:	d3 fe       	sbrs	r13, 3
    145a:	31 91       	ld	r19, Z+
    145c:	2f 01       	movw	r4, r30
    145e:	38 36       	cpi	r19, 0x68	; 104
    1460:	61 f4       	brne	.+24     	; 0x147a <vfscanf+0x112>
    1462:	fb 2d       	mov	r31, r11
    1464:	f8 60       	ori	r31, 0x08	; 8
    1466:	bf 2e       	mov	r11, r31
    1468:	8b 2d       	mov	r24, r11
    146a:	84 60       	ori	r24, 0x04	; 4
    146c:	b8 2e       	mov	r11, r24
    146e:	f2 01       	movw	r30, r4
    1470:	d3 fc       	sbrc	r13, 3
    1472:	35 91       	lpm	r19, Z+
    1474:	d3 fe       	sbrs	r13, 3
    1476:	31 91       	ld	r19, Z+
    1478:	2f 01       	movw	r4, r30
    147a:	33 23       	and	r19, r19
    147c:	09 f4       	brne	.+2      	; 0x1480 <vfscanf+0x118>
    147e:	95 c0       	rjmp	.+298    	; 0x15aa <vfscanf+0x242>
    1480:	63 2f       	mov	r22, r19
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	8e e7       	ldi	r24, 0x7E	; 126
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	39 83       	std	Y+1, r19	; 0x01
    148a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <strchr_P>
    148e:	39 81       	ldd	r19, Y+1	; 0x01
    1490:	89 2b       	or	r24, r25
    1492:	09 f4       	brne	.+2      	; 0x1496 <vfscanf+0x12e>
    1494:	8a c0       	rjmp	.+276    	; 0x15aa <vfscanf+0x242>
    1496:	b0 fc       	sbrc	r11, 0
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <vfscanf+0x140>
    149a:	f7 01       	movw	r30, r14
    149c:	c0 80       	ld	r12, Z
    149e:	d1 80       	ldd	r13, Z+1	; 0x01
    14a0:	c7 01       	movw	r24, r14
    14a2:	02 96       	adiw	r24, 0x02	; 2
    14a4:	7c 01       	movw	r14, r24
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfscanf+0x144>
    14a8:	c1 2c       	mov	r12, r1
    14aa:	d1 2c       	mov	r13, r1
    14ac:	3e 36       	cpi	r19, 0x6E	; 110
    14ae:	51 f4       	brne	.+20     	; 0x14c4 <vfscanf+0x15c>
    14b0:	f8 01       	movw	r30, r16
    14b2:	46 81       	ldd	r20, Z+6	; 0x06
    14b4:	57 81       	ldd	r21, Z+7	; 0x07
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	2b 2d       	mov	r18, r11
    14bc:	c6 01       	movw	r24, r12
    14be:	0e 94 36 08 	call	0x106c	; 0x106c <putval>
    14c2:	6b cf       	rjmp	.-298    	; 0x139a <vfscanf+0x32>
    14c4:	33 36       	cpi	r19, 0x63	; 99
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <vfscanf+0x188>
    14c8:	b1 fc       	sbrc	r11, 1
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfscanf+0x168>
    14cc:	77 24       	eor	r7, r7
    14ce:	73 94       	inc	r7
    14d0:	c8 01       	movw	r24, r16
    14d2:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	66 c0       	rjmp	.+204    	; 0x15a6 <vfscanf+0x23e>
    14da:	c1 14       	cp	r12, r1
    14dc:	d1 04       	cpc	r13, r1
    14de:	29 f0       	breq	.+10     	; 0x14ea <vfscanf+0x182>
    14e0:	f6 01       	movw	r30, r12
    14e2:	80 83       	st	Z, r24
    14e4:	c6 01       	movw	r24, r12
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	6c 01       	movw	r12, r24
    14ea:	7a 94       	dec	r7
    14ec:	89 f7       	brne	.-30     	; 0x14d0 <vfscanf+0x168>
    14ee:	57 c0       	rjmp	.+174    	; 0x159e <vfscanf+0x236>
    14f0:	3b 35       	cpi	r19, 0x5B	; 91
    14f2:	59 f4       	brne	.+22     	; 0x150a <vfscanf+0x1a2>
    14f4:	92 01       	movw	r18, r4
    14f6:	a6 01       	movw	r20, r12
    14f8:	67 2d       	mov	r22, r7
    14fa:	c8 01       	movw	r24, r16
    14fc:	0e 94 0c 09 	call	0x1218	; 0x1218 <conv_brk>
    1500:	2c 01       	movw	r4, r24
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f0       	breq	.+2      	; 0x1508 <vfscanf+0x1a0>
    1506:	4b c0       	rjmp	.+150    	; 0x159e <vfscanf+0x236>
    1508:	45 c0       	rjmp	.+138    	; 0x1594 <vfscanf+0x22c>
    150a:	c8 01       	movw	r24, r16
    150c:	39 83       	std	Y+1, r19	; 0x01
    150e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <skip_spaces>
    1512:	39 81       	ldd	r19, Y+1	; 0x01
    1514:	97 fd       	sbrc	r25, 7
    1516:	47 c0       	rjmp	.+142    	; 0x15a6 <vfscanf+0x23e>
    1518:	3f 36       	cpi	r19, 0x6F	; 111
    151a:	69 f1       	breq	.+90     	; 0x1576 <vfscanf+0x20e>
    151c:	28 f4       	brcc	.+10     	; 0x1528 <vfscanf+0x1c0>
    151e:	34 36       	cpi	r19, 0x64	; 100
    1520:	31 f1       	breq	.+76     	; 0x156e <vfscanf+0x206>
    1522:	39 36       	cpi	r19, 0x69	; 105
    1524:	79 f1       	breq	.+94     	; 0x1584 <vfscanf+0x21c>
    1526:	2b c0       	rjmp	.+86     	; 0x157e <vfscanf+0x216>
    1528:	33 37       	cpi	r19, 0x73	; 115
    152a:	69 f0       	breq	.+26     	; 0x1546 <vfscanf+0x1de>
    152c:	35 37       	cpi	r19, 0x75	; 117
    152e:	f9 f0       	breq	.+62     	; 0x156e <vfscanf+0x206>
    1530:	26 c0       	rjmp	.+76     	; 0x157e <vfscanf+0x216>
    1532:	c1 14       	cp	r12, r1
    1534:	d1 04       	cpc	r13, r1
    1536:	29 f0       	breq	.+10     	; 0x1542 <vfscanf+0x1da>
    1538:	f6 01       	movw	r30, r12
    153a:	80 82       	st	Z, r8
    153c:	c6 01       	movw	r24, r12
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	6c 01       	movw	r12, r24
    1542:	7a 94       	dec	r7
    1544:	71 f0       	breq	.+28     	; 0x1562 <vfscanf+0x1fa>
    1546:	c8 01       	movw	r24, r16
    1548:	0e 94 14 0b 	call	0x1628	; 0x1628 <fgetc>
    154c:	4c 01       	movw	r8, r24
    154e:	97 fd       	sbrc	r25, 7
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <vfscanf+0x1fa>
    1552:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <isspace>
    1556:	89 2b       	or	r24, r25
    1558:	61 f3       	breq	.-40     	; 0x1532 <vfscanf+0x1ca>
    155a:	b8 01       	movw	r22, r16
    155c:	c4 01       	movw	r24, r8
    155e:	0e 94 84 0b 	call	0x1708	; 0x1708 <ungetc>
    1562:	c1 14       	cp	r12, r1
    1564:	d1 04       	cpc	r13, r1
    1566:	d9 f0       	breq	.+54     	; 0x159e <vfscanf+0x236>
    1568:	f6 01       	movw	r30, r12
    156a:	10 82       	st	Z, r1
    156c:	18 c0       	rjmp	.+48     	; 0x159e <vfscanf+0x236>
    156e:	fb 2d       	mov	r31, r11
    1570:	f0 62       	ori	r31, 0x20	; 32
    1572:	bf 2e       	mov	r11, r31
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <vfscanf+0x21c>
    1576:	8b 2d       	mov	r24, r11
    1578:	80 61       	ori	r24, 0x10	; 16
    157a:	b8 2e       	mov	r11, r24
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <vfscanf+0x21c>
    157e:	9b 2d       	mov	r25, r11
    1580:	90 64       	ori	r25, 0x40	; 64
    1582:	b9 2e       	mov	r11, r25
    1584:	2b 2d       	mov	r18, r11
    1586:	a6 01       	movw	r20, r12
    1588:	67 2d       	mov	r22, r7
    158a:	c8 01       	movw	r24, r16
    158c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <conv_int>
    1590:	81 11       	cpse	r24, r1
    1592:	05 c0       	rjmp	.+10     	; 0x159e <vfscanf+0x236>
    1594:	f8 01       	movw	r30, r16
    1596:	83 81       	ldd	r24, Z+3	; 0x03
    1598:	80 73       	andi	r24, 0x30	; 48
    159a:	29 f4       	brne	.+10     	; 0x15a6 <vfscanf+0x23e>
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <vfscanf+0x242>
    159e:	b0 fc       	sbrc	r11, 0
    15a0:	fc ce       	rjmp	.-520    	; 0x139a <vfscanf+0x32>
    15a2:	a3 94       	inc	r10
    15a4:	fa ce       	rjmp	.-524    	; 0x139a <vfscanf+0x32>
    15a6:	aa 20       	and	r10, r10
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <vfscanf+0x248>
    15aa:	8a 2d       	mov	r24, r10
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfscanf+0x24c>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	9f ef       	ldi	r25, 0xFF	; 255
    15b4:	0f 90       	pop	r0
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	8f 90       	pop	r8
    15ce:	7f 90       	pop	r7
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	08 95       	ret

000015d6 <isspace>:
    15d6:	91 11       	cpse	r25, r1
    15d8:	0e c1       	rjmp	.+540    	; 0x17f6 <__ctype_isfalse>
    15da:	80 32       	cpi	r24, 0x20	; 32
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <isspace+0xe>
    15de:	89 50       	subi	r24, 0x09	; 9
    15e0:	85 50       	subi	r24, 0x05	; 5
    15e2:	d0 f7       	brcc	.-12     	; 0x15d8 <isspace+0x2>
    15e4:	08 95       	ret

000015e6 <strchr_P>:
    15e6:	fc 01       	movw	r30, r24
    15e8:	05 90       	lpm	r0, Z+
    15ea:	06 16       	cp	r0, r22
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <strchr_P+0x10>
    15ee:	00 20       	and	r0, r0
    15f0:	d9 f7       	brne	.-10     	; 0x15e8 <strchr_P+0x2>
    15f2:	c0 01       	movw	r24, r0
    15f4:	08 95       	ret
    15f6:	31 97       	sbiw	r30, 0x01	; 1
    15f8:	cf 01       	movw	r24, r30
    15fa:	08 95       	ret

000015fc <strnlen_P>:
    15fc:	fc 01       	movw	r30, r24
    15fe:	05 90       	lpm	r0, Z+
    1600:	61 50       	subi	r22, 0x01	; 1
    1602:	70 40       	sbci	r23, 0x00	; 0
    1604:	01 10       	cpse	r0, r1
    1606:	d8 f7       	brcc	.-10     	; 0x15fe <strnlen_P+0x2>
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	8e 0f       	add	r24, r30
    160e:	9f 1f       	adc	r25, r31
    1610:	08 95       	ret

00001612 <strnlen>:
    1612:	fc 01       	movw	r30, r24
    1614:	61 50       	subi	r22, 0x01	; 1
    1616:	70 40       	sbci	r23, 0x00	; 0
    1618:	01 90       	ld	r0, Z+
    161a:	01 10       	cpse	r0, r1
    161c:	d8 f7       	brcc	.-10     	; 0x1614 <strnlen+0x2>
    161e:	80 95       	com	r24
    1620:	90 95       	com	r25
    1622:	8e 0f       	add	r24, r30
    1624:	9f 1f       	adc	r25, r31
    1626:	08 95       	ret

00001628 <fgetc>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	20 ff       	sbrs	r18, 0
    1632:	33 c0       	rjmp	.+102    	; 0x169a <fgetc+0x72>
    1634:	26 ff       	sbrs	r18, 6
    1636:	0a c0       	rjmp	.+20     	; 0x164c <fgetc+0x24>
    1638:	2f 7b       	andi	r18, 0xBF	; 191
    163a:	2b 83       	std	Y+3, r18	; 0x03
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	9f 83       	std	Y+7, r25	; 0x07
    1644:	8e 83       	std	Y+6, r24	; 0x06
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	29 c0       	rjmp	.+82     	; 0x169e <fgetc+0x76>
    164c:	22 ff       	sbrs	r18, 2
    164e:	0f c0       	rjmp	.+30     	; 0x166e <fgetc+0x46>
    1650:	e8 81       	ld	r30, Y
    1652:	f9 81       	ldd	r31, Y+1	; 0x01
    1654:	80 81       	ld	r24, Z
    1656:	99 27       	eor	r25, r25
    1658:	87 fd       	sbrc	r24, 7
    165a:	90 95       	com	r25
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	19 f4       	brne	.+6      	; 0x1666 <fgetc+0x3e>
    1660:	20 62       	ori	r18, 0x20	; 32
    1662:	2b 83       	std	Y+3, r18	; 0x03
    1664:	1a c0       	rjmp	.+52     	; 0x169a <fgetc+0x72>
    1666:	31 96       	adiw	r30, 0x01	; 1
    1668:	f9 83       	std	Y+1, r31	; 0x01
    166a:	e8 83       	st	Y, r30
    166c:	0e c0       	rjmp	.+28     	; 0x168a <fgetc+0x62>
    166e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1670:	fb 85       	ldd	r31, Y+11	; 0x0b
    1672:	09 95       	icall
    1674:	97 ff       	sbrs	r25, 7
    1676:	09 c0       	rjmp	.+18     	; 0x168a <fgetc+0x62>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	11 f4       	brne	.+4      	; 0x1682 <fgetc+0x5a>
    167e:	80 e1       	ldi	r24, 0x10	; 16
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <fgetc+0x5c>
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	82 2b       	or	r24, r18
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	08 c0       	rjmp	.+16     	; 0x169a <fgetc+0x72>
    168a:	2e 81       	ldd	r18, Y+6	; 0x06
    168c:	3f 81       	ldd	r19, Y+7	; 0x07
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	3f 83       	std	Y+7, r19	; 0x07
    1694:	2e 83       	std	Y+6, r18	; 0x06
    1696:	99 27       	eor	r25, r25
    1698:	02 c0       	rjmp	.+4      	; 0x169e <fgetc+0x76>
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <fputc>:
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	18 2f       	mov	r17, r24
    16ae:	09 2f       	mov	r16, r25
    16b0:	eb 01       	movw	r28, r22
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 fd       	sbrc	r24, 1
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <fputc+0x1a>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	20 c0       	rjmp	.+64     	; 0x16fe <fputc+0x5a>
    16be:	82 ff       	sbrs	r24, 2
    16c0:	10 c0       	rjmp	.+32     	; 0x16e2 <fputc+0x3e>
    16c2:	4e 81       	ldd	r20, Y+6	; 0x06
    16c4:	5f 81       	ldd	r21, Y+7	; 0x07
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	42 17       	cp	r20, r18
    16cc:	53 07       	cpc	r21, r19
    16ce:	7c f4       	brge	.+30     	; 0x16ee <fputc+0x4a>
    16d0:	e8 81       	ld	r30, Y
    16d2:	f9 81       	ldd	r31, Y+1	; 0x01
    16d4:	9f 01       	movw	r18, r30
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	39 83       	std	Y+1, r19	; 0x01
    16dc:	28 83       	st	Y, r18
    16de:	10 83       	st	Z, r17
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <fputc+0x4a>
    16e2:	e8 85       	ldd	r30, Y+8	; 0x08
    16e4:	f9 85       	ldd	r31, Y+9	; 0x09
    16e6:	81 2f       	mov	r24, r17
    16e8:	09 95       	icall
    16ea:	89 2b       	or	r24, r25
    16ec:	29 f7       	brne	.-54     	; 0x16b8 <fputc+0x14>
    16ee:	2e 81       	ldd	r18, Y+6	; 0x06
    16f0:	3f 81       	ldd	r19, Y+7	; 0x07
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	3f 83       	std	Y+7, r19	; 0x07
    16f8:	2e 83       	std	Y+6, r18	; 0x06
    16fa:	81 2f       	mov	r24, r17
    16fc:	90 2f       	mov	r25, r16
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <ungetc>:
    1708:	fb 01       	movw	r30, r22
    170a:	23 81       	ldd	r18, Z+3	; 0x03
    170c:	20 ff       	sbrs	r18, 0
    170e:	12 c0       	rjmp	.+36     	; 0x1734 <ungetc+0x2c>
    1710:	26 fd       	sbrc	r18, 6
    1712:	10 c0       	rjmp	.+32     	; 0x1734 <ungetc+0x2c>
    1714:	8f 3f       	cpi	r24, 0xFF	; 255
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	93 07       	cpc	r25, r19
    171a:	61 f0       	breq	.+24     	; 0x1734 <ungetc+0x2c>
    171c:	82 83       	std	Z+2, r24	; 0x02
    171e:	2f 7d       	andi	r18, 0xDF	; 223
    1720:	20 64       	ori	r18, 0x40	; 64
    1722:	23 83       	std	Z+3, r18	; 0x03
    1724:	26 81       	ldd	r18, Z+6	; 0x06
    1726:	37 81       	ldd	r19, Z+7	; 0x07
    1728:	21 50       	subi	r18, 0x01	; 1
    172a:	31 09       	sbc	r19, r1
    172c:	37 83       	std	Z+7, r19	; 0x07
    172e:	26 83       	std	Z+6, r18	; 0x06
    1730:	99 27       	eor	r25, r25
    1732:	08 95       	ret
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	08 95       	ret

0000173a <__ultoa_invert>:
    173a:	fa 01       	movw	r30, r20
    173c:	aa 27       	eor	r26, r26
    173e:	28 30       	cpi	r18, 0x08	; 8
    1740:	51 f1       	breq	.+84     	; 0x1796 <__ultoa_invert+0x5c>
    1742:	20 31       	cpi	r18, 0x10	; 16
    1744:	81 f1       	breq	.+96     	; 0x17a6 <__ultoa_invert+0x6c>
    1746:	e8 94       	clt
    1748:	6f 93       	push	r22
    174a:	6e 7f       	andi	r22, 0xFE	; 254
    174c:	6e 5f       	subi	r22, 0xFE	; 254
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	af 4f       	sbci	r26, 0xFF	; 255
    1756:	b1 e0       	ldi	r27, 0x01	; 1
    1758:	3e d0       	rcall	.+124    	; 0x17d6 <__ultoa_invert+0x9c>
    175a:	b4 e0       	ldi	r27, 0x04	; 4
    175c:	3c d0       	rcall	.+120    	; 0x17d6 <__ultoa_invert+0x9c>
    175e:	67 0f       	add	r22, r23
    1760:	78 1f       	adc	r23, r24
    1762:	89 1f       	adc	r24, r25
    1764:	9a 1f       	adc	r25, r26
    1766:	a1 1d       	adc	r26, r1
    1768:	68 0f       	add	r22, r24
    176a:	79 1f       	adc	r23, r25
    176c:	8a 1f       	adc	r24, r26
    176e:	91 1d       	adc	r25, r1
    1770:	a1 1d       	adc	r26, r1
    1772:	6a 0f       	add	r22, r26
    1774:	71 1d       	adc	r23, r1
    1776:	81 1d       	adc	r24, r1
    1778:	91 1d       	adc	r25, r1
    177a:	a1 1d       	adc	r26, r1
    177c:	20 d0       	rcall	.+64     	; 0x17be <__ultoa_invert+0x84>
    177e:	09 f4       	brne	.+2      	; 0x1782 <__ultoa_invert+0x48>
    1780:	68 94       	set
    1782:	3f 91       	pop	r19
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	26 9f       	mul	r18, r22
    1788:	11 24       	eor	r1, r1
    178a:	30 19       	sub	r19, r0
    178c:	30 5d       	subi	r19, 0xD0	; 208
    178e:	31 93       	st	Z+, r19
    1790:	de f6       	brtc	.-74     	; 0x1748 <__ultoa_invert+0xe>
    1792:	cf 01       	movw	r24, r30
    1794:	08 95       	ret
    1796:	46 2f       	mov	r20, r22
    1798:	47 70       	andi	r20, 0x07	; 7
    179a:	40 5d       	subi	r20, 0xD0	; 208
    179c:	41 93       	st	Z+, r20
    179e:	b3 e0       	ldi	r27, 0x03	; 3
    17a0:	0f d0       	rcall	.+30     	; 0x17c0 <__ultoa_invert+0x86>
    17a2:	c9 f7       	brne	.-14     	; 0x1796 <__ultoa_invert+0x5c>
    17a4:	f6 cf       	rjmp	.-20     	; 0x1792 <__ultoa_invert+0x58>
    17a6:	46 2f       	mov	r20, r22
    17a8:	4f 70       	andi	r20, 0x0F	; 15
    17aa:	40 5d       	subi	r20, 0xD0	; 208
    17ac:	4a 33       	cpi	r20, 0x3A	; 58
    17ae:	18 f0       	brcs	.+6      	; 0x17b6 <__ultoa_invert+0x7c>
    17b0:	49 5d       	subi	r20, 0xD9	; 217
    17b2:	31 fd       	sbrc	r19, 1
    17b4:	40 52       	subi	r20, 0x20	; 32
    17b6:	41 93       	st	Z+, r20
    17b8:	02 d0       	rcall	.+4      	; 0x17be <__ultoa_invert+0x84>
    17ba:	a9 f7       	brne	.-22     	; 0x17a6 <__ultoa_invert+0x6c>
    17bc:	ea cf       	rjmp	.-44     	; 0x1792 <__ultoa_invert+0x58>
    17be:	b4 e0       	ldi	r27, 0x04	; 4
    17c0:	a6 95       	lsr	r26
    17c2:	97 95       	ror	r25
    17c4:	87 95       	ror	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	ba 95       	dec	r27
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__ultoa_invert+0x86>
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 05       	cpc	r22, r1
    17d2:	71 05       	cpc	r23, r1
    17d4:	08 95       	ret
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	0a 2e       	mov	r0, r26
    17dc:	06 94       	lsr	r0
    17de:	57 95       	ror	r21
    17e0:	47 95       	ror	r20
    17e2:	37 95       	ror	r19
    17e4:	27 95       	ror	r18
    17e6:	ba 95       	dec	r27
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <__ultoa_invert+0xa2>
    17ea:	62 0f       	add	r22, r18
    17ec:	73 1f       	adc	r23, r19
    17ee:	84 1f       	adc	r24, r20
    17f0:	95 1f       	adc	r25, r21
    17f2:	a0 1d       	adc	r26, r0
    17f4:	08 95       	ret

000017f6 <__ctype_isfalse>:
    17f6:	99 27       	eor	r25, r25
    17f8:	88 27       	eor	r24, r24

000017fa <__ctype_istrue>:
    17fa:	08 95       	ret

000017fc <__prologue_saves__>:
    17fc:	2f 92       	push	r2
    17fe:	3f 92       	push	r3
    1800:	4f 92       	push	r4
    1802:	5f 92       	push	r5
    1804:	6f 92       	push	r6
    1806:	7f 92       	push	r7
    1808:	8f 92       	push	r8
    180a:	9f 92       	push	r9
    180c:	af 92       	push	r10
    180e:	bf 92       	push	r11
    1810:	cf 92       	push	r12
    1812:	df 92       	push	r13
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	ca 1b       	sub	r28, r26
    1826:	db 0b       	sbc	r29, r27
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	09 94       	ijmp

00001834 <__epilogue_restores__>:
    1834:	2a 88       	ldd	r2, Y+18	; 0x12
    1836:	39 88       	ldd	r3, Y+17	; 0x11
    1838:	48 88       	ldd	r4, Y+16	; 0x10
    183a:	5f 84       	ldd	r5, Y+15	; 0x0f
    183c:	6e 84       	ldd	r6, Y+14	; 0x0e
    183e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1840:	8c 84       	ldd	r8, Y+12	; 0x0c
    1842:	9b 84       	ldd	r9, Y+11	; 0x0b
    1844:	aa 84       	ldd	r10, Y+10	; 0x0a
    1846:	b9 84       	ldd	r11, Y+9	; 0x09
    1848:	c8 84       	ldd	r12, Y+8	; 0x08
    184a:	df 80       	ldd	r13, Y+7	; 0x07
    184c:	ee 80       	ldd	r14, Y+6	; 0x06
    184e:	fd 80       	ldd	r15, Y+5	; 0x05
    1850:	0c 81       	ldd	r16, Y+4	; 0x04
    1852:	1b 81       	ldd	r17, Y+3	; 0x03
    1854:	aa 81       	ldd	r26, Y+2	; 0x02
    1856:	b9 81       	ldd	r27, Y+1	; 0x01
    1858:	ce 0f       	add	r28, r30
    185a:	d1 1d       	adc	r29, r1
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	ed 01       	movw	r28, r26
    1868:	08 95       	ret

0000186a <_exit>:
    186a:	f8 94       	cli

0000186c <__stop_program>:
    186c:	ff cf       	rjmp	.-2      	; 0x186c <__stop_program>
