
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  000018a0  00001934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d9  0080014c  0080014c  00001a20  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb3  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004947  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_4>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_9>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_11>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	8c 00       	.word	0x008c	; ????
      56:	d3 02       	muls	r29, r19
      58:	f4 00       	.word	0x00f4	; ????
      5a:	d3 02       	muls	r29, r19
      5c:	58 01       	movw	r10, r16
      5e:	a7 02       	muls	r26, r23
      60:	d3 02       	muls	r29, r19
      62:	d3 02       	muls	r29, r19
      64:	d3 02       	muls	r29, r19
      66:	d3 02       	muls	r29, r19
      68:	d3 02       	muls	r29, r19
      6a:	d3 02       	muls	r29, r19
      6c:	d3 02       	muls	r29, r19
      6e:	d3 02       	muls	r29, r19
      70:	d3 02       	muls	r29, r19
      72:	d3 02       	muls	r29, r19
      74:	d3 02       	muls	r29, r19
      76:	99 02       	muls	r25, r25
      78:	ba 02       	muls	r27, r26
      7a:	e0 01       	movw	r28, r0
      7c:	3f 02       	muls	r19, r31

0000007e <__trampolines_end>:
      7e:	63 64       	ori	r22, 0x43	; 67
      80:	69 6e       	ori	r22, 0xE9	; 233
      82:	6f 70       	andi	r22, 0x0F	; 15
      84:	73 75       	andi	r23, 0x53	; 83
      86:	78 58       	subi	r23, 0x88	; 136
      88:	5b 00       	.word	0x005b	; ????

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e0 ea       	ldi	r30, 0xA0	; 160
      9e:	f8 e1       	ldi	r31, 0x18	; 24
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ac 34       	cpi	r26, 0x4C	; 76
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	ac e4       	ldi	r26, 0x4C	; 76
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a5 32       	cpi	r26, 0x25	; 37
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 66 05 	call	0xacc	; 0xacc <main>
      c0:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <runCmd>:
#include "timer.h"

char buf[100];

void runCmd(char code[])
{
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	28 97       	sbiw	r28, 0x08	; 8
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      ea:	dc 01       	movw	r26, r24
      ec:	11 96       	adiw	r26, 0x01	; 1
      ee:	fc 90       	ld	r15, X
      f0:	11 97       	sbiw	r26, 0x01	; 1
      f2:	2f 2d       	mov	r18, r15
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	c9 01       	movw	r24, r18
      f8:	c0 97       	sbiw	r24, 0x30	; 48
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	8d 83       	std	Y+5, r24	; 0x05
	switch (code[0]) {
      fe:	4c 91       	ld	r20, X
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	41 54       	subi	r20, 0x41	; 65
     104:	51 09       	sbc	r21, r1
     106:	45 31       	cpi	r20, 0x15	; 21
     108:	51 05       	cpc	r21, r1
     10a:	08 f0       	brcs	.+2      	; 0x10e <runCmd+0x46>
     10c:	4c c2       	rjmp	.+1176   	; 0x5a6 <__stack+0x147>
     10e:	46 5d       	subi	r20, 0xD6	; 214
     110:	5f 4f       	sbci	r21, 0xFF	; 255
     112:	fa 01       	movw	r30, r20
     114:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__tablejump2__>
	case 'A':		// control port a
		if (code[2] - '0') {
     118:	d8 01       	movw	r26, r16
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	20 33       	cpi	r18, 0x30	; 48
     120:	29 f1       	breq	.+74     	; 0x16c <runCmd+0xa4>
			writeEEPROM(addr, '1');
     122:	61 e3       	ldi	r22, 0x31	; 49
     124:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			PORTA |= 1 << addr;
     128:	2b b3       	in	r18, 0x1b	; 27
     12a:	ee 24       	eor	r14, r14
     12c:	e3 94       	inc	r14
     12e:	f1 2c       	mov	r15, r1
     130:	c7 01       	movw	r24, r14
     132:	0d 80       	ldd	r0, Y+5	; 0x05
     134:	02 c0       	rjmp	.+4      	; 0x13a <runCmd+0x72>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <runCmd+0x6e>
     13e:	28 2b       	or	r18, r24
     140:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     142:	f8 01       	movw	r30, r16
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	1f 92       	push	r1
     148:	8f 93       	push	r24
     14a:	80 e7       	ldi	r24, 0x70	; 112
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	87 e5       	ldi	r24, 0x57	; 87
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
			status |= 1 << addr;
     15e:	0d 80       	ldd	r0, Y+5	; 0x05
     160:	02 c0       	rjmp	.+4      	; 0x166 <runCmd+0x9e>
     162:	ee 0c       	add	r14, r14
     164:	ff 1c       	adc	r15, r15
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <runCmd+0x9a>
     16a:	6a c0       	rjmp	.+212    	; 0x240 <runCmd+0x178>
		} else {
			writeEEPROM(addr, '0');
     16c:	60 e3       	ldi	r22, 0x30	; 48
     16e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			PORTA &= ~(1 << addr);
     172:	2b b3       	in	r18, 0x1b	; 27
     174:	ee 24       	eor	r14, r14
     176:	e3 94       	inc	r14
     178:	f1 2c       	mov	r15, r1
     17a:	c7 01       	movw	r24, r14
     17c:	0d 80       	ldd	r0, Y+5	; 0x05
     17e:	02 c0       	rjmp	.+4      	; 0x184 <runCmd+0xbc>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <runCmd+0xb8>
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     18e:	d8 01       	movw	r26, r16
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	8c 91       	ld	r24, X
     194:	1f 92       	push	r1
     196:	8f 93       	push	r24
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	87 e5       	ldi	r24, 0x57	; 87
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
			status &= ~(1 << addr);
     1ac:	97 01       	movw	r18, r14
     1ae:	0d 80       	ldd	r0, Y+5	; 0x05
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <runCmd+0xee>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <runCmd+0xea>
     1ba:	20 95       	com	r18
     1bc:	30 95       	com	r19
     1be:	80 91 fd 01 	lds	r24, 0x01FD
     1c2:	90 91 fe 01 	lds	r25, 0x01FE
     1c6:	82 23       	and	r24, r18
     1c8:	93 23       	and	r25, r19
     1ca:	90 93 fe 01 	sts	0x01FE, r25
     1ce:	80 93 fd 01 	sts	0x01FD, r24
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
		}
		runCmd(buf);
     1de:	87 e5       	ldi	r24, 0x57	; 87
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
		break;
     1e6:	f4 c1       	rjmp	.+1000   	; 0x5d0 <__stack+0x171>
	case 'C':		// control port c
		if (code[2] - '0') {
     1e8:	f8 01       	movw	r30, r16
     1ea:	22 81       	ldd	r18, Z+2	; 0x02
     1ec:	08 96       	adiw	r24, 0x08	; 8
     1ee:	20 33       	cpi	r18, 0x30	; 48
     1f0:	71 f1       	breq	.+92     	; 0x24e <runCmd+0x186>
			writeEEPROM(8 + addr, '1');
     1f2:	61 e3       	ldi	r22, 0x31	; 49
     1f4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			PORTC |= 1 << addr;
     1f8:	25 b3       	in	r18, 0x15	; 21
     1fa:	ee 24       	eor	r14, r14
     1fc:	e3 94       	inc	r14
     1fe:	f1 2c       	mov	r15, r1
     200:	c7 01       	movw	r24, r14
     202:	0d 80       	ldd	r0, Y+5	; 0x05
     204:	02 c0       	rjmp	.+4      	; 0x20a <runCmd+0x142>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	0a 94       	dec	r0
     20c:	e2 f7       	brpl	.-8      	; 0x206 <runCmd+0x13e>
     20e:	28 2b       	or	r18, r24
     210:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     212:	d8 01       	movw	r26, r16
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	8c 91       	ld	r24, X
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	87 e5       	ldi	r24, 0x57	; 87
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
			status |= 1 << (8 + addr);
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	08 96       	adiw	r24, 0x08	; 8
     236:	02 c0       	rjmp	.+4      	; 0x23c <runCmd+0x174>
     238:	ee 0c       	add	r14, r14
     23a:	ff 1c       	adc	r15, r15
     23c:	8a 95       	dec	r24
     23e:	e2 f7       	brpl	.-8      	; 0x238 <runCmd+0x170>
     240:	80 91 fd 01 	lds	r24, 0x01FD
     244:	90 91 fe 01 	lds	r25, 0x01FE
     248:	8e 29       	or	r24, r14
     24a:	9f 29       	or	r25, r15
     24c:	be cf       	rjmp	.-132    	; 0x1ca <runCmd+0x102>
		} else {
			writeEEPROM(8 + addr, '0');
     24e:	60 e3       	ldi	r22, 0x30	; 48
     250:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			PORTC &= ~(1 << addr);
     254:	25 b3       	in	r18, 0x15	; 21
     256:	ee 24       	eor	r14, r14
     258:	e3 94       	inc	r14
     25a:	f1 2c       	mov	r15, r1
     25c:	c7 01       	movw	r24, r14
     25e:	0d 80       	ldd	r0, Y+5	; 0x05
     260:	02 c0       	rjmp	.+4      	; 0x266 <runCmd+0x19e>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <runCmd+0x19a>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     270:	f8 01       	movw	r30, r16
     272:	81 81       	ldd	r24, Z+1	; 0x01
     274:	1f 92       	push	r1
     276:	8f 93       	push	r24
     278:	84 e9       	ldi	r24, 0x94	; 148
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	87 e5       	ldi	r24, 0x57	; 87
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
			status ^= ~(1 << (8 + addr));
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	08 96       	adiw	r24, 0x08	; 8
     292:	97 01       	movw	r18, r14
     294:	02 c0       	rjmp	.+4      	; 0x29a <runCmd+0x1d2>
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <runCmd+0x1ce>
     29e:	20 95       	com	r18
     2a0:	30 95       	com	r19
     2a2:	80 91 fd 01 	lds	r24, 0x01FD
     2a6:	90 91 fe 01 	lds	r25, 0x01FE
     2aa:	82 27       	eor	r24, r18
     2ac:	93 27       	eor	r25, r19
     2ae:	8d cf       	rjmp	.-230    	; 0x1ca <runCmd+0x102>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2b0:	d8 01       	movw	r26, r16
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	6c 91       	ld	r22, X
     2b6:	69 36       	cpi	r22, 0x69	; 105
     2b8:	81 f4       	brne	.+32     	; 0x2da <runCmd+0x212>
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++) {
				wdt_reset();
     2be:	a8 95       	wdr
				writeEEPROM(i, code[1]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	61 81       	ldd	r22, Z+1	; 0x01
     2c4:	c7 01       	movw	r24, r14
     2c6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
			for (i = 0; i < 16; i++) {
     2ca:	ff ef       	ldi	r31, 0xFF	; 255
     2cc:	ef 1a       	sub	r14, r31
     2ce:	ff 0a       	sbc	r15, r31
     2d0:	20 e1       	ldi	r18, 0x10	; 16
     2d2:	e2 16       	cp	r14, r18
     2d4:	f1 04       	cpc	r15, r1
     2d6:	99 f7       	brne	.-26     	; 0x2be <runCmd+0x1f6>
     2d8:	7b c1       	rjmp	.+758    	; 0x5d0 <__stack+0x171>
				wdt_reset();
				writeEEPROM(i, code[1]);
			}
		} else if (code[2] == 'f')
     2da:	66 36       	cpi	r22, 0x66	; 102
     2dc:	d1 f4       	brne	.+52     	; 0x312 <runCmd+0x24a>
		{
			if(code[1] == 'a')
     2de:	31 e6       	ldi	r19, 0x61	; 97
     2e0:	f3 12       	cpse	r15, r19
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <runCmd+0x222>
				addr = EEPROM_SIZE;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <runCmd+0x226>
			else
				addr = 16;
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9e 83       	std	Y+6, r25	; 0x06
     2f0:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	08 17       	cp	r16, r24
     2fc:	19 07       	cpc	r17, r25
     2fe:	08 f0       	brcs	.+2      	; 0x302 <runCmd+0x23a>
     300:	67 c1       	rjmp	.+718    	; 0x5d0 <__stack+0x171>
				wdt_reset();
     302:	a8 95       	wdr
				writeEEPROM(i, 0xff);
     304:	6f ef       	ldi	r22, 0xFF	; 255
     306:	c8 01       	movw	r24, r16
     308:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	f2 cf       	rjmp	.-28     	; 0x2f6 <runCmd+0x22e>
				wdt_reset();
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
     312:	62 37       	cpi	r22, 0x72	; 114
     314:	31 f4       	brne	.+12     	; 0x322 <runCmd+0x25a>
			PORTA = ~readEEPROM(code[1]);
     316:	c9 01       	movw	r24, r18
     318:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     31c:	80 95       	com	r24
     31e:	8b bb       	out	0x1b, r24	; 27
     320:	57 c1       	rjmp	.+686    	; 0x5d0 <__stack+0x171>
		} else if (code[1] == 'R') {
     322:	82 e5       	ldi	r24, 0x52	; 82
     324:	f8 12       	cpse	r15, r24
     326:	4a c0       	rjmp	.+148    	; 0x3bc <runCmd+0x2f4>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     328:	ce 01       	movw	r24, r28
     32a:	05 96       	adiw	r24, 0x05	; 5
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	81 ec       	ldi	r24, 0xC1	; 193
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 5f       	subi	r16, 0xFE	; 254
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	1f 93       	push	r17
     33e:	0f 93       	push	r16
     340:	0e 94 64 06 	call	0xcc8	; 0xcc8 <sscanf>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	69 f4       	brne	.+26     	; 0x36e <runCmd+0x2a6>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     354:	8d 81       	ldd	r24, Y+5	; 0x05
     356:	9e 81       	ldd	r25, Y+6	; 0x06
     358:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     35c:	1f 92       	push	r1
     35e:	8f 93       	push	r24
     360:	8e 81       	ldd	r24, Y+6	; 0x06
     362:	8f 93       	push	r24
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	8f 93       	push	r24
     368:	80 ea       	ldi	r24, 0xA0	; 160
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	f8 c0       	rjmp	.+496    	; 0x55e <__stack+0xff>
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
			PORTA = ~readEEPROM(code[1]);
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     372:	30 ea       	ldi	r19, 0xA0	; 160
     374:	c3 2e       	mov	r12, r19
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	d3 2e       	mov	r13, r19
     37a:	47 e5       	ldi	r20, 0x57	; 87
     37c:	e4 2e       	mov	r14, r20
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     382:	c8 01       	movw	r24, r16
     384:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     388:	1f 92       	push	r1
     38a:	8f 93       	push	r24
     38c:	1f 93       	push	r17
     38e:	0f 93       	push	r16
     390:	df 92       	push	r13
     392:	cf 92       	push	r12
     394:	ff 92       	push	r15
     396:	ef 92       	push	r14
     398:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
						readEEPROM(i));
					printf(buf);
     39c:	ff 92       	push	r15
     39e:	ef 92       	push	r14
     3a0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				printf(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	01 15       	cp	r16, r1
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	1f 07       	cpc	r17, r31
     3b8:	21 f7       	brne	.-56     	; 0x382 <runCmd+0x2ba>
     3ba:	0a c1       	rjmp	.+532    	; 0x5d0 <__stack+0x171>
						readEEPROM(i));
					printf(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
     3bc:	c9 01       	movw	r24, r18
     3be:	59 c0       	rjmp	.+178    	; 0x472 <__stack+0x13>
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	03 96       	adiw	r24, 0x03	; 3
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	87 ea       	ldi	r24, 0xA7	; 167
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	1f 93       	push	r17
     3d6:	0f 93       	push	r16
     3d8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <sscanf>
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	02 97       	sbiw	r24, 0x02	; 2
     3e8:	09 f0       	breq	.+2      	; 0x3ec <runCmd+0x324>
     3ea:	46 c0       	rjmp	.+140    	; 0x478 <__stack+0x19>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3ec:	6c 81       	ldd	r22, Y+4	; 0x04
     3ee:	80 91 bb 01 	lds	r24, 0x01BB
     3f2:	90 91 bc 01 	lds	r25, 0x01BC
     3f6:	9c 01       	movw	r18, r24
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	31 09       	sbc	r19, r1
     3fc:	30 93 bc 01 	sts	0x01BC, r19
     400:	20 93 bb 01 	sts	0x01BB, r18
     404:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     408:	6b 81       	ldd	r22, Y+3	; 0x03
     40a:	80 91 bb 01 	lds	r24, 0x01BB
     40e:	90 91 bc 01 	lds	r25, 0x01BC
     412:	9c 01       	movw	r18, r24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	31 09       	sbc	r19, r1
     418:	30 93 bc 01 	sts	0x01BC, r19
     41c:	20 93 bb 01 	sts	0x01BB, r18
     420:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     424:	78 01       	movw	r14, r16
     426:	f8 01       	movw	r30, r16
     428:	01 90       	ld	r0, Z+
     42a:	00 20       	and	r0, r0
     42c:	e9 f7       	brne	.-6      	; 0x428 <runCmd+0x360>
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	e0 1b       	sub	r30, r16
     432:	f1 0b       	sbc	r31, r17
     434:	80 91 bb 01 	lds	r24, 0x01BB
     438:	90 91 bc 01 	lds	r25, 0x01BC
     43c:	97 01       	movw	r18, r14
     43e:	20 1b       	sub	r18, r16
     440:	31 0b       	sbc	r19, r17
     442:	2e 17       	cp	r18, r30
     444:	3f 07       	cpc	r19, r31
     446:	68 f4       	brcc	.+26     	; 0x462 <__stack+0x3>
				writeEEPROM(stackTail--, code[i]);
     448:	d7 01       	movw	r26, r14
     44a:	6d 91       	ld	r22, X+
     44c:	7d 01       	movw	r14, r26
     44e:	9c 01       	movw	r18, r24
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	30 93 bc 01 	sts	0x01BC, r19
     458:	20 93 bb 01 	sts	0x01BB, r18
     45c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
     460:	e2 cf       	rjmp	.-60     	; 0x426 <runCmd+0x35e>
			}
			writeEEPROM(stackTail--, '\n');
     462:	9c 01       	movw	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	31 09       	sbc	r19, r1
     468:	30 93 bc 01 	sts	0x01BC, r19
     46c:	20 93 bb 01 	sts	0x01BB, r18
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
		} else {
			printf("Wrong code!\n");
			return;
		}
		break;
     476:	ac c0       	rjmp	.+344    	; 0x5d0 <__stack+0x171>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			printf("Wrong code!\n");
     478:	8d ea       	ldi	r24, 0xAD	; 173
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	3d c0       	rjmp	.+122    	; 0x4f8 <__stack+0x99>
			return;
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	02 96       	adiw	r24, 0x02	; 2
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	04 96       	adiw	r24, 0x04	; 4
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	89 eb       	ldi	r24, 0xB9	; 185
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	1f 93       	push	r17
     4a2:	0f 93       	push	r16
     4a4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <sscanf>
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	04 97       	sbiw	r24, 0x04	; 4
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__stack+0x59>
     4b6:	8c c0       	rjmp	.+280    	; 0x5d0 <__stack+0x171>
			if (port == 'A')
     4b8:	88 85       	ldd	r24, Y+8	; 0x08
     4ba:	81 34       	cpi	r24, 0x41	; 65
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <__stack+0x65>
				addr = 16;
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <__stack+0x6d>
			else if (port == 'C')
     4c4:	83 34       	cpi	r24, 0x43	; 67
     4c6:	b1 f4       	brne	.+44     	; 0x4f4 <__stack+0x95>
				addr = 48;
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	9e 83       	std	Y+6, r25	; 0x06
     4ce:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	90 ed       	ldi	r25, 0xD0	; 208
     4d4:	98 0f       	add	r25, r24
     4d6:	9a 30       	cpi	r25, 0x0A	; 10
     4d8:	90 f4       	brcc	.+36     	; 0x4fe <__stack+0x9f>
				addr += (pin - '0') * 4;
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	c0 97       	sbiw	r24, 0x30	; 48
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	2d 81       	ldd	r18, Y+5	; 0x05
     4e8:	3e 81       	ldd	r19, Y+6	; 0x06
     4ea:	28 0f       	add	r18, r24
     4ec:	39 1f       	adc	r19, r25
     4ee:	3e 83       	std	Y+6, r19	; 0x06
     4f0:	2d 83       	std	Y+5, r18	; 0x05
     4f2:	05 c0       	rjmp	.+10     	; 0x4fe <__stack+0x9f>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 15 06 	call	0xc2a	; 0xc2a <puts>
				return;
     4fc:	69 c0       	rjmp	.+210    	; 0x5d0 <__stack+0x171>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     4fe:	6c 81       	ldd	r22, Y+4	; 0x04
     500:	8d 81       	ldd	r24, Y+5	; 0x05
     502:	9e 81       	ldd	r25, Y+6	; 0x06
     504:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			writeEEPROM(addr + 1, time);
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	6b 81       	ldd	r22, Y+3	; 0x03
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     514:	6a 81       	ldd	r22, Y+2	; 0x02
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	9e 81       	ldd	r25, Y+6	; 0x06
     51a:	02 96       	adiw	r24, 0x02	; 2
     51c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     520:	8d 81       	ldd	r24, Y+5	; 0x05
     522:	9e 81       	ldd	r25, Y+6	; 0x06
     524:	69 81       	ldd	r22, Y+1	; 0x01
     526:	03 96       	adiw	r24, 0x03	; 3
     528:	0e 94 f7 02 	call	0x5ee	; 0x5ee <writeEEPROM>
			setDuty();
     52c:	0e 94 06 03 	call	0x60c	; 0x60c <setDuty>
     530:	4f c0       	rjmp	.+158    	; 0x5d0 <__stack+0x171>
		}
		break;
	case 'R':		// Reboot
		printf("REBOOTING\n");
     532:	8f ec       	ldi	r24, 0xCF	; 207
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 15 06 	call	0xc2a	; 0xc2a <puts>
		wdt_enable(WDTO_15MS);
     53a:	28 e0       	ldi	r18, 0x08	; 8
     53c:	88 e1       	ldi	r24, 0x18	; 24
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	a8 95       	wdr
     546:	81 bd       	out	0x21, r24	; 33
     548:	0f be       	out	0x3f, r0	; 63
     54a:	21 bd       	out	0x21, r18	; 33
     54c:	ff cf       	rjmp	.-2      	; 0x54c <__stack+0xed>
		while (1);
		break;
	case 'F':		// Print CPU frequency
		sprintf(buf, "F_CPU: %ld Hz\n", F_CPU);
     54e:	1f 92       	push	r1
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	8f 93       	push	r24
     554:	84 e2       	ldi	r24, 0x24	; 36
     556:	8f 93       	push	r24
     558:	1f 92       	push	r1
     55a:	89 ed       	ldi	r24, 0xD9	; 217
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	07 e5       	ldi	r16, 0x57	; 87
     564:	11 e0       	ldi	r17, 0x01	; 1
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
		printf(buf);
     56e:	1f 93       	push	r17
     570:	0f 93       	push	r16
     572:	27 c0       	rjmp	.+78     	; 0x5c2 <__stack+0x163>
		break;
	case 'S':
		printf("Time:%lds\n", g_seconds);
     574:	80 91 56 01 	lds	r24, 0x0156
     578:	8f 93       	push	r24
     57a:	80 91 55 01 	lds	r24, 0x0155
     57e:	8f 93       	push	r24
     580:	80 91 54 01 	lds	r24, 0x0154
     584:	8f 93       	push	r24
     586:	80 91 53 01 	lds	r24, 0x0153
     58a:	8f 93       	push	r24
     58c:	88 ee       	ldi	r24, 0xE8	; 232
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
		break;
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	15 c0       	rjmp	.+42     	; 0x5d0 <__stack+0x171>
	default:
		sprintf(buf, "Unrecognized code:%s\n", code);
     5a6:	1f 93       	push	r17
     5a8:	0f 93       	push	r16
     5aa:	83 ef       	ldi	r24, 0xF3	; 243
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	07 e5       	ldi	r16, 0x57	; 87
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	1f 93       	push	r17
     5b8:	0f 93       	push	r16
     5ba:	0e 94 42 06 	call	0xc84	; 0xc84 <sprintf>
		printf(buf);
     5be:	1f 93       	push	r17
     5c0:	0f 93       	push	r16
     5c2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
		break;
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
	}
}
     5d0:	28 96       	adiw	r28, 0x08	; 8
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     5ee:	e1 99       	sbic	0x1c, 1	; 28
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <writeEEPROM>
	EEAR = addr;
     5f2:	9f bb       	out	0x1f, r25	; 31
     5f4:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     5f6:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     5f8:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     5fa:	e1 9a       	sbi	0x1c, 1	; 28
     5fc:	08 95       	ret

000005fe <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     5fe:	e1 99       	sbic	0x1c, 1	; 28
     600:	fe cf       	rjmp	.-4      	; 0x5fe <readEEPROM>
	EEAR = addr;
     602:	9f bb       	out	0x1f, r25	; 31
     604:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     606:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     608:	8d b3       	in	r24, 0x1d	; 29
}
     60a:	08 95       	ret

0000060c <setDuty>:

void setDuty()
{
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	c0 e0       	ldi	r28, 0x00	; 0
     618:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     61a:	8e 01       	movw	r16, r28
     61c:	15 95       	asr	r17
     61e:	07 95       	ror	r16
     620:	15 95       	asr	r17
     622:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     624:	ce 01       	movw	r24, r28
     626:	40 96       	adiw	r24, 0x10	; 16
     628:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     62c:	f8 2e       	mov	r15, r24
     62e:	ce 01       	movw	r24, r28
     630:	41 96       	adiw	r24, 0x11	; 17
     632:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     636:	00 0f       	add	r16, r16
     638:	11 1f       	adc	r17, r17
     63a:	f8 01       	movw	r30, r16
     63c:	e3 54       	subi	r30, 0x43	; 67
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     640:	2f 2d       	mov	r18, r15
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	32 2f       	mov	r19, r18
     646:	22 27       	eor	r18, r18
     648:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     64a:	31 83       	std	Z+1, r19	; 0x01
     64c:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     64e:	ce 01       	movw	r24, r28
     650:	42 96       	adiw	r24, 0x12	; 18
     652:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     656:	f8 2e       	mov	r15, r24
     658:	ce 01       	movw	r24, r28
     65a:	43 96       	adiw	r24, 0x13	; 19
     65c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     660:	f8 01       	movw	r30, r16
     662:	e3 52       	subi	r30, 0x23	; 35
     664:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     666:	2f 2d       	mov	r18, r15
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	32 2f       	mov	r19, r18
     66c:	22 27       	eor	r18, r18
     66e:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	20 83       	st	Z, r18
     674:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     676:	c0 34       	cpi	r28, 0x40	; 64
     678:	d1 05       	cpc	r29, r1
     67a:	79 f6       	brne	.-98     	; 0x61a <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     67c:	40 91 fd 01 	lds	r20, 0x01FD
     680:	50 91 fe 01 	lds	r21, 0x01FE
     684:	cd eb       	ldi	r28, 0xBD	; 189
     686:	d1 e0       	ldi	r29, 0x01	; 1
     688:	ef ef       	ldi	r30, 0xFF	; 255
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	ad ed       	ldi	r26, 0xDD	; 221
     68e:	b1 e0       	ldi	r27, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	9b 01       	movw	r18, r22
     69a:	08 2e       	mov	r0, r24
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <setDuty+0x96>
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
     6a2:	0a 94       	dec	r0
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <setDuty+0x92>
     6a6:	24 23       	and	r18, r20
     6a8:	35 23       	and	r19, r21
     6aa:	23 2b       	or	r18, r19
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <setDuty+0xa8>
			m[i] = dutyH[i];
     6ae:	28 81       	ld	r18, Y
     6b0:	39 81       	ldd	r19, Y+1	; 0x01
     6b2:	03 c0       	rjmp	.+6      	; 0x6ba <setDuty+0xae>
		else
			m[i] = dutyL[i];
     6b4:	2d 91       	ld	r18, X+
     6b6:	3c 91       	ld	r19, X
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	31 83       	std	Z+1, r19	; 0x01
     6bc:	20 83       	st	Z, r18
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	22 96       	adiw	r28, 0x02	; 2
     6c2:	32 96       	adiw	r30, 0x02	; 2
     6c4:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     6c6:	80 31       	cpi	r24, 0x10	; 16
     6c8:	91 05       	cpc	r25, r1
     6ca:	31 f7       	brne	.-52     	; 0x698 <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	08 95       	ret

000006d8 <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	c4 56       	subi	r28, 0x64	; 100
     710:	d1 09       	sbc	r29, r1
     712:	de bf       	out	0x3e, r29	; 62
     714:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     716:	80 91 51 01 	lds	r24, 0x0151
     71a:	90 91 52 01 	lds	r25, 0x0152
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	90 93 52 01 	sts	0x0152, r25
     724:	80 93 51 01 	sts	0x0151, r24
	if (t > F_CPU / 256 / 1024) {
     728:	ce 97       	sbiw	r24, 0x3e	; 62
     72a:	08 f4       	brcc	.+2      	; 0x72e <__vector_9+0x56>
     72c:	9b c0       	rjmp	.+310    	; 0x864 <__vector_9+0x18c>
		g_seconds++;
     72e:	80 91 53 01 	lds	r24, 0x0153
     732:	90 91 54 01 	lds	r25, 0x0154
     736:	a0 91 55 01 	lds	r26, 0x0155
     73a:	b0 91 56 01 	lds	r27, 0x0156
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	a1 1d       	adc	r26, r1
     742:	b1 1d       	adc	r27, r1
     744:	80 93 53 01 	sts	0x0153, r24
     748:	90 93 54 01 	sts	0x0154, r25
     74c:	a0 93 55 01 	sts	0x0155, r26
     750:	b0 93 56 01 	sts	0x0156, r27

		t = 0;
     754:	10 92 52 01 	sts	0x0152, r1
     758:	10 92 51 01 	sts	0x0151, r1
		seconds++;
     75c:	80 91 4f 01 	lds	r24, 0x014F
     760:	90 91 50 01 	lds	r25, 0x0150
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 50 01 	sts	0x0150, r25
     76a:	80 93 4f 01 	sts	0x014F, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     76e:	80 91 60 00 	lds	r24, 0x0060
     772:	90 91 61 00 	lds	r25, 0x0061
     776:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     77a:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     77c:	80 91 60 00 	lds	r24, 0x0060
     780:	90 91 61 00 	lds	r25, 0x0061
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
		g_seconds++;

		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     78a:	21 2f       	mov	r18, r17
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	32 2f       	mov	r19, r18
     790:	22 27       	eor	r18, r18
	if (t > F_CPU / 256 / 1024) {
		g_seconds++;

		t = 0;
		seconds++;
		time =
     792:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     794:	2f 3f       	cpi	r18, 0xFF	; 255
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	38 07       	cpc	r19, r24
     79a:	09 f4       	brne	.+2      	; 0x79e <__vector_9+0xc6>
     79c:	63 c0       	rjmp	.+198    	; 0x864 <__vector_9+0x18c>
			if (seconds >= time) {
     79e:	80 91 4f 01 	lds	r24, 0x014F
     7a2:	90 91 50 01 	lds	r25, 0x0150
     7a6:	82 17       	cp	r24, r18
     7a8:	93 07       	cpc	r25, r19
     7aa:	08 f4       	brcc	.+2      	; 0x7ae <__vector_9+0xd6>
     7ac:	5b c0       	rjmp	.+182    	; 0x864 <__vector_9+0x18c>
				p -= 2;
     7ae:	80 91 60 00 	lds	r24, 0x0060
     7b2:	90 91 61 00 	lds	r25, 0x0061
     7b6:	02 97       	sbiw	r24, 0x02	; 2
     7b8:	90 93 61 00 	sts	0x0061, r25
     7bc:	80 93 60 00 	sts	0x0060, r24
     7c0:	fe 01       	movw	r30, r28
     7c2:	31 96       	adiw	r30, 0x01	; 1
     7c4:	7f 01       	movw	r14, r30
     7c6:	8f 01       	movw	r16, r30
     7c8:	67 01       	movw	r12, r14
     7ca:	c0 1a       	sub	r12, r16
     7cc:	d1 0a       	sbc	r13, r17
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     7ce:	80 91 60 00 	lds	r24, 0x0060
     7d2:	90 91 61 00 	lds	r25, 0x0061
     7d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     7da:	f7 01       	movw	r30, r14
     7dc:	81 93       	st	Z+, r24
     7de:	7f 01       	movw	r14, r30
     7e0:	20 91 60 00 	lds	r18, 0x0060
     7e4:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     7e8:	8a 30       	cpi	r24, 0x0A	; 10
     7ea:	99 f5       	brne	.+102    	; 0x852 <__vector_9+0x17a>
					    cmd[i + 1] = 0;
     7ec:	fe 01       	movw	r30, r28
     7ee:	ec 0d       	add	r30, r12
     7f0:	fd 1d       	adc	r31, r13
     7f2:	12 82       	std	Z+2, r1	; 0x02
						p--;
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
     7f8:	30 93 61 00 	sts	0x0061, r19
     7fc:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				printf("time:%ld\n", g_seconds);
     800:	80 91 56 01 	lds	r24, 0x0156
     804:	8f 93       	push	r24
     806:	80 91 55 01 	lds	r24, 0x0155
     80a:	8f 93       	push	r24
     80c:	80 91 54 01 	lds	r24, 0x0154
     810:	8f 93       	push	r24
     812:	80 91 53 01 	lds	r24, 0x0153
     816:	8f 93       	push	r24
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
				printf("Auto running command:");
     824:	83 e1       	ldi	r24, 0x13	; 19
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
				printf(cmd);
     830:	1f 93       	push	r17
     832:	0f 93       	push	r16
     834:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <printf>
				runCmd(cmd);
     838:	c8 01       	movw	r24, r16
     83a:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
				seconds = 0;
     83e:	10 92 50 01 	sts	0x0150, r1
     842:	10 92 4f 01 	sts	0x014F, r1
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	09 c0       	rjmp	.+18     	; 0x864 <__vector_9+0x18c>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     852:	83 31       	cpi	r24, 0x13	; 19
     854:	59 f2       	breq	.-106    	; 0x7ec <__vector_9+0x114>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     856:	21 50       	subi	r18, 0x01	; 1
     858:	31 09       	sbc	r19, r1
     85a:	30 93 61 00 	sts	0x0061, r19
     85e:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     862:	b2 cf       	rjmp	.-156    	; 0x7c8 <__vector_9+0xf0>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     864:	cc 59       	subi	r28, 0x9C	; 156
     866:	df 4f       	sbci	r29, 0xFF	; 255
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     8ce:	80 91 4d 01 	lds	r24, 0x014D
     8d2:	90 91 4e 01 	lds	r25, 0x014E
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	90 93 4e 01 	sts	0x014E, r25
     8dc:	80 93 4d 01 	sts	0x014D, r24
	if (t > F_CPU / 256 / 1024) {
     8e0:	ce 97       	sbiw	r24, 0x3e	; 62
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__vector_4+0x42>
     8e4:	61 c0       	rjmp	.+194    	; 0x9a8 <__vector_4+0x104>
		t = 0;
     8e6:	10 92 4e 01 	sts	0x014E, r1
     8ea:	10 92 4d 01 	sts	0x014D, r1
		sec++;
     8ee:	80 91 4c 01 	lds	r24, 0x014C
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 4c 01 	sts	0x014C, r24
		if (sec >= 60) {
     8f8:	8c 33       	cpi	r24, 0x3C	; 60
     8fa:	08 f4       	brcc	.+2      	; 0x8fe <__vector_4+0x5a>
     8fc:	55 c0       	rjmp	.+170    	; 0x9a8 <__vector_4+0x104>
			sec = 0;
     8fe:	10 92 4c 01 	sts	0x014C, r1
     902:	ef ef       	ldi	r30, 0xFF	; 255
     904:	f1 e0       	ldi	r31, 0x01	; 1
     906:	cd ed       	ldi	r28, 0xDD	; 221
     908:	d1 e0       	ldi	r29, 0x01	; 1
     90a:	ad eb       	ldi	r26, 0xBD	; 189
     90c:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     916:	40 81       	ld	r20, Z
     918:	51 81       	ldd	r21, Z+1	; 0x01
     91a:	41 15       	cp	r20, r1
     91c:	51 05       	cpc	r21, r1
     91e:	29 f0       	breq	.+10     	; 0x92a <__vector_4+0x86>
					m[i]--;
     920:	41 50       	subi	r20, 0x01	; 1
     922:	51 09       	sbc	r21, r1
     924:	51 83       	std	Z+1, r21	; 0x01
     926:	40 83       	st	Z, r20
     928:	37 c0       	rjmp	.+110    	; 0x998 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     92a:	88 30       	cpi	r24, 0x08	; 8
     92c:	91 05       	cpc	r25, r1
     92e:	50 f4       	brcc	.+20     	; 0x944 <__vector_4+0xa0>
						PORTA ^= 1 << i;
     930:	6b b3       	in	r22, 0x1b	; 27
     932:	a9 01       	movw	r20, r18
     934:	08 2e       	mov	r0, r24
     936:	01 c0       	rjmp	.+2      	; 0x93a <__vector_4+0x96>
     938:	44 0f       	add	r20, r20
     93a:	0a 94       	dec	r0
     93c:	ea f7       	brpl	.-6      	; 0x938 <__vector_4+0x94>
     93e:	64 27       	eor	r22, r20
     940:	6b bb       	out	0x1b, r22	; 27
     942:	0c c0       	rjmp	.+24     	; 0x95c <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     944:	65 b3       	in	r22, 0x15	; 21
     946:	ac 01       	movw	r20, r24
     948:	48 50       	subi	r20, 0x08	; 8
     94a:	51 09       	sbc	r21, r1
     94c:	89 01       	movw	r16, r18
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__vector_4+0xb0>
     950:	00 0f       	add	r16, r16
     952:	11 1f       	adc	r17, r17
     954:	4a 95       	dec	r20
     956:	e2 f7       	brpl	.-8      	; 0x950 <__vector_4+0xac>
     958:	60 27       	eor	r22, r16
     95a:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     95c:	60 91 fd 01 	lds	r22, 0x01FD
     960:	70 91 fe 01 	lds	r23, 0x01FE
     964:	a9 01       	movw	r20, r18
     966:	08 2e       	mov	r0, r24
     968:	02 c0       	rjmp	.+4      	; 0x96e <__vector_4+0xca>
     96a:	44 0f       	add	r20, r20
     96c:	55 1f       	adc	r21, r21
     96e:	0a 94       	dec	r0
     970:	e2 f7       	brpl	.-8      	; 0x96a <__vector_4+0xc6>
     972:	8a 01       	movw	r16, r20
     974:	06 23       	and	r16, r22
     976:	17 23       	and	r17, r23
     978:	01 2b       	or	r16, r17
     97a:	19 f0       	breq	.+6      	; 0x982 <__vector_4+0xde>
						m[i] = dutyL[i];
     97c:	08 81       	ld	r16, Y
     97e:	19 81       	ldd	r17, Y+1	; 0x01
     980:	03 c0       	rjmp	.+6      	; 0x988 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     982:	0d 91       	ld	r16, X+
     984:	1c 91       	ld	r17, X
     986:	11 97       	sbiw	r26, 0x01	; 1
     988:	11 83       	std	Z+1, r17	; 0x01
     98a:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     98c:	46 27       	eor	r20, r22
     98e:	57 27       	eor	r21, r23
     990:	50 93 fe 01 	sts	0x01FE, r21
     994:	40 93 fd 01 	sts	0x01FD, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	32 96       	adiw	r30, 0x02	; 2
     99c:	22 96       	adiw	r28, 0x02	; 2
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	80 31       	cpi	r24, 0x10	; 16
     9a2:	91 05       	cpc	r25, r1
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <__vector_4+0x104>
     9a6:	b7 cf       	rjmp	.-146    	; 0x916 <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_11>:

ISR(USART_RXC_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	c4 56       	subi	r28, 0x64	; 100
     a0a:	d1 09       	sbc	r29, r1
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	cd bf       	out	0x3d, r28	; 61
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	7c 01       	movw	r14, r24
     a16:	00 e0       	ldi	r16, 0x00	; 0
     a18:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     a1a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <receiveUSART>
     a1e:	f7 01       	movw	r30, r14
     a20:	81 93       	st	Z+, r24
     a22:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     a24:	83 31       	cpi	r24, 0x13	; 19
     a26:	41 f4       	brne	.+16     	; 0xa38 <__vector_11+0x66>
			codeUSART[i] = '\0';
     a28:	e1 e0       	ldi	r30, 0x01	; 1
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ec 0f       	add	r30, r28
     a2e:	fd 1f       	adc	r31, r29
     a30:	e0 0f       	add	r30, r16
     a32:	f1 1f       	adc	r31, r17
     a34:	10 82       	st	Z, r1
			break;
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     a38:	8a 30       	cpi	r24, 0x0A	; 10
     a3a:	b1 f3       	breq	.-20     	; 0xa28 <__vector_11+0x56>
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     a40:	04 36       	cpi	r16, 0x64	; 100
     a42:	11 05       	cpc	r17, r1
     a44:	51 f7       	brne	.-44     	; 0xa1a <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	88 23       	and	r24, r24
     a4a:	e1 f0       	breq	.+56     	; 0xa84 <__vector_11+0xb2>
		printf("\nReceived:\n");
     a4c:	89 e2       	ldi	r24, 0x29	; 41
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 15 06 	call	0xc2a	; 0xc2a <puts>
     a54:	6e 01       	movw	r12, r28
     a56:	f5 e6       	ldi	r31, 0x65	; 101
     a58:	cf 0e       	add	r12, r31
     a5a:	d1 1c       	adc	r13, r1
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
     a62:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     a64:	f8 01       	movw	r30, r16
     a66:	81 91       	ld	r24, Z+
     a68:	8f 01       	movw	r16, r30
     a6a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <sendUSART>
			if (codeUSART[i] == '\0')
     a6e:	f7 01       	movw	r30, r14
     a70:	80 81       	ld	r24, Z
     a72:	88 23       	and	r24, r24
     a74:	19 f0       	breq	.+6      	; 0xa7c <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		printf("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     a76:	0c 15       	cp	r16, r12
     a78:	1d 05       	cpc	r17, r13
     a7a:	99 f7       	brne	.-26     	; 0xa62 <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		printf("\n");
     a7c:	8a e0       	ldi	r24, 0x0A	; 10
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 0e 06 	call	0xc1c	; 0xc1c <putchar>
	}

	runCmd(codeUSART);
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
}
     a8c:	cc 59       	subi	r28, 0x9C	; 156
     a8e:	df 4f       	sbci	r29, 0xFF	; 255
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	bf 91       	pop	r27
     aa4:	af 91       	pop	r26
     aa6:	9f 91       	pop	r25
     aa8:	8f 91       	pop	r24
     aaa:	7f 91       	pop	r23
     aac:	6f 91       	pop	r22
     aae:	5f 91       	pop	r21
     ab0:	4f 91       	pop	r20
     ab2:	3f 91       	pop	r19
     ab4:	2f 91       	pop	r18
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <main>:

int main()
{
	uint8_t i;

	cli();
     acc:	f8 94       	cli

	wdt_enable(WDTO_60MS);
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	88 e1       	ldi	r24, 0x18	; 24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	a8 95       	wdr
     ada:	81 bd       	out	0x21, r24	; 33
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	21 bd       	out	0x21, r18	; 33
     ae0:	c0 e0       	ldi	r28, 0x00	; 0
     ae2:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     ae4:	8b b3       	in	r24, 0x1b	; 27
     ae6:	86 95       	lsr	r24
     ae8:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     aea:	1b b3       	in	r17, 0x1b	; 27
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     af2:	20 e8       	ldi	r18, 0x80	; 128
     af4:	82 9f       	mul	r24, r18
     af6:	c0 01       	movw	r24, r0
     af8:	11 24       	eor	r1, r1
     afa:	81 2b       	or	r24, r17
     afc:	8b bb       	out	0x1b, r24	; 27
     afe:	21 96       	adiw	r28, 0x01	; 1

	cli();

	wdt_enable(WDTO_60MS);

	for (i = 0; i < 8; i++) {
     b00:	c8 30       	cpi	r28, 0x08	; 8
     b02:	d1 05       	cpc	r29, r1
     b04:	79 f7       	brne	.-34     	; 0xae4 <main+0x18>
     b06:	c8 e0       	ldi	r28, 0x08	; 8
     b08:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     b0a:	85 b3       	in	r24, 0x15	; 21
     b0c:	86 95       	lsr	r24
     b0e:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     b10:	15 b3       	in	r17, 0x15	; 21
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     b18:	20 e8       	ldi	r18, 0x80	; 128
     b1a:	82 9f       	mul	r24, r18
     b1c:	c0 01       	movw	r24, r0
     b1e:	11 24       	eor	r1, r1
     b20:	81 2b       	or	r24, r17
     b22:	85 bb       	out	0x15, r24	; 21
     b24:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     b26:	c0 31       	cpi	r28, 0x10	; 16
     b28:	d1 05       	cpc	r29, r1
     b2a:	79 f7       	brne	.-34     	; 0xb0a <main+0x3e>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	DDRA = 0xff;
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     b30:	84 bb       	out	0x14, r24	; 20

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	90 93 bc 01 	sts	0x01BC, r25
     b3a:	80 93 bb 01 	sts	0x01BB, r24
     b3e:	80 91 bb 01 	lds	r24, 0x01BB
     b42:	90 91 bc 01 	lds	r25, 0x01BC
     b46:	0e 94 ff 02 	call	0x5fe	; 0x5fe <readEEPROM>
     b4a:	8f 3f       	cpi	r24, 0xFF	; 255
     b4c:	31 f0       	breq	.+12     	; 0xb5a <main+0x8e>
     b4e:	80 91 bb 01 	lds	r24, 0x01BB
     b52:	90 91 bc 01 	lds	r25, 0x01BC
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	ee cf       	rjmp	.-36     	; 0xb36 <main+0x6a>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     b5a:	25 b3       	in	r18, 0x15	; 21
     b5c:	8b b3       	in	r24, 0x1b	; 27
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	92 2b       	or	r25, r18
     b62:	90 93 fe 01 	sts	0x01FE, r25
     b66:	80 93 fd 01 	sts	0x01FD, r24

	initUSART();
     b6a:	0e 94 d2 05 	call	0xba4	; 0xba4 <initUSART>

	setDuty();
     b6e:	0e 94 06 03 	call	0x60c	; 0x60c <setDuty>

	initTimer0();
     b72:	0e 94 c4 05 	call	0xb88	; 0xb88 <initTimer0>

	initTimer2();
     b76:	0e 94 cb 05 	call	0xb96	; 0xb96 <initTimer2>

	sei();
     b7a:	78 94       	sei

	printf("\nEntering the main loop\n");
     b7c:	84 e3       	ldi	r24, 0x34	; 52
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 15 06 	call	0xc2a	; 0xc2a <puts>
	while (1) {
		wdt_reset();
     b84:	a8 95       	wdr
     b86:	fe cf       	rjmp	.-4      	; 0xb84 <main+0xb8>

00000b88 <initTimer0>:

uint32_t g_seconds = 0;

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     b8c:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     b8e:	89 b7       	in	r24, 0x39	; 57
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	89 bf       	out	0x39, r24	; 57
     b94:	08 95       	ret

00000b96 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     b96:	87 e0       	ldi	r24, 0x07	; 7
     b98:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     b9a:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     b9c:	89 b7       	in	r24, 0x39	; 57
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	89 bf       	out	0x39, r24	; 57
     ba2:	08 95       	ret

00000ba4 <initUSART>:

static FILE mystdout = FDEV_SETUP_STREAM(myfputc, NULL,_FDEV_SETUP_WRITE);

void initUSART()
{
	UCSRA |= (1 << U2X);
     ba4:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     ba6:	10 bc       	out	0x20, r1	; 32
	UBRRL = 207;		// 9600Hz on 16MHz F_CPU
     ba8:	8f ec       	ldi	r24, 0xCF	; 207
     baa:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     bac:	88 e9       	ldi	r24, 0x98	; 152
     bae:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     bb0:	86 e8       	ldi	r24, 0x86	; 134
     bb2:	80 bd       	out	0x20, r24	; 32

	stdout = &mystdout;
     bb4:	82 e6       	ldi	r24, 0x62	; 98
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 22 02 	sts	0x0222, r25
     bbc:	80 93 21 02 	sts	0x0221, r24
     bc0:	08 95       	ret

00000bc2 <sendUSART>:
}

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE)))
     bc2:	5d 99       	sbic	0x0b, 5	; 11
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <sendUSART+0x8>
		wdt_reset();
     bc6:	a8 95       	wdr
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <sendUSART>
	UDR = data;
     bca:	8c b9       	out	0x0c, r24	; 12
     bcc:	08 95       	ret

00000bce <myfputc>:
		wdt_reset();
	return UDR;
}

char myfputc(char ch, FILE *f)
{
     bce:	cf 93       	push	r28
     bd0:	c8 2f       	mov	r28, r24
	sendUSART(ch);
     bd2:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <sendUSART>
	return ch;
}
     bd6:	8c 2f       	mov	r24, r28
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <receiveUSART>:
	UDR = data;
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC)))
     bdc:	5f 99       	sbic	0x0b, 7	; 11
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <receiveUSART+0x8>
		wdt_reset();
     be0:	a8 95       	wdr
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <receiveUSART>
	return UDR;
     be4:	8c b1       	in	r24, 0x0c	; 12
}
     be6:	08 95       	ret

00000be8 <__tablejump2__>:
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31

00000bec <__tablejump__>:
     bec:	05 90       	lpm	r0, Z+
     bee:	f4 91       	lpm	r31, Z
     bf0:	e0 2d       	mov	r30, r0
     bf2:	09 94       	ijmp

00000bf4 <printf>:
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__prologue_saves__+0x20>
     c00:	fe 01       	movw	r30, r28
     c02:	35 96       	adiw	r30, 0x05	; 5
     c04:	61 91       	ld	r22, Z+
     c06:	71 91       	ld	r23, Z+
     c08:	af 01       	movw	r20, r30
     c0a:	80 91 21 02 	lds	r24, 0x0221
     c0e:	90 91 22 02 	lds	r25, 0x0222
     c12:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vfprintf>
     c16:	e2 e0       	ldi	r30, 0x02	; 2
     c18:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__epilogue_restores__+0x20>

00000c1c <putchar>:
     c1c:	60 91 21 02 	lds	r22, 0x0221
     c20:	70 91 22 02 	lds	r23, 0x0222
     c24:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
     c28:	08 95       	ret

00000c2a <puts>:
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	e0 91 21 02 	lds	r30, 0x0221
     c36:	f0 91 22 02 	lds	r31, 0x0222
     c3a:	23 81       	ldd	r18, Z+3	; 0x03
     c3c:	21 ff       	sbrs	r18, 1
     c3e:	1b c0       	rjmp	.+54     	; 0xc76 <puts+0x4c>
     c40:	ec 01       	movw	r28, r24
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	89 91       	ld	r24, Y+
     c48:	60 91 21 02 	lds	r22, 0x0221
     c4c:	70 91 22 02 	lds	r23, 0x0222
     c50:	db 01       	movw	r26, r22
     c52:	18 96       	adiw	r26, 0x08	; 8
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	19 97       	sbiw	r26, 0x09	; 9
     c5a:	88 23       	and	r24, r24
     c5c:	31 f0       	breq	.+12     	; 0xc6a <puts+0x40>
     c5e:	09 95       	icall
     c60:	89 2b       	or	r24, r25
     c62:	89 f3       	breq	.-30     	; 0xc46 <puts+0x1c>
     c64:	0f ef       	ldi	r16, 0xFF	; 255
     c66:	1f ef       	ldi	r17, 0xFF	; 255
     c68:	ee cf       	rjmp	.-36     	; 0xc46 <puts+0x1c>
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	09 95       	icall
     c6e:	89 2b       	or	r24, r25
     c70:	11 f4       	brne	.+4      	; 0xc76 <puts+0x4c>
     c72:	c8 01       	movw	r24, r16
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <puts+0x50>
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	9f ef       	ldi	r25, 0xFF	; 255
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <sprintf>:
     c84:	ae e0       	ldi	r26, 0x0E	; 14
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e4       	ldi	r30, 0x48	; 72
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__prologue_saves__+0x1c>
     c90:	0d 89       	ldd	r16, Y+21	; 0x15
     c92:	1e 89       	ldd	r17, Y+22	; 0x16
     c94:	86 e0       	ldi	r24, 0x06	; 6
     c96:	8c 83       	std	Y+4, r24	; 0x04
     c98:	1a 83       	std	Y+2, r17	; 0x02
     c9a:	09 83       	std	Y+1, r16	; 0x01
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	9f e7       	ldi	r25, 0x7F	; 127
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	ae 01       	movw	r20, r28
     ca6:	47 5e       	subi	r20, 0xE7	; 231
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	6f 89       	ldd	r22, Y+23	; 0x17
     cac:	78 8d       	ldd	r23, Y+24	; 0x18
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vfprintf>
     cb6:	ef 81       	ldd	r30, Y+7	; 0x07
     cb8:	f8 85       	ldd	r31, Y+8	; 0x08
     cba:	e0 0f       	add	r30, r16
     cbc:	f1 1f       	adc	r31, r17
     cbe:	10 82       	st	Z, r1
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	e4 e0       	ldi	r30, 0x04	; 4
     cc4:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__epilogue_restores__+0x1c>

00000cc8 <sscanf>:
     cc8:	ae e0       	ldi	r26, 0x0E	; 14
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e6       	ldi	r30, 0x6A	; 106
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__prologue_saves__+0x20>
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	8c 83       	std	Y+4, r24	; 0x04
     cd8:	8b 89       	ldd	r24, Y+19	; 0x13
     cda:	9c 89       	ldd	r25, Y+20	; 0x14
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	ae 01       	movw	r20, r28
     ce2:	49 5e       	subi	r20, 0xE9	; 233
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	6d 89       	ldd	r22, Y+21	; 0x15
     ce8:	7e 89       	ldd	r23, Y+22	; 0x16
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	0e 94 cd 09 	call	0x139a	; 0x139a <vfscanf>
     cf2:	2e 96       	adiw	r28, 0x0e	; 14
     cf4:	e2 e0       	ldi	r30, 0x02	; 2
     cf6:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__epilogue_restores__+0x20>

00000cfa <vfprintf>:
     cfa:	ac e0       	ldi	r26, 0x0C	; 12
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e8       	ldi	r30, 0x83	; 131
     d00:	f6 e0       	ldi	r31, 0x06	; 6
     d02:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__prologue_saves__>
     d06:	7c 01       	movw	r14, r24
     d08:	6b 01       	movw	r12, r22
     d0a:	8a 01       	movw	r16, r20
     d0c:	fc 01       	movw	r30, r24
     d0e:	17 82       	std	Z+7, r1	; 0x07
     d10:	16 82       	std	Z+6, r1	; 0x06
     d12:	83 81       	ldd	r24, Z+3	; 0x03
     d14:	81 ff       	sbrs	r24, 1
     d16:	bd c1       	rjmp	.+890    	; 0x1092 <vfprintf+0x398>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	4c 01       	movw	r8, r24
     d1e:	f7 01       	movw	r30, r14
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	f6 01       	movw	r30, r12
     d24:	93 fd       	sbrc	r25, 3
     d26:	85 91       	lpm	r24, Z+
     d28:	93 ff       	sbrs	r25, 3
     d2a:	81 91       	ld	r24, Z+
     d2c:	6f 01       	movw	r12, r30
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <vfprintf+0x3a>
     d32:	ab c1       	rjmp	.+854    	; 0x108a <vfprintf+0x390>
     d34:	85 32       	cpi	r24, 0x25	; 37
     d36:	39 f4       	brne	.+14     	; 0xd46 <vfprintf+0x4c>
     d38:	93 fd       	sbrc	r25, 3
     d3a:	85 91       	lpm	r24, Z+
     d3c:	93 ff       	sbrs	r25, 3
     d3e:	81 91       	ld	r24, Z+
     d40:	6f 01       	movw	r12, r30
     d42:	85 32       	cpi	r24, 0x25	; 37
     d44:	29 f4       	brne	.+10     	; 0xd50 <vfprintf+0x56>
     d46:	b7 01       	movw	r22, r14
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
     d4e:	e7 cf       	rjmp	.-50     	; 0xd1e <vfprintf+0x24>
     d50:	51 2c       	mov	r5, r1
     d52:	31 2c       	mov	r3, r1
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	20 32       	cpi	r18, 0x20	; 32
     d58:	a0 f4       	brcc	.+40     	; 0xd82 <vfprintf+0x88>
     d5a:	8b 32       	cpi	r24, 0x2B	; 43
     d5c:	69 f0       	breq	.+26     	; 0xd78 <vfprintf+0x7e>
     d5e:	30 f4       	brcc	.+12     	; 0xd6c <vfprintf+0x72>
     d60:	80 32       	cpi	r24, 0x20	; 32
     d62:	59 f0       	breq	.+22     	; 0xd7a <vfprintf+0x80>
     d64:	83 32       	cpi	r24, 0x23	; 35
     d66:	69 f4       	brne	.+26     	; 0xd82 <vfprintf+0x88>
     d68:	20 61       	ori	r18, 0x10	; 16
     d6a:	2c c0       	rjmp	.+88     	; 0xdc4 <vfprintf+0xca>
     d6c:	8d 32       	cpi	r24, 0x2D	; 45
     d6e:	39 f0       	breq	.+14     	; 0xd7e <vfprintf+0x84>
     d70:	80 33       	cpi	r24, 0x30	; 48
     d72:	39 f4       	brne	.+14     	; 0xd82 <vfprintf+0x88>
     d74:	21 60       	ori	r18, 0x01	; 1
     d76:	26 c0       	rjmp	.+76     	; 0xdc4 <vfprintf+0xca>
     d78:	22 60       	ori	r18, 0x02	; 2
     d7a:	24 60       	ori	r18, 0x04	; 4
     d7c:	23 c0       	rjmp	.+70     	; 0xdc4 <vfprintf+0xca>
     d7e:	28 60       	ori	r18, 0x08	; 8
     d80:	21 c0       	rjmp	.+66     	; 0xdc4 <vfprintf+0xca>
     d82:	27 fd       	sbrc	r18, 7
     d84:	27 c0       	rjmp	.+78     	; 0xdd4 <vfprintf+0xda>
     d86:	30 ed       	ldi	r19, 0xD0	; 208
     d88:	38 0f       	add	r19, r24
     d8a:	3a 30       	cpi	r19, 0x0A	; 10
     d8c:	78 f4       	brcc	.+30     	; 0xdac <vfprintf+0xb2>
     d8e:	26 ff       	sbrs	r18, 6
     d90:	06 c0       	rjmp	.+12     	; 0xd9e <vfprintf+0xa4>
     d92:	fa e0       	ldi	r31, 0x0A	; 10
     d94:	5f 9e       	mul	r5, r31
     d96:	30 0d       	add	r19, r0
     d98:	11 24       	eor	r1, r1
     d9a:	53 2e       	mov	r5, r19
     d9c:	13 c0       	rjmp	.+38     	; 0xdc4 <vfprintf+0xca>
     d9e:	8a e0       	ldi	r24, 0x0A	; 10
     da0:	38 9e       	mul	r3, r24
     da2:	30 0d       	add	r19, r0
     da4:	11 24       	eor	r1, r1
     da6:	33 2e       	mov	r3, r19
     da8:	20 62       	ori	r18, 0x20	; 32
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <vfprintf+0xca>
     dac:	8e 32       	cpi	r24, 0x2E	; 46
     dae:	21 f4       	brne	.+8      	; 0xdb8 <vfprintf+0xbe>
     db0:	26 fd       	sbrc	r18, 6
     db2:	6b c1       	rjmp	.+726    	; 0x108a <vfprintf+0x390>
     db4:	20 64       	ori	r18, 0x40	; 64
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0xca>
     db8:	8c 36       	cpi	r24, 0x6C	; 108
     dba:	11 f4       	brne	.+4      	; 0xdc0 <vfprintf+0xc6>
     dbc:	20 68       	ori	r18, 0x80	; 128
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0xca>
     dc0:	88 36       	cpi	r24, 0x68	; 104
     dc2:	41 f4       	brne	.+16     	; 0xdd4 <vfprintf+0xda>
     dc4:	f6 01       	movw	r30, r12
     dc6:	93 fd       	sbrc	r25, 3
     dc8:	85 91       	lpm	r24, Z+
     dca:	93 ff       	sbrs	r25, 3
     dcc:	81 91       	ld	r24, Z+
     dce:	6f 01       	movw	r12, r30
     dd0:	81 11       	cpse	r24, r1
     dd2:	c1 cf       	rjmp	.-126    	; 0xd56 <vfprintf+0x5c>
     dd4:	98 2f       	mov	r25, r24
     dd6:	9f 7d       	andi	r25, 0xDF	; 223
     dd8:	95 54       	subi	r25, 0x45	; 69
     dda:	93 30       	cpi	r25, 0x03	; 3
     ddc:	28 f4       	brcc	.+10     	; 0xde8 <vfprintf+0xee>
     dde:	0c 5f       	subi	r16, 0xFC	; 252
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	ff e3       	ldi	r31, 0x3F	; 63
     de4:	f9 83       	std	Y+1, r31	; 0x01
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <vfprintf+0x108>
     de8:	83 36       	cpi	r24, 0x63	; 99
     dea:	31 f0       	breq	.+12     	; 0xdf8 <vfprintf+0xfe>
     dec:	83 37       	cpi	r24, 0x73	; 115
     dee:	71 f0       	breq	.+28     	; 0xe0c <vfprintf+0x112>
     df0:	83 35       	cpi	r24, 0x53	; 83
     df2:	09 f0       	breq	.+2      	; 0xdf6 <vfprintf+0xfc>
     df4:	5b c0       	rjmp	.+182    	; 0xeac <vfprintf+0x1b2>
     df6:	22 c0       	rjmp	.+68     	; 0xe3c <vfprintf+0x142>
     df8:	f8 01       	movw	r30, r16
     dfa:	80 81       	ld	r24, Z
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	0e 5f       	subi	r16, 0xFE	; 254
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	44 24       	eor	r4, r4
     e04:	43 94       	inc	r4
     e06:	51 2c       	mov	r5, r1
     e08:	54 01       	movw	r10, r8
     e0a:	15 c0       	rjmp	.+42     	; 0xe36 <vfprintf+0x13c>
     e0c:	38 01       	movw	r6, r16
     e0e:	f2 e0       	ldi	r31, 0x02	; 2
     e10:	6f 0e       	add	r6, r31
     e12:	71 1c       	adc	r7, r1
     e14:	f8 01       	movw	r30, r16
     e16:	a0 80       	ld	r10, Z
     e18:	b1 80       	ldd	r11, Z+1	; 0x01
     e1a:	26 ff       	sbrs	r18, 6
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <vfprintf+0x12a>
     e1e:	65 2d       	mov	r22, r5
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x12e>
     e24:	6f ef       	ldi	r22, 0xFF	; 255
     e26:	7f ef       	ldi	r23, 0xFF	; 255
     e28:	c5 01       	movw	r24, r10
     e2a:	2c 87       	std	Y+12, r18	; 0x0c
     e2c:	0e 94 22 0b 	call	0x1644	; 0x1644 <strnlen>
     e30:	2c 01       	movw	r4, r24
     e32:	83 01       	movw	r16, r6
     e34:	2c 85       	ldd	r18, Y+12	; 0x0c
     e36:	2f 77       	andi	r18, 0x7F	; 127
     e38:	22 2e       	mov	r2, r18
     e3a:	17 c0       	rjmp	.+46     	; 0xe6a <vfprintf+0x170>
     e3c:	38 01       	movw	r6, r16
     e3e:	f2 e0       	ldi	r31, 0x02	; 2
     e40:	6f 0e       	add	r6, r31
     e42:	71 1c       	adc	r7, r1
     e44:	f8 01       	movw	r30, r16
     e46:	a0 80       	ld	r10, Z
     e48:	b1 80       	ldd	r11, Z+1	; 0x01
     e4a:	26 ff       	sbrs	r18, 6
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <vfprintf+0x15a>
     e4e:	65 2d       	mov	r22, r5
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x15e>
     e54:	6f ef       	ldi	r22, 0xFF	; 255
     e56:	7f ef       	ldi	r23, 0xFF	; 255
     e58:	c5 01       	movw	r24, r10
     e5a:	2c 87       	std	Y+12, r18	; 0x0c
     e5c:	0e 94 17 0b 	call	0x162e	; 0x162e <strnlen_P>
     e60:	2c 01       	movw	r4, r24
     e62:	2c 85       	ldd	r18, Y+12	; 0x0c
     e64:	20 68       	ori	r18, 0x80	; 128
     e66:	22 2e       	mov	r2, r18
     e68:	83 01       	movw	r16, r6
     e6a:	23 fc       	sbrc	r2, 3
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <vfprintf+0x1aa>
     e6e:	83 2d       	mov	r24, r3
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	48 16       	cp	r4, r24
     e74:	59 06       	cpc	r5, r25
     e76:	b0 f4       	brcc	.+44     	; 0xea4 <vfprintf+0x1aa>
     e78:	b7 01       	movw	r22, r14
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
     e82:	3a 94       	dec	r3
     e84:	f4 cf       	rjmp	.-24     	; 0xe6e <vfprintf+0x174>
     e86:	f5 01       	movw	r30, r10
     e88:	27 fc       	sbrc	r2, 7
     e8a:	85 91       	lpm	r24, Z+
     e8c:	27 fe       	sbrs	r2, 7
     e8e:	81 91       	ld	r24, Z+
     e90:	5f 01       	movw	r10, r30
     e92:	b7 01       	movw	r22, r14
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
     e9a:	31 10       	cpse	r3, r1
     e9c:	3a 94       	dec	r3
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	4f 1a       	sub	r4, r31
     ea2:	51 08       	sbc	r5, r1
     ea4:	41 14       	cp	r4, r1
     ea6:	51 04       	cpc	r5, r1
     ea8:	71 f7       	brne	.-36     	; 0xe86 <vfprintf+0x18c>
     eaa:	e5 c0       	rjmp	.+458    	; 0x1076 <vfprintf+0x37c>
     eac:	84 36       	cpi	r24, 0x64	; 100
     eae:	11 f0       	breq	.+4      	; 0xeb4 <vfprintf+0x1ba>
     eb0:	89 36       	cpi	r24, 0x69	; 105
     eb2:	39 f5       	brne	.+78     	; 0xf02 <vfprintf+0x208>
     eb4:	f8 01       	movw	r30, r16
     eb6:	27 ff       	sbrs	r18, 7
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <vfprintf+0x1ce>
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	0c 5f       	subi	r16, 0xFC	; 252
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <vfprintf+0x1de>
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	88 27       	eor	r24, r24
     ece:	77 fd       	sbrc	r23, 7
     ed0:	80 95       	com	r24
     ed2:	98 2f       	mov	r25, r24
     ed4:	0e 5f       	subi	r16, 0xFE	; 254
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	2f 76       	andi	r18, 0x6F	; 111
     eda:	b2 2e       	mov	r11, r18
     edc:	97 ff       	sbrs	r25, 7
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <vfprintf+0x1f8>
     ee0:	90 95       	com	r25
     ee2:	80 95       	com	r24
     ee4:	70 95       	com	r23
     ee6:	61 95       	neg	r22
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	20 68       	ori	r18, 0x80	; 128
     ef0:	b2 2e       	mov	r11, r18
     ef2:	2a e0       	ldi	r18, 0x0A	; 10
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	a4 01       	movw	r20, r8
     ef8:	0e 94 b6 0b 	call	0x176c	; 0x176c <__ultoa_invert>
     efc:	a8 2e       	mov	r10, r24
     efe:	a8 18       	sub	r10, r8
     f00:	44 c0       	rjmp	.+136    	; 0xf8a <vfprintf+0x290>
     f02:	85 37       	cpi	r24, 0x75	; 117
     f04:	29 f4       	brne	.+10     	; 0xf10 <vfprintf+0x216>
     f06:	2f 7e       	andi	r18, 0xEF	; 239
     f08:	b2 2e       	mov	r11, r18
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	25 c0       	rjmp	.+74     	; 0xf5a <vfprintf+0x260>
     f10:	f2 2f       	mov	r31, r18
     f12:	f9 7f       	andi	r31, 0xF9	; 249
     f14:	bf 2e       	mov	r11, r31
     f16:	8f 36       	cpi	r24, 0x6F	; 111
     f18:	c1 f0       	breq	.+48     	; 0xf4a <vfprintf+0x250>
     f1a:	18 f4       	brcc	.+6      	; 0xf22 <vfprintf+0x228>
     f1c:	88 35       	cpi	r24, 0x58	; 88
     f1e:	79 f0       	breq	.+30     	; 0xf3e <vfprintf+0x244>
     f20:	b4 c0       	rjmp	.+360    	; 0x108a <vfprintf+0x390>
     f22:	80 37       	cpi	r24, 0x70	; 112
     f24:	19 f0       	breq	.+6      	; 0xf2c <vfprintf+0x232>
     f26:	88 37       	cpi	r24, 0x78	; 120
     f28:	21 f0       	breq	.+8      	; 0xf32 <vfprintf+0x238>
     f2a:	af c0       	rjmp	.+350    	; 0x108a <vfprintf+0x390>
     f2c:	2f 2f       	mov	r18, r31
     f2e:	20 61       	ori	r18, 0x10	; 16
     f30:	b2 2e       	mov	r11, r18
     f32:	b4 fe       	sbrs	r11, 4
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <vfprintf+0x256>
     f36:	8b 2d       	mov	r24, r11
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	b8 2e       	mov	r11, r24
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <vfprintf+0x256>
     f3e:	24 ff       	sbrs	r18, 4
     f40:	0a c0       	rjmp	.+20     	; 0xf56 <vfprintf+0x25c>
     f42:	9f 2f       	mov	r25, r31
     f44:	96 60       	ori	r25, 0x06	; 6
     f46:	b9 2e       	mov	r11, r25
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <vfprintf+0x25c>
     f4a:	28 e0       	ldi	r18, 0x08	; 8
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <vfprintf+0x260>
     f50:	20 e1       	ldi	r18, 0x10	; 16
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <vfprintf+0x260>
     f56:	20 e1       	ldi	r18, 0x10	; 16
     f58:	32 e0       	ldi	r19, 0x02	; 2
     f5a:	f8 01       	movw	r30, r16
     f5c:	b7 fe       	sbrs	r11, 7
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <vfprintf+0x274>
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	0c 5f       	subi	r16, 0xFC	; 252
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0x280>
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 5f       	subi	r16, 0xFE	; 254
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	a4 01       	movw	r20, r8
     f7c:	0e 94 b6 0b 	call	0x176c	; 0x176c <__ultoa_invert>
     f80:	a8 2e       	mov	r10, r24
     f82:	a8 18       	sub	r10, r8
     f84:	fb 2d       	mov	r31, r11
     f86:	ff 77       	andi	r31, 0x7F	; 127
     f88:	bf 2e       	mov	r11, r31
     f8a:	b6 fe       	sbrs	r11, 6
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <vfprintf+0x2aa>
     f8e:	2b 2d       	mov	r18, r11
     f90:	2e 7f       	andi	r18, 0xFE	; 254
     f92:	a5 14       	cp	r10, r5
     f94:	50 f4       	brcc	.+20     	; 0xfaa <vfprintf+0x2b0>
     f96:	b4 fe       	sbrs	r11, 4
     f98:	0a c0       	rjmp	.+20     	; 0xfae <vfprintf+0x2b4>
     f9a:	b2 fc       	sbrc	r11, 2
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <vfprintf+0x2b4>
     f9e:	2b 2d       	mov	r18, r11
     fa0:	2e 7e       	andi	r18, 0xEE	; 238
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <vfprintf+0x2b4>
     fa4:	7a 2c       	mov	r7, r10
     fa6:	2b 2d       	mov	r18, r11
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x2b6>
     faa:	7a 2c       	mov	r7, r10
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <vfprintf+0x2b6>
     fae:	75 2c       	mov	r7, r5
     fb0:	24 ff       	sbrs	r18, 4
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <vfprintf+0x2d4>
     fb4:	fe 01       	movw	r30, r28
     fb6:	ea 0d       	add	r30, r10
     fb8:	f1 1d       	adc	r31, r1
     fba:	80 81       	ld	r24, Z
     fbc:	80 33       	cpi	r24, 0x30	; 48
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <vfprintf+0x2ca>
     fc0:	29 7e       	andi	r18, 0xE9	; 233
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x2dc>
     fc4:	22 ff       	sbrs	r18, 2
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x2da>
     fc8:	73 94       	inc	r7
     fca:	73 94       	inc	r7
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <vfprintf+0x2dc>
     fce:	82 2f       	mov	r24, r18
     fd0:	86 78       	andi	r24, 0x86	; 134
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <vfprintf+0x2dc>
     fd4:	73 94       	inc	r7
     fd6:	23 fd       	sbrc	r18, 3
     fd8:	13 c0       	rjmp	.+38     	; 0x1000 <vfprintf+0x306>
     fda:	20 ff       	sbrs	r18, 0
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0x2f0>
     fde:	5a 2c       	mov	r5, r10
     fe0:	73 14       	cp	r7, r3
     fe2:	18 f4       	brcc	.+6      	; 0xfea <vfprintf+0x2f0>
     fe4:	53 0c       	add	r5, r3
     fe6:	57 18       	sub	r5, r7
     fe8:	73 2c       	mov	r7, r3
     fea:	73 14       	cp	r7, r3
     fec:	68 f4       	brcc	.+26     	; 0x1008 <vfprintf+0x30e>
     fee:	b7 01       	movw	r22, r14
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2c 87       	std	Y+12, r18	; 0x0c
     ff6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
     ffa:	73 94       	inc	r7
     ffc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ffe:	f5 cf       	rjmp	.-22     	; 0xfea <vfprintf+0x2f0>
    1000:	73 14       	cp	r7, r3
    1002:	10 f4       	brcc	.+4      	; 0x1008 <vfprintf+0x30e>
    1004:	37 18       	sub	r3, r7
    1006:	01 c0       	rjmp	.+2      	; 0x100a <vfprintf+0x310>
    1008:	31 2c       	mov	r3, r1
    100a:	24 ff       	sbrs	r18, 4
    100c:	12 c0       	rjmp	.+36     	; 0x1032 <vfprintf+0x338>
    100e:	b7 01       	movw	r22, r14
    1010:	80 e3       	ldi	r24, 0x30	; 48
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	2c 87       	std	Y+12, r18	; 0x0c
    1016:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
    101a:	2c 85       	ldd	r18, Y+12	; 0x0c
    101c:	22 ff       	sbrs	r18, 2
    101e:	17 c0       	rjmp	.+46     	; 0x104e <vfprintf+0x354>
    1020:	21 ff       	sbrs	r18, 1
    1022:	03 c0       	rjmp	.+6      	; 0x102a <vfprintf+0x330>
    1024:	88 e5       	ldi	r24, 0x58	; 88
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <vfprintf+0x334>
    102a:	88 e7       	ldi	r24, 0x78	; 120
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b7 01       	movw	r22, r14
    1030:	0c c0       	rjmp	.+24     	; 0x104a <vfprintf+0x350>
    1032:	82 2f       	mov	r24, r18
    1034:	86 78       	andi	r24, 0x86	; 134
    1036:	59 f0       	breq	.+22     	; 0x104e <vfprintf+0x354>
    1038:	21 fd       	sbrc	r18, 1
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0x346>
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <vfprintf+0x348>
    1040:	8b e2       	ldi	r24, 0x2B	; 43
    1042:	27 fd       	sbrc	r18, 7
    1044:	8d e2       	ldi	r24, 0x2D	; 45
    1046:	b7 01       	movw	r22, r14
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
    104e:	a5 14       	cp	r10, r5
    1050:	38 f4       	brcc	.+14     	; 0x1060 <vfprintf+0x366>
    1052:	b7 01       	movw	r22, r14
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
    105c:	5a 94       	dec	r5
    105e:	f7 cf       	rjmp	.-18     	; 0x104e <vfprintf+0x354>
    1060:	aa 94       	dec	r10
    1062:	f4 01       	movw	r30, r8
    1064:	ea 0d       	add	r30, r10
    1066:	f1 1d       	adc	r31, r1
    1068:	80 81       	ld	r24, Z
    106a:	b7 01       	movw	r22, r14
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
    1072:	a1 10       	cpse	r10, r1
    1074:	f5 cf       	rjmp	.-22     	; 0x1060 <vfprintf+0x366>
    1076:	33 20       	and	r3, r3
    1078:	09 f4       	brne	.+2      	; 0x107c <vfprintf+0x382>
    107a:	51 ce       	rjmp	.-862    	; 0xd1e <vfprintf+0x24>
    107c:	b7 01       	movw	r22, r14
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <fputc>
    1086:	3a 94       	dec	r3
    1088:	f6 cf       	rjmp	.-20     	; 0x1076 <vfprintf+0x37c>
    108a:	f7 01       	movw	r30, r14
    108c:	86 81       	ldd	r24, Z+6	; 0x06
    108e:	97 81       	ldd	r25, Z+7	; 0x07
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x39c>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	2c 96       	adiw	r28, 0x0c	; 12
    1098:	e2 e1       	ldi	r30, 0x12	; 18
    109a:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__epilogue_restores__>

0000109e <putval>:
    109e:	20 fd       	sbrc	r18, 0
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <putval+0x16>
    10a2:	fc 01       	movw	r30, r24
    10a4:	23 fd       	sbrc	r18, 3
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <putval+0x14>
    10a8:	22 ff       	sbrs	r18, 2
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <putval+0x12>
    10ac:	73 83       	std	Z+3, r23	; 0x03
    10ae:	62 83       	std	Z+2, r22	; 0x02
    10b0:	51 83       	std	Z+1, r21	; 0x01
    10b2:	40 83       	st	Z, r20
    10b4:	08 95       	ret

000010b6 <mulacc>:
    10b6:	44 fd       	sbrc	r20, 4
    10b8:	10 c0       	rjmp	.+32     	; 0x10da <mulacc+0x24>
    10ba:	46 fd       	sbrc	r20, 6
    10bc:	10 c0       	rjmp	.+32     	; 0x10de <mulacc+0x28>
    10be:	db 01       	movw	r26, r22
    10c0:	fc 01       	movw	r30, r24
    10c2:	aa 0f       	add	r26, r26
    10c4:	bb 1f       	adc	r27, r27
    10c6:	ee 1f       	adc	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	10 94       	com	r1
    10cc:	d1 f7       	brne	.-12     	; 0x10c2 <mulacc+0xc>
    10ce:	6a 0f       	add	r22, r26
    10d0:	7b 1f       	adc	r23, r27
    10d2:	8e 1f       	adc	r24, r30
    10d4:	9f 1f       	adc	r25, r31
    10d6:	31 e0       	ldi	r19, 0x01	; 1
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <mulacc+0x2a>
    10da:	33 e0       	ldi	r19, 0x03	; 3
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <mulacc+0x2a>
    10de:	34 e0       	ldi	r19, 0x04	; 4
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	31 50       	subi	r19, 0x01	; 1
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <mulacc+0x2a>
    10ec:	62 0f       	add	r22, r18
    10ee:	71 1d       	adc	r23, r1
    10f0:	81 1d       	adc	r24, r1
    10f2:	91 1d       	adc	r25, r1
    10f4:	08 95       	ret

000010f6 <skip_spaces>:
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	8c 01       	movw	r16, r24
    1100:	c8 01       	movw	r24, r16
    1102:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    1106:	ec 01       	movw	r28, r24
    1108:	97 fd       	sbrc	r25, 7
    110a:	08 c0       	rjmp	.+16     	; 0x111c <skip_spaces+0x26>
    110c:	0e 94 04 0b 	call	0x1608	; 0x1608 <isspace>
    1110:	89 2b       	or	r24, r25
    1112:	b1 f7       	brne	.-20     	; 0x1100 <skip_spaces+0xa>
    1114:	b8 01       	movw	r22, r16
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 9d 0b 	call	0x173a	; 0x173a <ungetc>
    111c:	ce 01       	movw	r24, r28
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <conv_int>:
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	a6 2e       	mov	r10, r22
    1142:	4a 01       	movw	r8, r20
    1144:	02 2f       	mov	r16, r18
    1146:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    114a:	ac 01       	movw	r20, r24
    114c:	55 27       	eor	r21, r21
    114e:	4b 32       	cpi	r20, 0x2B	; 43
    1150:	51 05       	cpc	r21, r1
    1152:	21 f0       	breq	.+8      	; 0x115c <conv_int+0x34>
    1154:	4d 32       	cpi	r20, 0x2D	; 45
    1156:	51 05       	cpc	r21, r1
    1158:	51 f4       	brne	.+20     	; 0x116e <conv_int+0x46>
    115a:	00 68       	ori	r16, 0x80	; 128
    115c:	aa 94       	dec	r10
    115e:	11 f4       	brne	.+4      	; 0x1164 <conv_int+0x3c>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	67 c0       	rjmp	.+206    	; 0x1232 <conv_int+0x10a>
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    116a:	97 fd       	sbrc	r25, 7
    116c:	f9 cf       	rjmp	.-14     	; 0x1160 <conv_int+0x38>
    116e:	10 2f       	mov	r17, r16
    1170:	1d 7f       	andi	r17, 0xFD	; 253
    1172:	30 2f       	mov	r19, r16
    1174:	30 73       	andi	r19, 0x30	; 48
    1176:	01 f5       	brne	.+64     	; 0x11b8 <conv_int+0x90>
    1178:	80 33       	cpi	r24, 0x30	; 48
    117a:	f1 f4       	brne	.+60     	; 0x11b8 <conv_int+0x90>
    117c:	ff 24       	eor	r15, r15
    117e:	fa 94       	dec	r15
    1180:	fa 0c       	add	r15, r10
    1182:	09 f4       	brne	.+2      	; 0x1186 <conv_int+0x5e>
    1184:	42 c0       	rjmp	.+132    	; 0x120a <conv_int+0xe2>
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    118c:	97 fd       	sbrc	r25, 7
    118e:	3d c0       	rjmp	.+122    	; 0x120a <conv_int+0xe2>
    1190:	38 2f       	mov	r19, r24
    1192:	3f 7d       	andi	r19, 0xDF	; 223
    1194:	38 35       	cpi	r19, 0x58	; 88
    1196:	51 f4       	brne	.+20     	; 0x11ac <conv_int+0x84>
    1198:	12 64       	ori	r17, 0x42	; 66
    119a:	aa 94       	dec	r10
    119c:	aa 94       	dec	r10
    119e:	a9 f1       	breq	.+106    	; 0x120a <conv_int+0xe2>
    11a0:	ce 01       	movw	r24, r28
    11a2:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    11a6:	97 ff       	sbrs	r25, 7
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <conv_int+0x90>
    11aa:	2f c0       	rjmp	.+94     	; 0x120a <conv_int+0xe2>
    11ac:	06 ff       	sbrs	r16, 6
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <conv_int+0x8c>
    11b0:	12 60       	ori	r17, 0x02	; 2
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <conv_int+0x8e>
    11b4:	12 61       	ori	r17, 0x12	; 18
    11b6:	af 2c       	mov	r10, r15
    11b8:	c1 2c       	mov	r12, r1
    11ba:	d1 2c       	mov	r13, r1
    11bc:	76 01       	movw	r14, r12
    11be:	20 ed       	ldi	r18, 0xD0	; 208
    11c0:	28 0f       	add	r18, r24
    11c2:	28 30       	cpi	r18, 0x08	; 8
    11c4:	80 f0       	brcs	.+32     	; 0x11e6 <conv_int+0xbe>
    11c6:	14 ff       	sbrs	r17, 4
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <conv_int+0xaa>
    11ca:	be 01       	movw	r22, r28
    11cc:	0e 94 9d 0b 	call	0x173a	; 0x173a <ungetc>
    11d0:	19 c0       	rjmp	.+50     	; 0x1204 <conv_int+0xdc>
    11d2:	2a 30       	cpi	r18, 0x0A	; 10
    11d4:	40 f0       	brcs	.+16     	; 0x11e6 <conv_int+0xbe>
    11d6:	16 ff       	sbrs	r17, 6
    11d8:	f8 cf       	rjmp	.-16     	; 0x11ca <conv_int+0xa2>
    11da:	2f 7d       	andi	r18, 0xDF	; 223
    11dc:	3f ee       	ldi	r19, 0xEF	; 239
    11de:	32 0f       	add	r19, r18
    11e0:	36 30       	cpi	r19, 0x06	; 6
    11e2:	98 f7       	brcc	.-26     	; 0x11ca <conv_int+0xa2>
    11e4:	27 50       	subi	r18, 0x07	; 7
    11e6:	41 2f       	mov	r20, r17
    11e8:	c7 01       	movw	r24, r14
    11ea:	b6 01       	movw	r22, r12
    11ec:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <mulacc>
    11f0:	6b 01       	movw	r12, r22
    11f2:	7c 01       	movw	r14, r24
    11f4:	12 60       	ori	r17, 0x02	; 2
    11f6:	aa 94       	dec	r10
    11f8:	59 f0       	breq	.+22     	; 0x1210 <conv_int+0xe8>
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    1200:	97 ff       	sbrs	r25, 7
    1202:	dd cf       	rjmp	.-70     	; 0x11be <conv_int+0x96>
    1204:	11 fd       	sbrc	r17, 1
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <conv_int+0xe8>
    1208:	ab cf       	rjmp	.-170    	; 0x1160 <conv_int+0x38>
    120a:	c1 2c       	mov	r12, r1
    120c:	d1 2c       	mov	r13, r1
    120e:	76 01       	movw	r14, r12
    1210:	17 ff       	sbrs	r17, 7
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <conv_int+0xfc>
    1214:	f0 94       	com	r15
    1216:	e0 94       	com	r14
    1218:	d0 94       	com	r13
    121a:	c0 94       	com	r12
    121c:	c1 1c       	adc	r12, r1
    121e:	d1 1c       	adc	r13, r1
    1220:	e1 1c       	adc	r14, r1
    1222:	f1 1c       	adc	r15, r1
    1224:	21 2f       	mov	r18, r17
    1226:	b7 01       	movw	r22, r14
    1228:	a6 01       	movw	r20, r12
    122a:	c4 01       	movw	r24, r8
    122c:	0e 94 4f 08 	call	0x109e	; 0x109e <putval>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	08 95       	ret

0000124a <conv_brk>:
    124a:	a1 e2       	ldi	r26, 0x21	; 33
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e2       	ldi	r30, 0x2B	; 43
    1250:	f9 e0       	ldi	r31, 0x09	; 9
    1252:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__prologue_saves__+0xa>
    1256:	5c 01       	movw	r10, r24
    1258:	7a 01       	movw	r14, r20
    125a:	8e 01       	movw	r16, r28
    125c:	0f 5f       	subi	r16, 0xFF	; 255
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	68 01       	movw	r12, r16
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	d8 01       	movw	r26, r16
    1266:	1d 92       	st	X+, r1
    1268:	8a 95       	dec	r24
    126a:	e9 f7       	brne	.-6      	; 0x1266 <conv_brk+0x1c>
    126c:	f5 01       	movw	r30, r10
    126e:	73 80       	ldd	r7, Z+3	; 0x03
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	81 2c       	mov	r8, r1
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	91 2c       	mov	r9, r1
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	f9 01       	movw	r30, r18
    1280:	73 fc       	sbrc	r7, 3
    1282:	a5 91       	lpm	r26, Z+
    1284:	73 fe       	sbrs	r7, 3
    1286:	a1 91       	ld	r26, Z+
    1288:	8f 01       	movw	r16, r30
    128a:	7a 2f       	mov	r23, r26
    128c:	9f 01       	movw	r18, r30
    128e:	a1 11       	cpse	r26, r1
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <conv_brk+0x4e>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	7d c0       	rjmp	.+250    	; 0x1392 <conv_brk+0x148>
    1298:	ae 35       	cpi	r26, 0x5E	; 94
    129a:	19 f4       	brne	.+6      	; 0x12a2 <conv_brk+0x58>
    129c:	41 15       	cp	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	59 f1       	breq	.+86     	; 0x12f8 <conv_brk+0xae>
    12a2:	e9 2d       	mov	r30, r9
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	e4 17       	cp	r30, r20
    12a8:	f5 07       	cpc	r31, r21
    12aa:	3c f4       	brge	.+14     	; 0x12ba <conv_brk+0x70>
    12ac:	ad 35       	cpi	r26, 0x5D	; 93
    12ae:	69 f1       	breq	.+90     	; 0x130a <conv_brk+0xc0>
    12b0:	ad 32       	cpi	r26, 0x2D	; 45
    12b2:	19 f4       	brne	.+6      	; 0x12ba <conv_brk+0x70>
    12b4:	bb 23       	and	r27, r27
    12b6:	19 f1       	breq	.+70     	; 0x12fe <conv_brk+0xb4>
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <conv_brk+0x76>
    12ba:	b1 11       	cpse	r27, r1
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <conv_brk+0x76>
    12be:	8a 2e       	mov	r8, r26
    12c0:	e7 2f       	mov	r30, r23
    12c2:	e6 95       	lsr	r30
    12c4:	e6 95       	lsr	r30
    12c6:	e6 95       	lsr	r30
    12c8:	86 01       	movw	r16, r12
    12ca:	0e 0f       	add	r16, r30
    12cc:	11 1d       	adc	r17, r1
    12ce:	f8 01       	movw	r30, r16
    12d0:	a7 2f       	mov	r26, r23
    12d2:	a7 70       	andi	r26, 0x07	; 7
    12d4:	8c 01       	movw	r16, r24
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <conv_brk+0x92>
    12d8:	00 0f       	add	r16, r16
    12da:	11 1f       	adc	r17, r17
    12dc:	aa 95       	dec	r26
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <conv_brk+0x8e>
    12e0:	d8 01       	movw	r26, r16
    12e2:	b0 81       	ld	r27, Z
    12e4:	ba 2b       	or	r27, r26
    12e6:	b0 83       	st	Z, r27
    12e8:	78 15       	cp	r23, r8
    12ea:	59 f0       	breq	.+22     	; 0x1302 <conv_brk+0xb8>
    12ec:	78 15       	cp	r23, r8
    12ee:	10 f4       	brcc	.+4      	; 0x12f4 <conv_brk+0xaa>
    12f0:	7f 5f       	subi	r23, 0xFF	; 255
    12f2:	e6 cf       	rjmp	.-52     	; 0x12c0 <conv_brk+0x76>
    12f4:	71 50       	subi	r23, 0x01	; 1
    12f6:	e4 cf       	rjmp	.-56     	; 0x12c0 <conv_brk+0x76>
    12f8:	99 24       	eor	r9, r9
    12fa:	93 94       	inc	r9
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <conv_brk+0xba>
    12fe:	b1 e0       	ldi	r27, 0x01	; 1
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <conv_brk+0xba>
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	4f 5f       	subi	r20, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	ba cf       	rjmp	.-140    	; 0x127e <conv_brk+0x34>
    130a:	bb 23       	and	r27, r27
    130c:	19 f0       	breq	.+6      	; 0x1314 <conv_brk+0xca>
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	80 62       	ori	r24, 0x20	; 32
    1312:	8e 83       	std	Y+6, r24	; 0x06
    1314:	91 10       	cpse	r9, r1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <conv_brk+0xd4>
    1318:	99 24       	eor	r9, r9
    131a:	93 94       	inc	r9
    131c:	15 c0       	rjmp	.+42     	; 0x1348 <conv_brk+0xfe>
    131e:	f6 01       	movw	r30, r12
    1320:	ce 01       	movw	r24, r28
    1322:	81 96       	adiw	r24, 0x21	; 33
    1324:	20 81       	ld	r18, Z
    1326:	20 95       	com	r18
    1328:	21 93       	st	Z+, r18
    132a:	e8 17       	cp	r30, r24
    132c:	f9 07       	cpc	r31, r25
    132e:	d1 f7       	brne	.-12     	; 0x1324 <conv_brk+0xda>
    1330:	f3 cf       	rjmp	.-26     	; 0x1318 <conv_brk+0xce>
    1332:	e1 14       	cp	r14, r1
    1334:	f1 04       	cpc	r15, r1
    1336:	29 f0       	breq	.+10     	; 0x1342 <conv_brk+0xf8>
    1338:	d7 01       	movw	r26, r14
    133a:	8c 93       	st	X, r24
    133c:	f7 01       	movw	r30, r14
    133e:	31 96       	adiw	r30, 0x01	; 1
    1340:	7f 01       	movw	r14, r30
    1342:	61 50       	subi	r22, 0x01	; 1
    1344:	01 f1       	breq	.+64     	; 0x1386 <conv_brk+0x13c>
    1346:	91 2c       	mov	r9, r1
    1348:	c5 01       	movw	r24, r10
    134a:	69 a3       	std	Y+33, r22	; 0x21
    134c:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    1350:	69 a1       	ldd	r22, Y+33	; 0x21
    1352:	97 fd       	sbrc	r25, 7
    1354:	16 c0       	rjmp	.+44     	; 0x1382 <conv_brk+0x138>
    1356:	28 2f       	mov	r18, r24
    1358:	26 95       	lsr	r18
    135a:	26 95       	lsr	r18
    135c:	26 95       	lsr	r18
    135e:	f6 01       	movw	r30, r12
    1360:	e2 0f       	add	r30, r18
    1362:	f1 1d       	adc	r31, r1
    1364:	20 81       	ld	r18, Z
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	ac 01       	movw	r20, r24
    136a:	47 70       	andi	r20, 0x07	; 7
    136c:	55 27       	eor	r21, r21
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <conv_brk+0x12a>
    1370:	35 95       	asr	r19
    1372:	27 95       	ror	r18
    1374:	4a 95       	dec	r20
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <conv_brk+0x126>
    1378:	20 fd       	sbrc	r18, 0
    137a:	db cf       	rjmp	.-74     	; 0x1332 <conv_brk+0xe8>
    137c:	b5 01       	movw	r22, r10
    137e:	0e 94 9d 0b 	call	0x173a	; 0x173a <ungetc>
    1382:	91 10       	cpse	r9, r1
    1384:	86 cf       	rjmp	.-244    	; 0x1292 <conv_brk+0x48>
    1386:	e1 14       	cp	r14, r1
    1388:	f1 04       	cpc	r15, r1
    138a:	11 f0       	breq	.+4      	; 0x1390 <conv_brk+0x146>
    138c:	d7 01       	movw	r26, r14
    138e:	1c 92       	st	X, r1
    1390:	c8 01       	movw	r24, r16
    1392:	a1 96       	adiw	r28, 0x21	; 33
    1394:	ed e0       	ldi	r30, 0x0D	; 13
    1396:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__epilogue_restores__+0xa>

0000139a <vfscanf>:
    139a:	4f 92       	push	r4
    139c:	5f 92       	push	r5
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	1f 92       	push	r1
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8c 01       	movw	r16, r24
    13c0:	2b 01       	movw	r4, r22
    13c2:	7a 01       	movw	r14, r20
    13c4:	fc 01       	movw	r30, r24
    13c6:	17 82       	std	Z+7, r1	; 0x07
    13c8:	16 82       	std	Z+6, r1	; 0x06
    13ca:	a1 2c       	mov	r10, r1
    13cc:	f8 01       	movw	r30, r16
    13ce:	d3 80       	ldd	r13, Z+3	; 0x03
    13d0:	f2 01       	movw	r30, r4
    13d2:	d3 fc       	sbrc	r13, 3
    13d4:	85 91       	lpm	r24, Z+
    13d6:	d3 fe       	sbrs	r13, 3
    13d8:	81 91       	ld	r24, Z+
    13da:	38 2f       	mov	r19, r24
    13dc:	2f 01       	movw	r4, r30
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <vfscanf+0x4a>
    13e2:	fc c0       	rjmp	.+504    	; 0x15dc <vfscanf+0x242>
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	39 83       	std	Y+1, r19	; 0x01
    13e8:	0e 94 04 0b 	call	0x1608	; 0x1608 <isspace>
    13ec:	39 81       	ldd	r19, Y+1	; 0x01
    13ee:	89 2b       	or	r24, r25
    13f0:	21 f0       	breq	.+8      	; 0x13fa <vfscanf+0x60>
    13f2:	c8 01       	movw	r24, r16
    13f4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <skip_spaces>
    13f8:	e9 cf       	rjmp	.-46     	; 0x13cc <vfscanf+0x32>
    13fa:	35 32       	cpi	r19, 0x25	; 37
    13fc:	41 f4       	brne	.+16     	; 0x140e <vfscanf+0x74>
    13fe:	f2 01       	movw	r30, r4
    1400:	d3 fc       	sbrc	r13, 3
    1402:	35 91       	lpm	r19, Z+
    1404:	d3 fe       	sbrs	r13, 3
    1406:	31 91       	ld	r19, Z+
    1408:	2f 01       	movw	r4, r30
    140a:	35 32       	cpi	r19, 0x25	; 37
    140c:	69 f4       	brne	.+26     	; 0x1428 <vfscanf+0x8e>
    140e:	c8 01       	movw	r24, r16
    1410:	39 83       	std	Y+1, r19	; 0x01
    1412:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    1416:	39 81       	ldd	r19, Y+1	; 0x01
    1418:	97 fd       	sbrc	r25, 7
    141a:	de c0       	rjmp	.+444    	; 0x15d8 <vfscanf+0x23e>
    141c:	38 17       	cp	r19, r24
    141e:	b1 f2       	breq	.-84     	; 0x13cc <vfscanf+0x32>
    1420:	b8 01       	movw	r22, r16
    1422:	0e 94 9d 0b 	call	0x173a	; 0x173a <ungetc>
    1426:	da c0       	rjmp	.+436    	; 0x15dc <vfscanf+0x242>
    1428:	3a 32       	cpi	r19, 0x2A	; 42
    142a:	41 f4       	brne	.+16     	; 0x143c <vfscanf+0xa2>
    142c:	d3 fc       	sbrc	r13, 3
    142e:	35 91       	lpm	r19, Z+
    1430:	d3 fe       	sbrs	r13, 3
    1432:	31 91       	ld	r19, Z+
    1434:	2f 01       	movw	r4, r30
    1436:	bb 24       	eor	r11, r11
    1438:	b3 94       	inc	r11
    143a:	01 c0       	rjmp	.+2      	; 0x143e <vfscanf+0xa4>
    143c:	b1 2c       	mov	r11, r1
    143e:	71 2c       	mov	r7, r1
    1440:	20 ed       	ldi	r18, 0xD0	; 208
    1442:	23 0f       	add	r18, r19
    1444:	2a 30       	cpi	r18, 0x0A	; 10
    1446:	90 f4       	brcc	.+36     	; 0x146c <vfscanf+0xd2>
    1448:	fb 2d       	mov	r31, r11
    144a:	f2 60       	ori	r31, 0x02	; 2
    144c:	bf 2e       	mov	r11, r31
    144e:	67 2d       	mov	r22, r7
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <mulacc>
    145c:	76 2e       	mov	r7, r22
    145e:	f2 01       	movw	r30, r4
    1460:	d3 fc       	sbrc	r13, 3
    1462:	35 91       	lpm	r19, Z+
    1464:	d3 fe       	sbrs	r13, 3
    1466:	31 91       	ld	r19, Z+
    1468:	2f 01       	movw	r4, r30
    146a:	ea cf       	rjmp	.-44     	; 0x1440 <vfscanf+0xa6>
    146c:	b1 fe       	sbrs	r11, 1
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfscanf+0xdc>
    1470:	71 10       	cpse	r7, r1
    1472:	03 c0       	rjmp	.+6      	; 0x147a <vfscanf+0xe0>
    1474:	b3 c0       	rjmp	.+358    	; 0x15dc <vfscanf+0x242>
    1476:	77 24       	eor	r7, r7
    1478:	7a 94       	dec	r7
    147a:	38 36       	cpi	r19, 0x68	; 104
    147c:	19 f0       	breq	.+6      	; 0x1484 <vfscanf+0xea>
    147e:	3c 36       	cpi	r19, 0x6C	; 108
    1480:	61 f0       	breq	.+24     	; 0x149a <vfscanf+0x100>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <vfscanf+0x112>
    1484:	f2 01       	movw	r30, r4
    1486:	d3 fc       	sbrc	r13, 3
    1488:	35 91       	lpm	r19, Z+
    148a:	d3 fe       	sbrs	r13, 3
    148c:	31 91       	ld	r19, Z+
    148e:	2f 01       	movw	r4, r30
    1490:	38 36       	cpi	r19, 0x68	; 104
    1492:	61 f4       	brne	.+24     	; 0x14ac <vfscanf+0x112>
    1494:	fb 2d       	mov	r31, r11
    1496:	f8 60       	ori	r31, 0x08	; 8
    1498:	bf 2e       	mov	r11, r31
    149a:	8b 2d       	mov	r24, r11
    149c:	84 60       	ori	r24, 0x04	; 4
    149e:	b8 2e       	mov	r11, r24
    14a0:	f2 01       	movw	r30, r4
    14a2:	d3 fc       	sbrc	r13, 3
    14a4:	35 91       	lpm	r19, Z+
    14a6:	d3 fe       	sbrs	r13, 3
    14a8:	31 91       	ld	r19, Z+
    14aa:	2f 01       	movw	r4, r30
    14ac:	33 23       	and	r19, r19
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <vfscanf+0x118>
    14b0:	95 c0       	rjmp	.+298    	; 0x15dc <vfscanf+0x242>
    14b2:	63 2f       	mov	r22, r19
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	8e e7       	ldi	r24, 0x7E	; 126
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	39 83       	std	Y+1, r19	; 0x01
    14bc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <strchr_P>
    14c0:	39 81       	ldd	r19, Y+1	; 0x01
    14c2:	89 2b       	or	r24, r25
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <vfscanf+0x12e>
    14c6:	8a c0       	rjmp	.+276    	; 0x15dc <vfscanf+0x242>
    14c8:	b0 fc       	sbrc	r11, 0
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <vfscanf+0x140>
    14cc:	f7 01       	movw	r30, r14
    14ce:	c0 80       	ld	r12, Z
    14d0:	d1 80       	ldd	r13, Z+1	; 0x01
    14d2:	c7 01       	movw	r24, r14
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	7c 01       	movw	r14, r24
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfscanf+0x144>
    14da:	c1 2c       	mov	r12, r1
    14dc:	d1 2c       	mov	r13, r1
    14de:	3e 36       	cpi	r19, 0x6E	; 110
    14e0:	51 f4       	brne	.+20     	; 0x14f6 <vfscanf+0x15c>
    14e2:	f8 01       	movw	r30, r16
    14e4:	46 81       	ldd	r20, Z+6	; 0x06
    14e6:	57 81       	ldd	r21, Z+7	; 0x07
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	2b 2d       	mov	r18, r11
    14ee:	c6 01       	movw	r24, r12
    14f0:	0e 94 4f 08 	call	0x109e	; 0x109e <putval>
    14f4:	6b cf       	rjmp	.-298    	; 0x13cc <vfscanf+0x32>
    14f6:	33 36       	cpi	r19, 0x63	; 99
    14f8:	a1 f4       	brne	.+40     	; 0x1522 <vfscanf+0x188>
    14fa:	b1 fc       	sbrc	r11, 1
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <vfscanf+0x168>
    14fe:	77 24       	eor	r7, r7
    1500:	73 94       	inc	r7
    1502:	c8 01       	movw	r24, r16
    1504:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    1508:	97 fd       	sbrc	r25, 7
    150a:	66 c0       	rjmp	.+204    	; 0x15d8 <vfscanf+0x23e>
    150c:	c1 14       	cp	r12, r1
    150e:	d1 04       	cpc	r13, r1
    1510:	29 f0       	breq	.+10     	; 0x151c <vfscanf+0x182>
    1512:	f6 01       	movw	r30, r12
    1514:	80 83       	st	Z, r24
    1516:	c6 01       	movw	r24, r12
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	6c 01       	movw	r12, r24
    151c:	7a 94       	dec	r7
    151e:	89 f7       	brne	.-30     	; 0x1502 <vfscanf+0x168>
    1520:	57 c0       	rjmp	.+174    	; 0x15d0 <vfscanf+0x236>
    1522:	3b 35       	cpi	r19, 0x5B	; 91
    1524:	59 f4       	brne	.+22     	; 0x153c <vfscanf+0x1a2>
    1526:	92 01       	movw	r18, r4
    1528:	a6 01       	movw	r20, r12
    152a:	67 2d       	mov	r22, r7
    152c:	c8 01       	movw	r24, r16
    152e:	0e 94 25 09 	call	0x124a	; 0x124a <conv_brk>
    1532:	2c 01       	movw	r4, r24
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	09 f0       	breq	.+2      	; 0x153a <vfscanf+0x1a0>
    1538:	4b c0       	rjmp	.+150    	; 0x15d0 <vfscanf+0x236>
    153a:	45 c0       	rjmp	.+138    	; 0x15c6 <vfscanf+0x22c>
    153c:	c8 01       	movw	r24, r16
    153e:	39 83       	std	Y+1, r19	; 0x01
    1540:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <skip_spaces>
    1544:	39 81       	ldd	r19, Y+1	; 0x01
    1546:	97 fd       	sbrc	r25, 7
    1548:	47 c0       	rjmp	.+142    	; 0x15d8 <vfscanf+0x23e>
    154a:	3f 36       	cpi	r19, 0x6F	; 111
    154c:	69 f1       	breq	.+90     	; 0x15a8 <vfscanf+0x20e>
    154e:	28 f4       	brcc	.+10     	; 0x155a <vfscanf+0x1c0>
    1550:	34 36       	cpi	r19, 0x64	; 100
    1552:	31 f1       	breq	.+76     	; 0x15a0 <vfscanf+0x206>
    1554:	39 36       	cpi	r19, 0x69	; 105
    1556:	79 f1       	breq	.+94     	; 0x15b6 <vfscanf+0x21c>
    1558:	2b c0       	rjmp	.+86     	; 0x15b0 <vfscanf+0x216>
    155a:	33 37       	cpi	r19, 0x73	; 115
    155c:	69 f0       	breq	.+26     	; 0x1578 <vfscanf+0x1de>
    155e:	35 37       	cpi	r19, 0x75	; 117
    1560:	f9 f0       	breq	.+62     	; 0x15a0 <vfscanf+0x206>
    1562:	26 c0       	rjmp	.+76     	; 0x15b0 <vfscanf+0x216>
    1564:	c1 14       	cp	r12, r1
    1566:	d1 04       	cpc	r13, r1
    1568:	29 f0       	breq	.+10     	; 0x1574 <vfscanf+0x1da>
    156a:	f6 01       	movw	r30, r12
    156c:	80 82       	st	Z, r8
    156e:	c6 01       	movw	r24, r12
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	6c 01       	movw	r12, r24
    1574:	7a 94       	dec	r7
    1576:	71 f0       	breq	.+28     	; 0x1594 <vfscanf+0x1fa>
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 2d 0b 	call	0x165a	; 0x165a <fgetc>
    157e:	4c 01       	movw	r8, r24
    1580:	97 fd       	sbrc	r25, 7
    1582:	08 c0       	rjmp	.+16     	; 0x1594 <vfscanf+0x1fa>
    1584:	0e 94 04 0b 	call	0x1608	; 0x1608 <isspace>
    1588:	89 2b       	or	r24, r25
    158a:	61 f3       	breq	.-40     	; 0x1564 <vfscanf+0x1ca>
    158c:	b8 01       	movw	r22, r16
    158e:	c4 01       	movw	r24, r8
    1590:	0e 94 9d 0b 	call	0x173a	; 0x173a <ungetc>
    1594:	c1 14       	cp	r12, r1
    1596:	d1 04       	cpc	r13, r1
    1598:	d9 f0       	breq	.+54     	; 0x15d0 <vfscanf+0x236>
    159a:	f6 01       	movw	r30, r12
    159c:	10 82       	st	Z, r1
    159e:	18 c0       	rjmp	.+48     	; 0x15d0 <vfscanf+0x236>
    15a0:	fb 2d       	mov	r31, r11
    15a2:	f0 62       	ori	r31, 0x20	; 32
    15a4:	bf 2e       	mov	r11, r31
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <vfscanf+0x21c>
    15a8:	8b 2d       	mov	r24, r11
    15aa:	80 61       	ori	r24, 0x10	; 16
    15ac:	b8 2e       	mov	r11, r24
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfscanf+0x21c>
    15b0:	9b 2d       	mov	r25, r11
    15b2:	90 64       	ori	r25, 0x40	; 64
    15b4:	b9 2e       	mov	r11, r25
    15b6:	2b 2d       	mov	r18, r11
    15b8:	a6 01       	movw	r20, r12
    15ba:	67 2d       	mov	r22, r7
    15bc:	c8 01       	movw	r24, r16
    15be:	0e 94 94 08 	call	0x1128	; 0x1128 <conv_int>
    15c2:	81 11       	cpse	r24, r1
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <vfscanf+0x236>
    15c6:	f8 01       	movw	r30, r16
    15c8:	83 81       	ldd	r24, Z+3	; 0x03
    15ca:	80 73       	andi	r24, 0x30	; 48
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <vfscanf+0x23e>
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <vfscanf+0x242>
    15d0:	b0 fc       	sbrc	r11, 0
    15d2:	fc ce       	rjmp	.-520    	; 0x13cc <vfscanf+0x32>
    15d4:	a3 94       	inc	r10
    15d6:	fa ce       	rjmp	.-524    	; 0x13cc <vfscanf+0x32>
    15d8:	aa 20       	and	r10, r10
    15da:	19 f0       	breq	.+6      	; 0x15e2 <vfscanf+0x248>
    15dc:	8a 2d       	mov	r24, r10
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfscanf+0x24c>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	5f 90       	pop	r5
    1604:	4f 90       	pop	r4
    1606:	08 95       	ret

00001608 <isspace>:
    1608:	91 11       	cpse	r25, r1
    160a:	0e c1       	rjmp	.+540    	; 0x1828 <__ctype_isfalse>
    160c:	80 32       	cpi	r24, 0x20	; 32
    160e:	19 f0       	breq	.+6      	; 0x1616 <isspace+0xe>
    1610:	89 50       	subi	r24, 0x09	; 9
    1612:	85 50       	subi	r24, 0x05	; 5
    1614:	d0 f7       	brcc	.-12     	; 0x160a <isspace+0x2>
    1616:	08 95       	ret

00001618 <strchr_P>:
    1618:	fc 01       	movw	r30, r24
    161a:	05 90       	lpm	r0, Z+
    161c:	06 16       	cp	r0, r22
    161e:	21 f0       	breq	.+8      	; 0x1628 <strchr_P+0x10>
    1620:	00 20       	and	r0, r0
    1622:	d9 f7       	brne	.-10     	; 0x161a <strchr_P+0x2>
    1624:	c0 01       	movw	r24, r0
    1626:	08 95       	ret
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	cf 01       	movw	r24, r30
    162c:	08 95       	ret

0000162e <strnlen_P>:
    162e:	fc 01       	movw	r30, r24
    1630:	05 90       	lpm	r0, Z+
    1632:	61 50       	subi	r22, 0x01	; 1
    1634:	70 40       	sbci	r23, 0x00	; 0
    1636:	01 10       	cpse	r0, r1
    1638:	d8 f7       	brcc	.-10     	; 0x1630 <strnlen_P+0x2>
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	8e 0f       	add	r24, r30
    1640:	9f 1f       	adc	r25, r31
    1642:	08 95       	ret

00001644 <strnlen>:
    1644:	fc 01       	movw	r30, r24
    1646:	61 50       	subi	r22, 0x01	; 1
    1648:	70 40       	sbci	r23, 0x00	; 0
    164a:	01 90       	ld	r0, Z+
    164c:	01 10       	cpse	r0, r1
    164e:	d8 f7       	brcc	.-10     	; 0x1646 <strnlen+0x2>
    1650:	80 95       	com	r24
    1652:	90 95       	com	r25
    1654:	8e 0f       	add	r24, r30
    1656:	9f 1f       	adc	r25, r31
    1658:	08 95       	ret

0000165a <fgetc>:
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	ec 01       	movw	r28, r24
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	20 ff       	sbrs	r18, 0
    1664:	33 c0       	rjmp	.+102    	; 0x16cc <fgetc+0x72>
    1666:	26 ff       	sbrs	r18, 6
    1668:	0a c0       	rjmp	.+20     	; 0x167e <fgetc+0x24>
    166a:	2f 7b       	andi	r18, 0xBF	; 191
    166c:	2b 83       	std	Y+3, r18	; 0x03
    166e:	8e 81       	ldd	r24, Y+6	; 0x06
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	9f 83       	std	Y+7, r25	; 0x07
    1676:	8e 83       	std	Y+6, r24	; 0x06
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	29 c0       	rjmp	.+82     	; 0x16d0 <fgetc+0x76>
    167e:	22 ff       	sbrs	r18, 2
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <fgetc+0x46>
    1682:	e8 81       	ld	r30, Y
    1684:	f9 81       	ldd	r31, Y+1	; 0x01
    1686:	80 81       	ld	r24, Z
    1688:	99 27       	eor	r25, r25
    168a:	87 fd       	sbrc	r24, 7
    168c:	90 95       	com	r25
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	19 f4       	brne	.+6      	; 0x1698 <fgetc+0x3e>
    1692:	20 62       	ori	r18, 0x20	; 32
    1694:	2b 83       	std	Y+3, r18	; 0x03
    1696:	1a c0       	rjmp	.+52     	; 0x16cc <fgetc+0x72>
    1698:	31 96       	adiw	r30, 0x01	; 1
    169a:	f9 83       	std	Y+1, r31	; 0x01
    169c:	e8 83       	st	Y, r30
    169e:	0e c0       	rjmp	.+28     	; 0x16bc <fgetc+0x62>
    16a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16a4:	09 95       	icall
    16a6:	97 ff       	sbrs	r25, 7
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <fgetc+0x62>
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <fgetc+0x5a>
    16b0:	80 e1       	ldi	r24, 0x10	; 16
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <fgetc+0x5c>
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	82 2b       	or	r24, r18
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <fgetc+0x72>
    16bc:	2e 81       	ldd	r18, Y+6	; 0x06
    16be:	3f 81       	ldd	r19, Y+7	; 0x07
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	3f 83       	std	Y+7, r19	; 0x07
    16c6:	2e 83       	std	Y+6, r18	; 0x06
    16c8:	99 27       	eor	r25, r25
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <fgetc+0x76>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <fputc>:
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	18 2f       	mov	r17, r24
    16e0:	09 2f       	mov	r16, r25
    16e2:	eb 01       	movw	r28, r22
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 fd       	sbrc	r24, 1
    16e8:	03 c0       	rjmp	.+6      	; 0x16f0 <fputc+0x1a>
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	9f ef       	ldi	r25, 0xFF	; 255
    16ee:	20 c0       	rjmp	.+64     	; 0x1730 <fputc+0x5a>
    16f0:	82 ff       	sbrs	r24, 2
    16f2:	10 c0       	rjmp	.+32     	; 0x1714 <fputc+0x3e>
    16f4:	4e 81       	ldd	r20, Y+6	; 0x06
    16f6:	5f 81       	ldd	r21, Y+7	; 0x07
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	42 17       	cp	r20, r18
    16fe:	53 07       	cpc	r21, r19
    1700:	7c f4       	brge	.+30     	; 0x1720 <fputc+0x4a>
    1702:	e8 81       	ld	r30, Y
    1704:	f9 81       	ldd	r31, Y+1	; 0x01
    1706:	9f 01       	movw	r18, r30
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	39 83       	std	Y+1, r19	; 0x01
    170e:	28 83       	st	Y, r18
    1710:	10 83       	st	Z, r17
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <fputc+0x4a>
    1714:	e8 85       	ldd	r30, Y+8	; 0x08
    1716:	f9 85       	ldd	r31, Y+9	; 0x09
    1718:	81 2f       	mov	r24, r17
    171a:	09 95       	icall
    171c:	89 2b       	or	r24, r25
    171e:	29 f7       	brne	.-54     	; 0x16ea <fputc+0x14>
    1720:	2e 81       	ldd	r18, Y+6	; 0x06
    1722:	3f 81       	ldd	r19, Y+7	; 0x07
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	3f 83       	std	Y+7, r19	; 0x07
    172a:	2e 83       	std	Y+6, r18	; 0x06
    172c:	81 2f       	mov	r24, r17
    172e:	90 2f       	mov	r25, r16
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <ungetc>:
    173a:	fb 01       	movw	r30, r22
    173c:	23 81       	ldd	r18, Z+3	; 0x03
    173e:	20 ff       	sbrs	r18, 0
    1740:	12 c0       	rjmp	.+36     	; 0x1766 <ungetc+0x2c>
    1742:	26 fd       	sbrc	r18, 6
    1744:	10 c0       	rjmp	.+32     	; 0x1766 <ungetc+0x2c>
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	93 07       	cpc	r25, r19
    174c:	61 f0       	breq	.+24     	; 0x1766 <ungetc+0x2c>
    174e:	82 83       	std	Z+2, r24	; 0x02
    1750:	2f 7d       	andi	r18, 0xDF	; 223
    1752:	20 64       	ori	r18, 0x40	; 64
    1754:	23 83       	std	Z+3, r18	; 0x03
    1756:	26 81       	ldd	r18, Z+6	; 0x06
    1758:	37 81       	ldd	r19, Z+7	; 0x07
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	31 09       	sbc	r19, r1
    175e:	37 83       	std	Z+7, r19	; 0x07
    1760:	26 83       	std	Z+6, r18	; 0x06
    1762:	99 27       	eor	r25, r25
    1764:	08 95       	ret
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	08 95       	ret

0000176c <__ultoa_invert>:
    176c:	fa 01       	movw	r30, r20
    176e:	aa 27       	eor	r26, r26
    1770:	28 30       	cpi	r18, 0x08	; 8
    1772:	51 f1       	breq	.+84     	; 0x17c8 <__ultoa_invert+0x5c>
    1774:	20 31       	cpi	r18, 0x10	; 16
    1776:	81 f1       	breq	.+96     	; 0x17d8 <__ultoa_invert+0x6c>
    1778:	e8 94       	clt
    177a:	6f 93       	push	r22
    177c:	6e 7f       	andi	r22, 0xFE	; 254
    177e:	6e 5f       	subi	r22, 0xFE	; 254
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	8f 4f       	sbci	r24, 0xFF	; 255
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	af 4f       	sbci	r26, 0xFF	; 255
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	3e d0       	rcall	.+124    	; 0x1808 <__ultoa_invert+0x9c>
    178c:	b4 e0       	ldi	r27, 0x04	; 4
    178e:	3c d0       	rcall	.+120    	; 0x1808 <__ultoa_invert+0x9c>
    1790:	67 0f       	add	r22, r23
    1792:	78 1f       	adc	r23, r24
    1794:	89 1f       	adc	r24, r25
    1796:	9a 1f       	adc	r25, r26
    1798:	a1 1d       	adc	r26, r1
    179a:	68 0f       	add	r22, r24
    179c:	79 1f       	adc	r23, r25
    179e:	8a 1f       	adc	r24, r26
    17a0:	91 1d       	adc	r25, r1
    17a2:	a1 1d       	adc	r26, r1
    17a4:	6a 0f       	add	r22, r26
    17a6:	71 1d       	adc	r23, r1
    17a8:	81 1d       	adc	r24, r1
    17aa:	91 1d       	adc	r25, r1
    17ac:	a1 1d       	adc	r26, r1
    17ae:	20 d0       	rcall	.+64     	; 0x17f0 <__ultoa_invert+0x84>
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <__ultoa_invert+0x48>
    17b2:	68 94       	set
    17b4:	3f 91       	pop	r19
    17b6:	2a e0       	ldi	r18, 0x0A	; 10
    17b8:	26 9f       	mul	r18, r22
    17ba:	11 24       	eor	r1, r1
    17bc:	30 19       	sub	r19, r0
    17be:	30 5d       	subi	r19, 0xD0	; 208
    17c0:	31 93       	st	Z+, r19
    17c2:	de f6       	brtc	.-74     	; 0x177a <__ultoa_invert+0xe>
    17c4:	cf 01       	movw	r24, r30
    17c6:	08 95       	ret
    17c8:	46 2f       	mov	r20, r22
    17ca:	47 70       	andi	r20, 0x07	; 7
    17cc:	40 5d       	subi	r20, 0xD0	; 208
    17ce:	41 93       	st	Z+, r20
    17d0:	b3 e0       	ldi	r27, 0x03	; 3
    17d2:	0f d0       	rcall	.+30     	; 0x17f2 <__ultoa_invert+0x86>
    17d4:	c9 f7       	brne	.-14     	; 0x17c8 <__ultoa_invert+0x5c>
    17d6:	f6 cf       	rjmp	.-20     	; 0x17c4 <__ultoa_invert+0x58>
    17d8:	46 2f       	mov	r20, r22
    17da:	4f 70       	andi	r20, 0x0F	; 15
    17dc:	40 5d       	subi	r20, 0xD0	; 208
    17de:	4a 33       	cpi	r20, 0x3A	; 58
    17e0:	18 f0       	brcs	.+6      	; 0x17e8 <__ultoa_invert+0x7c>
    17e2:	49 5d       	subi	r20, 0xD9	; 217
    17e4:	31 fd       	sbrc	r19, 1
    17e6:	40 52       	subi	r20, 0x20	; 32
    17e8:	41 93       	st	Z+, r20
    17ea:	02 d0       	rcall	.+4      	; 0x17f0 <__ultoa_invert+0x84>
    17ec:	a9 f7       	brne	.-22     	; 0x17d8 <__ultoa_invert+0x6c>
    17ee:	ea cf       	rjmp	.-44     	; 0x17c4 <__ultoa_invert+0x58>
    17f0:	b4 e0       	ldi	r27, 0x04	; 4
    17f2:	a6 95       	lsr	r26
    17f4:	97 95       	ror	r25
    17f6:	87 95       	ror	r24
    17f8:	77 95       	ror	r23
    17fa:	67 95       	ror	r22
    17fc:	ba 95       	dec	r27
    17fe:	c9 f7       	brne	.-14     	; 0x17f2 <__ultoa_invert+0x86>
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	61 05       	cpc	r22, r1
    1804:	71 05       	cpc	r23, r1
    1806:	08 95       	ret
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	0a 2e       	mov	r0, r26
    180e:	06 94       	lsr	r0
    1810:	57 95       	ror	r21
    1812:	47 95       	ror	r20
    1814:	37 95       	ror	r19
    1816:	27 95       	ror	r18
    1818:	ba 95       	dec	r27
    181a:	c9 f7       	brne	.-14     	; 0x180e <__ultoa_invert+0xa2>
    181c:	62 0f       	add	r22, r18
    181e:	73 1f       	adc	r23, r19
    1820:	84 1f       	adc	r24, r20
    1822:	95 1f       	adc	r25, r21
    1824:	a0 1d       	adc	r26, r0
    1826:	08 95       	ret

00001828 <__ctype_isfalse>:
    1828:	99 27       	eor	r25, r25
    182a:	88 27       	eor	r24, r24

0000182c <__ctype_istrue>:
    182c:	08 95       	ret

0000182e <__prologue_saves__>:
    182e:	2f 92       	push	r2
    1830:	3f 92       	push	r3
    1832:	4f 92       	push	r4
    1834:	5f 92       	push	r5
    1836:	6f 92       	push	r6
    1838:	7f 92       	push	r7
    183a:	8f 92       	push	r8
    183c:	9f 92       	push	r9
    183e:	af 92       	push	r10
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	ca 1b       	sub	r28, r26
    1858:	db 0b       	sbc	r29, r27
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	09 94       	ijmp

00001866 <__epilogue_restores__>:
    1866:	2a 88       	ldd	r2, Y+18	; 0x12
    1868:	39 88       	ldd	r3, Y+17	; 0x11
    186a:	48 88       	ldd	r4, Y+16	; 0x10
    186c:	5f 84       	ldd	r5, Y+15	; 0x0f
    186e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1870:	7d 84       	ldd	r7, Y+13	; 0x0d
    1872:	8c 84       	ldd	r8, Y+12	; 0x0c
    1874:	9b 84       	ldd	r9, Y+11	; 0x0b
    1876:	aa 84       	ldd	r10, Y+10	; 0x0a
    1878:	b9 84       	ldd	r11, Y+9	; 0x09
    187a:	c8 84       	ldd	r12, Y+8	; 0x08
    187c:	df 80       	ldd	r13, Y+7	; 0x07
    187e:	ee 80       	ldd	r14, Y+6	; 0x06
    1880:	fd 80       	ldd	r15, Y+5	; 0x05
    1882:	0c 81       	ldd	r16, Y+4	; 0x04
    1884:	1b 81       	ldd	r17, Y+3	; 0x03
    1886:	aa 81       	ldd	r26, Y+2	; 0x02
    1888:	b9 81       	ldd	r27, Y+1	; 0x01
    188a:	ce 0f       	add	r28, r30
    188c:	d1 1d       	adc	r29, r1
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	ed 01       	movw	r28, r26
    189a:	08 95       	ret

0000189c <_exit>:
    189c:	f8 94       	cli

0000189e <__stop_program>:
    189e:	ff cf       	rjmp	.-2      	; 0x189e <__stop_program>
