
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000017f2  00001886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d5  0080012e  0080012e  00001954  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f71  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000044d9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
       4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
       c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      10:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_4>
      14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      24:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_9>
      28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      2c:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_11>
      30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
      54:	8c 00       	.word	0x008c	; ????
      56:	c3 02       	muls	r28, r19
      58:	f4 00       	.word	0x00f4	; ????
      5a:	c3 02       	muls	r28, r19
      5c:	58 01       	movw	r10, r16
      5e:	a9 02       	muls	r26, r25
      60:	c3 02       	muls	r28, r19
      62:	c3 02       	muls	r28, r19
      64:	c3 02       	muls	r28, r19
      66:	c3 02       	muls	r28, r19
      68:	c3 02       	muls	r28, r19
      6a:	c3 02       	muls	r28, r19
      6c:	c3 02       	muls	r28, r19
      6e:	c3 02       	muls	r28, r19
      70:	c3 02       	muls	r28, r19
      72:	c3 02       	muls	r28, r19
      74:	c3 02       	muls	r28, r19
      76:	9b 02       	muls	r25, r27
      78:	c3 02       	muls	r28, r19
      7a:	e0 01       	movw	r28, r0
      7c:	41 02       	muls	r20, r17

0000007e <__trampolines_end>:
      7e:	63 64       	ori	r22, 0x43	; 67
      80:	69 6e       	ori	r22, 0xE9	; 233
      82:	6f 70       	andi	r22, 0x0F	; 15
      84:	73 75       	andi	r23, 0x53	; 83
      86:	78 58       	subi	r23, 0x88	; 136
      88:	5b 00       	.word	0x005b	; ????

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf e5       	ldi	r28, 0x5F	; 95
      90:	d4 e0       	ldi	r29, 0x04	; 4
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e6       	ldi	r26, 0x60	; 96
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e2 ef       	ldi	r30, 0xF2	; 242
      9e:	f7 e1       	ldi	r31, 0x17	; 23
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ae 32       	cpi	r26, 0x2E	; 46
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	ae e2       	ldi	r26, 0x2E	; 46
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a3 30       	cpi	r26, 0x03	; 3
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 41 05 	call	0xa82	; 0xa82 <main>
      c0:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <_exit>

000000c4 <__bad_interrupt>:
      c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	28 97       	sbiw	r28, 0x08	; 8
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61
      e8:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      ea:	dc 01       	movw	r26, r24
      ec:	11 96       	adiw	r26, 0x01	; 1
      ee:	fc 90       	ld	r15, X
      f0:	11 97       	sbiw	r26, 0x01	; 1
      f2:	2f 2d       	mov	r18, r15
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	c9 01       	movw	r24, r18
      f8:	c0 97       	sbiw	r24, 0x30	; 48
      fa:	9e 83       	std	Y+6, r25	; 0x06
      fc:	8d 83       	std	Y+5, r24	; 0x05
	switch (code[0]) {
      fe:	4c 91       	ld	r20, X
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	41 54       	subi	r20, 0x41	; 65
     104:	51 09       	sbc	r21, r1
     106:	45 31       	cpi	r20, 0x15	; 21
     108:	51 05       	cpc	r21, r1
     10a:	08 f0       	brcs	.+2      	; 0x10e <runCmd+0x46>
     10c:	3c c2       	rjmp	.+1144   	; 0x586 <__stack+0x127>
     10e:	46 5d       	subi	r20, 0xD6	; 214
     110:	5f 4f       	sbci	r21, 0xFF	; 255
     112:	fa 01       	movw	r30, r20
     114:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__tablejump2__>
	case 'A':		// control port a
		if (code[2] - '0') {
     118:	d8 01       	movw	r26, r16
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	20 33       	cpi	r18, 0x30	; 48
     120:	29 f1       	breq	.+74     	; 0x16c <runCmd+0xa4>
			writeEEPROM(addr, '1');
     122:	61 e3       	ldi	r22, 0x31	; 49
     124:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			PORTA |= 1 << addr;
     128:	2b b3       	in	r18, 0x1b	; 27
     12a:	ee 24       	eor	r14, r14
     12c:	e3 94       	inc	r14
     12e:	f1 2c       	mov	r15, r1
     130:	c7 01       	movw	r24, r14
     132:	0d 80       	ldd	r0, Y+5	; 0x05
     134:	02 c0       	rjmp	.+4      	; 0x13a <runCmd+0x72>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <runCmd+0x6e>
     13e:	28 2b       	or	r18, r24
     140:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     142:	f8 01       	movw	r30, r16
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	1f 92       	push	r1
     148:	8f 93       	push	r24
     14a:	82 e6       	ldi	r24, 0x62	; 98
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	85 e3       	ldi	r24, 0x35	; 53
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
			status |= 1 << addr;
     15e:	0d 80       	ldd	r0, Y+5	; 0x05
     160:	02 c0       	rjmp	.+4      	; 0x166 <runCmd+0x9e>
     162:	ee 0c       	add	r14, r14
     164:	ff 1c       	adc	r15, r15
     166:	0a 94       	dec	r0
     168:	e2 f7       	brpl	.-8      	; 0x162 <runCmd+0x9a>
     16a:	6a c0       	rjmp	.+212    	; 0x240 <runCmd+0x178>
		} else {
			writeEEPROM(addr, '0');
     16c:	60 e3       	ldi	r22, 0x30	; 48
     16e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			PORTA &= ~(1 << addr);
     172:	2b b3       	in	r18, 0x1b	; 27
     174:	ee 24       	eor	r14, r14
     176:	e3 94       	inc	r14
     178:	f1 2c       	mov	r15, r1
     17a:	c7 01       	movw	r24, r14
     17c:	0d 80       	ldd	r0, Y+5	; 0x05
     17e:	02 c0       	rjmp	.+4      	; 0x184 <runCmd+0xbc>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <runCmd+0xb8>
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     18e:	d8 01       	movw	r26, r16
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	8c 91       	ld	r24, X
     194:	1f 92       	push	r1
     196:	8f 93       	push	r24
     198:	8e e6       	ldi	r24, 0x6E	; 110
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	85 e3       	ldi	r24, 0x35	; 53
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
			status &= ~(1 << addr);
     1ac:	97 01       	movw	r18, r14
     1ae:	0d 80       	ldd	r0, Y+5	; 0x05
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <runCmd+0xee>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <runCmd+0xea>
     1ba:	20 95       	com	r18
     1bc:	30 95       	com	r19
     1be:	80 91 db 01 	lds	r24, 0x01DB
     1c2:	90 91 dc 01 	lds	r25, 0x01DC
     1c6:	82 23       	and	r24, r18
     1c8:	93 23       	and	r25, r19
     1ca:	90 93 dc 01 	sts	0x01DC, r25
     1ce:	80 93 db 01 	sts	0x01DB, r24
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
		}
		runCmd(buf);
     1de:	85 e3       	ldi	r24, 0x35	; 53
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
		break;
     1e6:	e5 c1       	rjmp	.+970    	; 0x5b2 <__stack+0x153>
	case 'C':		// control port c
		if (code[2] - '0') {
     1e8:	f8 01       	movw	r30, r16
     1ea:	22 81       	ldd	r18, Z+2	; 0x02
     1ec:	08 96       	adiw	r24, 0x08	; 8
     1ee:	20 33       	cpi	r18, 0x30	; 48
     1f0:	71 f1       	breq	.+92     	; 0x24e <runCmd+0x186>
			writeEEPROM(8 + addr, '1');
     1f2:	61 e3       	ldi	r22, 0x31	; 49
     1f4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			PORTC |= 1 << addr;
     1f8:	25 b3       	in	r18, 0x15	; 21
     1fa:	ee 24       	eor	r14, r14
     1fc:	e3 94       	inc	r14
     1fe:	f1 2c       	mov	r15, r1
     200:	c7 01       	movw	r24, r14
     202:	0d 80       	ldd	r0, Y+5	; 0x05
     204:	02 c0       	rjmp	.+4      	; 0x20a <runCmd+0x142>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	0a 94       	dec	r0
     20c:	e2 f7       	brpl	.-8      	; 0x206 <runCmd+0x13e>
     20e:	28 2b       	or	r18, r24
     210:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     212:	d8 01       	movw	r26, r16
     214:	11 96       	adiw	r26, 0x01	; 1
     216:	8c 91       	ld	r24, X
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	8a e7       	ldi	r24, 0x7A	; 122
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	85 e3       	ldi	r24, 0x35	; 53
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
			status |= 1 << (8 + addr);
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	9e 81       	ldd	r25, Y+6	; 0x06
     234:	08 96       	adiw	r24, 0x08	; 8
     236:	02 c0       	rjmp	.+4      	; 0x23c <runCmd+0x174>
     238:	ee 0c       	add	r14, r14
     23a:	ff 1c       	adc	r15, r15
     23c:	8a 95       	dec	r24
     23e:	e2 f7       	brpl	.-8      	; 0x238 <runCmd+0x170>
     240:	80 91 db 01 	lds	r24, 0x01DB
     244:	90 91 dc 01 	lds	r25, 0x01DC
     248:	8e 29       	or	r24, r14
     24a:	9f 29       	or	r25, r15
     24c:	be cf       	rjmp	.-132    	; 0x1ca <runCmd+0x102>
		} else {
			writeEEPROM(8 + addr, '0');
     24e:	60 e3       	ldi	r22, 0x30	; 48
     250:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			PORTC &= ~(1 << addr);
     254:	25 b3       	in	r18, 0x15	; 21
     256:	ee 24       	eor	r14, r14
     258:	e3 94       	inc	r14
     25a:	f1 2c       	mov	r15, r1
     25c:	c7 01       	movw	r24, r14
     25e:	0d 80       	ldd	r0, Y+5	; 0x05
     260:	02 c0       	rjmp	.+4      	; 0x266 <runCmd+0x19e>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <runCmd+0x19a>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     270:	f8 01       	movw	r30, r16
     272:	81 81       	ldd	r24, Z+1	; 0x01
     274:	1f 92       	push	r1
     276:	8f 93       	push	r24
     278:	86 e8       	ldi	r24, 0x86	; 134
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	85 e3       	ldi	r24, 0x35	; 53
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
			status ^= ~(1 << (8 + addr));
     28c:	8d 81       	ldd	r24, Y+5	; 0x05
     28e:	9e 81       	ldd	r25, Y+6	; 0x06
     290:	08 96       	adiw	r24, 0x08	; 8
     292:	97 01       	movw	r18, r14
     294:	02 c0       	rjmp	.+4      	; 0x29a <runCmd+0x1d2>
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	8a 95       	dec	r24
     29c:	e2 f7       	brpl	.-8      	; 0x296 <runCmd+0x1ce>
     29e:	20 95       	com	r18
     2a0:	30 95       	com	r19
     2a2:	80 91 db 01 	lds	r24, 0x01DB
     2a6:	90 91 dc 01 	lds	r25, 0x01DC
     2aa:	82 27       	eor	r24, r18
     2ac:	93 27       	eor	r25, r19
     2ae:	8d cf       	rjmp	.-230    	; 0x1ca <runCmd+0x102>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2b0:	d8 01       	movw	r26, r16
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	6c 91       	ld	r22, X
     2b6:	69 36       	cpi	r22, 0x69	; 105
     2b8:	81 f4       	brne	.+32     	; 0x2da <runCmd+0x212>
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++) {
				wdt_reset();
     2be:	a8 95       	wdr
				writeEEPROM(i, code[1]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	61 81       	ldd	r22, Z+1	; 0x01
     2c4:	c7 01       	movw	r24, r14
     2c6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
			for (i = 0; i < 16; i++) {
     2ca:	ff ef       	ldi	r31, 0xFF	; 255
     2cc:	ef 1a       	sub	r14, r31
     2ce:	ff 0a       	sbc	r15, r31
     2d0:	20 e1       	ldi	r18, 0x10	; 16
     2d2:	e2 16       	cp	r14, r18
     2d4:	f1 04       	cpc	r15, r1
     2d6:	99 f7       	brne	.-26     	; 0x2be <runCmd+0x1f6>
     2d8:	6c c1       	rjmp	.+728    	; 0x5b2 <__stack+0x153>
				wdt_reset();
				writeEEPROM(i, code[1]);
			}
		} else if (code[2] == 'f')
     2da:	66 36       	cpi	r22, 0x66	; 102
     2dc:	d1 f4       	brne	.+52     	; 0x312 <runCmd+0x24a>
		{
			if(code[1] == 'a')
     2de:	31 e6       	ldi	r19, 0x61	; 97
     2e0:	f3 12       	cpse	r15, r19
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <runCmd+0x222>
				addr = EEPROM_SIZE;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <runCmd+0x226>
			else
				addr = 16;
     2ea:	80 e1       	ldi	r24, 0x10	; 16
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9e 83       	std	Y+6, r25	; 0x06
     2f0:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i') {
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	08 17       	cp	r16, r24
     2fc:	19 07       	cpc	r17, r25
     2fe:	08 f0       	brcs	.+2      	; 0x302 <runCmd+0x23a>
     300:	58 c1       	rjmp	.+688    	; 0x5b2 <__stack+0x153>
				wdt_reset();
     302:	a8 95       	wdr
				writeEEPROM(i, 0xff);
     304:	6f ef       	ldi	r22, 0xFF	; 255
     306:	c8 01       	movw	r24, r16
     308:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++) {
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	f2 cf       	rjmp	.-28     	; 0x2f6 <runCmd+0x22e>
				wdt_reset();
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
     312:	62 37       	cpi	r22, 0x72	; 114
     314:	31 f4       	brne	.+12     	; 0x322 <runCmd+0x25a>
			PORTA = ~readEEPROM(code[1]);
     316:	c9 01       	movw	r24, r18
     318:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     31c:	80 95       	com	r24
     31e:	8b bb       	out	0x1b, r24	; 27
     320:	48 c1       	rjmp	.+656    	; 0x5b2 <__stack+0x153>
		} else if (code[1] == 'R') {
     322:	82 e5       	ldi	r24, 0x52	; 82
     324:	f8 12       	cpse	r15, r24
     326:	4a c0       	rjmp	.+148    	; 0x3bc <runCmd+0x2f4>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     328:	ce 01       	movw	r24, r28
     32a:	05 96       	adiw	r24, 0x05	; 5
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	84 eb       	ldi	r24, 0xB4	; 180
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	9f 93       	push	r25
     336:	8f 93       	push	r24
     338:	0e 5f       	subi	r16, 0xFE	; 254
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	1f 93       	push	r17
     33e:	0f 93       	push	r16
     340:	0e 94 0d 06 	call	0xc1a	; 0xc1a <sscanf>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	69 f4       	brne	.+26     	; 0x36e <runCmd+0x2a6>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     354:	8d 81       	ldd	r24, Y+5	; 0x05
     356:	9e 81       	ldd	r25, Y+6	; 0x06
     358:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     35c:	1f 92       	push	r1
     35e:	8f 93       	push	r24
     360:	8e 81       	ldd	r24, Y+6	; 0x06
     362:	8f 93       	push	r24
     364:	8d 81       	ldd	r24, Y+5	; 0x05
     366:	8f 93       	push	r24
     368:	82 e9       	ldi	r24, 0x92	; 146
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fa c0       	rjmp	.+500    	; 0x562 <__stack+0x103>
				writeEEPROM(i, 0xff);
			}
		} else if (code[2] == 'r') {
			PORTA = ~readEEPROM(code[1]);
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     372:	32 e9       	ldi	r19, 0x92	; 146
     374:	c3 2e       	mov	r12, r19
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	d3 2e       	mov	r13, r19
     37a:	45 e3       	ldi	r20, 0x35	; 53
     37c:	e4 2e       	mov	r14, r20
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     382:	c8 01       	movw	r24, r16
     384:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     388:	1f 92       	push	r1
     38a:	8f 93       	push	r24
     38c:	1f 93       	push	r17
     38e:	0f 93       	push	r16
     390:	df 92       	push	r13
     392:	cf 92       	push	r12
     394:	ff 92       	push	r15
     396:	ef 92       	push	r14
     398:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
						readEEPROM(i));
					print(buf);
     39c:	85 e3       	ldi	r24, 0x35	; 53
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
		} else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	01 15       	cp	r16, r1
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	1f 07       	cpc	r17, r31
     3b8:	21 f7       	brne	.-56     	; 0x382 <runCmd+0x2ba>
     3ba:	fb c0       	rjmp	.+502    	; 0x5b2 <__stack+0x153>
						readEEPROM(i));
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
     3bc:	c9 01       	movw	r24, r18
     3be:	59 c0       	rjmp	.+178    	; 0x472 <__stack+0x13>
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	ce 01       	movw	r24, r28
     3c6:	03 96       	adiw	r24, 0x03	; 3
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	89 e9       	ldi	r24, 0x99	; 153
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9f 93       	push	r25
     3d2:	8f 93       	push	r24
     3d4:	1f 93       	push	r17
     3d6:	0f 93       	push	r16
     3d8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <sscanf>
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	02 97       	sbiw	r24, 0x02	; 2
     3e8:	09 f0       	breq	.+2      	; 0x3ec <runCmd+0x324>
     3ea:	46 c0       	rjmp	.+140    	; 0x478 <__stack+0x19>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3ec:	6c 81       	ldd	r22, Y+4	; 0x04
     3ee:	80 91 99 01 	lds	r24, 0x0199
     3f2:	90 91 9a 01 	lds	r25, 0x019A
     3f6:	9c 01       	movw	r18, r24
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	31 09       	sbc	r19, r1
     3fc:	30 93 9a 01 	sts	0x019A, r19
     400:	20 93 99 01 	sts	0x0199, r18
     404:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     408:	6b 81       	ldd	r22, Y+3	; 0x03
     40a:	80 91 99 01 	lds	r24, 0x0199
     40e:	90 91 9a 01 	lds	r25, 0x019A
     412:	9c 01       	movw	r18, r24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	31 09       	sbc	r19, r1
     418:	30 93 9a 01 	sts	0x019A, r19
     41c:	20 93 99 01 	sts	0x0199, r18
     420:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     424:	78 01       	movw	r14, r16
     426:	f8 01       	movw	r30, r16
     428:	01 90       	ld	r0, Z+
     42a:	00 20       	and	r0, r0
     42c:	e9 f7       	brne	.-6      	; 0x428 <runCmd+0x360>
     42e:	31 97       	sbiw	r30, 0x01	; 1
     430:	e0 1b       	sub	r30, r16
     432:	f1 0b       	sbc	r31, r17
     434:	80 91 99 01 	lds	r24, 0x0199
     438:	90 91 9a 01 	lds	r25, 0x019A
     43c:	97 01       	movw	r18, r14
     43e:	20 1b       	sub	r18, r16
     440:	31 0b       	sbc	r19, r17
     442:	2e 17       	cp	r18, r30
     444:	3f 07       	cpc	r19, r31
     446:	68 f4       	brcc	.+26     	; 0x462 <__stack+0x3>
				writeEEPROM(stackTail--, code[i]);
     448:	d7 01       	movw	r26, r14
     44a:	6d 91       	ld	r22, X+
     44c:	7d 01       	movw	r14, r26
     44e:	9c 01       	movw	r18, r24
     450:	21 50       	subi	r18, 0x01	; 1
     452:	31 09       	sbc	r19, r1
     454:	30 93 9a 01 	sts	0x019A, r19
     458:	20 93 99 01 	sts	0x0199, r18
     45c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
     460:	e2 cf       	rjmp	.-60     	; 0x426 <runCmd+0x35e>
			}
			writeEEPROM(stackTail--, '\n');
     462:	9c 01       	movw	r18, r24
     464:	21 50       	subi	r18, 0x01	; 1
     466:	31 09       	sbc	r19, r1
     468:	30 93 9a 01 	sts	0x019A, r19
     46c:	20 93 99 01 	sts	0x0199, r18
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     476:	9d c0       	rjmp	.+314    	; 0x5b2 <__stack+0x153>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     478:	8f e9       	ldi	r24, 0x9F	; 159
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
			return;
     480:	98 c0       	rjmp	.+304    	; 0x5b2 <__stack+0x153>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	02 96       	adiw	r24, 0x02	; 2
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	04 96       	adiw	r24, 0x04	; 4
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	8c ea       	ldi	r24, 0xAC	; 172
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	1f 93       	push	r17
     4a6:	0f 93       	push	r16
     4a8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <sscanf>
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	04 97       	sbiw	r24, 0x04	; 4
     4b8:	09 f0       	breq	.+2      	; 0x4bc <__stack+0x5d>
     4ba:	7b c0       	rjmp	.+246    	; 0x5b2 <__stack+0x153>
			if (port == 'A')
     4bc:	88 85       	ldd	r24, Y+8	; 0x08
     4be:	81 34       	cpi	r24, 0x41	; 65
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__stack+0x69>
				addr = 16;
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__stack+0x71>
			else if (port == 'C')
     4c8:	83 34       	cpi	r24, 0x43	; 67
     4ca:	b1 f4       	brne	.+44     	; 0x4f8 <__stack+0x99>
				addr = 48;
     4cc:	80 e3       	ldi	r24, 0x30	; 48
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9e 83       	std	Y+6, r25	; 0x06
     4d2:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4d4:	8f 81       	ldd	r24, Y+7	; 0x07
     4d6:	90 ed       	ldi	r25, 0xD0	; 208
     4d8:	98 0f       	add	r25, r24
     4da:	9a 30       	cpi	r25, 0x0A	; 10
     4dc:	90 f4       	brcc	.+36     	; 0x502 <__stack+0xa3>
				addr += (pin - '0') * 4;
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	c0 97       	sbiw	r24, 0x30	; 48
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	2d 81       	ldd	r18, Y+5	; 0x05
     4ec:	3e 81       	ldd	r19, Y+6	; 0x06
     4ee:	28 0f       	add	r18, r24
     4f0:	39 1f       	adc	r19, r25
     4f2:	3e 83       	std	Y+6, r19	; 0x06
     4f4:	2d 83       	std	Y+5, r18	; 0x05
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <__stack+0xa3>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4f8:	87 eb       	ldi	r24, 0xB7	; 183
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 be 05 	call	0xb7c	; 0xb7c <puts>
				return;
     500:	58 c0       	rjmp	.+176    	; 0x5b2 <__stack+0x153>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     502:	6c 81       	ldd	r22, Y+4	; 0x04
     504:	8d 81       	ldd	r24, Y+5	; 0x05
     506:	9e 81       	ldd	r25, Y+6	; 0x06
     508:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			writeEEPROM(addr + 1, time);
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
     510:	6b 81       	ldd	r22, Y+3	; 0x03
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     518:	6a 81       	ldd	r22, Y+2	; 0x02
     51a:	8d 81       	ldd	r24, Y+5	; 0x05
     51c:	9e 81       	ldd	r25, Y+6	; 0x06
     51e:	02 96       	adiw	r24, 0x02	; 2
     520:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     524:	8d 81       	ldd	r24, Y+5	; 0x05
     526:	9e 81       	ldd	r25, Y+6	; 0x06
     528:	69 81       	ldd	r22, Y+1	; 0x01
     52a:	03 96       	adiw	r24, 0x03	; 3
     52c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <writeEEPROM>
			setDuty();
     530:	0e 94 f7 02 	call	0x5ee	; 0x5ee <setDuty>
     534:	3e c0       	rjmp	.+124    	; 0x5b2 <__stack+0x153>
		}
		break;
	case 'R':		// Reboot
		print("REBOOTING\n");
     536:	82 ec       	ldi	r24, 0xC2	; 194
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
		wdt_enable(WDTO_15MS);
     53e:	28 e0       	ldi	r18, 0x08	; 8
     540:	88 e1       	ldi	r24, 0x18	; 24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	a8 95       	wdr
     54a:	81 bd       	out	0x21, r24	; 33
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	21 bd       	out	0x21, r18	; 33
     550:	ff cf       	rjmp	.-2      	; 0x550 <__stack+0xf1>
		while (1);
		break;
	case 'F':		// Print CPU frequency
		sprintf(buf, "F_CPU: %ld Hz\n", F_CPU);
     552:	1f 92       	push	r1
     554:	8a e7       	ldi	r24, 0x7A	; 122
     556:	8f 93       	push	r24
     558:	82 e1       	ldi	r24, 0x12	; 18
     55a:	8f 93       	push	r24
     55c:	1f 92       	push	r1
     55e:	8d ec       	ldi	r24, 0xCD	; 205
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	85 e3       	ldi	r24, 0x35	; 53
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
		print(buf);
     572:	85 e3       	ldi	r24, 0x35	; 53
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
		break;
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
     584:	16 c0       	rjmp	.+44     	; 0x5b2 <__stack+0x153>
	default:
		sprintf(buf, "Unrecognized code:%s\n", code);
     586:	1f 93       	push	r17
     588:	0f 93       	push	r16
     58a:	8c ed       	ldi	r24, 0xDC	; 220
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	85 e3       	ldi	r24, 0x35	; 53
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sprintf>
		print(buf);
     59e:	85 e3       	ldi	r24, 0x35	; 53
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
		break;
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
	}
}
     5b2:	28 96       	adiw	r28, 0x08	; 8
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	08 95       	ret

000005d0 <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     5d0:	e1 99       	sbic	0x1c, 1	; 28
     5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <writeEEPROM>
	EEAR = addr;
     5d4:	9f bb       	out	0x1f, r25	; 31
     5d6:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     5d8:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     5da:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     5dc:	e1 9a       	sbi	0x1c, 1	; 28
     5de:	08 95       	ret

000005e0 <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     5e0:	e1 99       	sbic	0x1c, 1	; 28
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <readEEPROM>
	EEAR = addr;
     5e4:	9f bb       	out	0x1f, r25	; 31
     5e6:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     5e8:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     5ea:	8d b3       	in	r24, 0x1d	; 29
}
     5ec:	08 95       	ret

000005ee <setDuty>:

void setDuty()
{
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5fc:	8e 01       	movw	r16, r28
     5fe:	15 95       	asr	r17
     600:	07 95       	ror	r16
     602:	15 95       	asr	r17
     604:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     606:	ce 01       	movw	r24, r28
     608:	40 96       	adiw	r24, 0x10	; 16
     60a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     60e:	f8 2e       	mov	r15, r24
     610:	ce 01       	movw	r24, r28
     612:	41 96       	adiw	r24, 0x11	; 17
     614:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     618:	00 0f       	add	r16, r16
     61a:	11 1f       	adc	r17, r17
     61c:	f8 01       	movw	r30, r16
     61e:	e5 56       	subi	r30, 0x65	; 101
     620:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     622:	2f 2d       	mov	r18, r15
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	32 2f       	mov	r19, r18
     628:	22 27       	eor	r18, r18
     62a:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     62c:	31 83       	std	Z+1, r19	; 0x01
     62e:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     630:	ce 01       	movw	r24, r28
     632:	42 96       	adiw	r24, 0x12	; 18
     634:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     638:	f8 2e       	mov	r15, r24
     63a:	ce 01       	movw	r24, r28
     63c:	43 96       	adiw	r24, 0x13	; 19
     63e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     642:	f8 01       	movw	r30, r16
     644:	e5 54       	subi	r30, 0x45	; 69
     646:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     648:	2f 2d       	mov	r18, r15
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	32 2f       	mov	r19, r18
     64e:	22 27       	eor	r18, r18
     650:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     652:	31 83       	std	Z+1, r19	; 0x01
     654:	20 83       	st	Z, r18
     656:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     658:	c0 34       	cpi	r28, 0x40	; 64
     65a:	d1 05       	cpc	r29, r1
     65c:	79 f6       	brne	.-98     	; 0x5fc <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     65e:	40 91 db 01 	lds	r20, 0x01DB
     662:	50 91 dc 01 	lds	r21, 0x01DC
     666:	cb e9       	ldi	r28, 0x9B	; 155
     668:	d1 e0       	ldi	r29, 0x01	; 1
     66a:	ed ed       	ldi	r30, 0xDD	; 221
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	ab eb       	ldi	r26, 0xBB	; 187
     670:	b1 e0       	ldi	r27, 0x01	; 1
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	9b 01       	movw	r18, r22
     67c:	08 2e       	mov	r0, r24
     67e:	02 c0       	rjmp	.+4      	; 0x684 <setDuty+0x96>
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	0a 94       	dec	r0
     686:	e2 f7       	brpl	.-8      	; 0x680 <setDuty+0x92>
     688:	24 23       	and	r18, r20
     68a:	35 23       	and	r19, r21
     68c:	23 2b       	or	r18, r19
     68e:	19 f0       	breq	.+6      	; 0x696 <setDuty+0xa8>
			m[i] = dutyH[i];
     690:	28 81       	ld	r18, Y
     692:	39 81       	ldd	r19, Y+1	; 0x01
     694:	03 c0       	rjmp	.+6      	; 0x69c <setDuty+0xae>
		else
			m[i] = dutyL[i];
     696:	2d 91       	ld	r18, X+
     698:	3c 91       	ld	r19, X
     69a:	11 97       	sbiw	r26, 0x01	; 1
     69c:	31 83       	std	Z+1, r19	; 0x01
     69e:	20 83       	st	Z, r18
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	22 96       	adiw	r28, 0x02	; 2
     6a4:	32 96       	adiw	r30, 0x02	; 2
     6a6:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     6a8:	80 31       	cpi	r24, 0x10	; 16
     6aa:	91 05       	cpc	r25, r1
     6ac:	31 f7       	brne	.-52     	; 0x67a <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	08 95       	ret

000006ba <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	2f 93       	push	r18
     6d2:	3f 93       	push	r19
     6d4:	4f 93       	push	r20
     6d6:	5f 93       	push	r21
     6d8:	6f 93       	push	r22
     6da:	7f 93       	push	r23
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	af 93       	push	r26
     6e2:	bf 93       	push	r27
     6e4:	ef 93       	push	r30
     6e6:	ff 93       	push	r31
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	c4 56       	subi	r28, 0x64	; 100
     6f2:	d1 09       	sbc	r29, r1
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     6f8:	80 91 33 01 	lds	r24, 0x0133
     6fc:	90 91 34 01 	lds	r25, 0x0134
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	90 93 34 01 	sts	0x0134, r25
     706:	80 93 33 01 	sts	0x0133, r24
	if (t > F_CPU / 256 / 1024) {
     70a:	4f 97       	sbiw	r24, 0x1f	; 31
     70c:	08 f4       	brcc	.+2      	; 0x710 <__vector_9+0x56>
     70e:	6e c0       	rjmp	.+220    	; 0x7ec <__vector_9+0x132>
		t = 0;
     710:	10 92 34 01 	sts	0x0134, r1
     714:	10 92 33 01 	sts	0x0133, r1
		seconds++;
     718:	80 91 31 01 	lds	r24, 0x0131
     71c:	90 91 32 01 	lds	r25, 0x0132
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	90 93 32 01 	sts	0x0132, r25
     726:	80 93 31 01 	sts	0x0131, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     72a:	80 91 60 00 	lds	r24, 0x0060
     72e:	90 91 61 00 	lds	r25, 0x0061
     732:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     736:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     738:	80 91 60 00 	lds	r24, 0x0060
     73c:	90 91 61 00 	lds	r25, 0x0061
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     746:	21 2f       	mov	r18, r17
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	32 2f       	mov	r19, r18
     74c:	22 27       	eor	r18, r18

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     74e:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     750:	2f 3f       	cpi	r18, 0xFF	; 255
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	38 07       	cpc	r19, r24
     756:	09 f4       	brne	.+2      	; 0x75a <__vector_9+0xa0>
     758:	49 c0       	rjmp	.+146    	; 0x7ec <__vector_9+0x132>
			if (seconds >= time) {
     75a:	80 91 31 01 	lds	r24, 0x0131
     75e:	90 91 32 01 	lds	r25, 0x0132
     762:	82 17       	cp	r24, r18
     764:	93 07       	cpc	r25, r19
     766:	08 f4       	brcc	.+2      	; 0x76a <__vector_9+0xb0>
     768:	41 c0       	rjmp	.+130    	; 0x7ec <__vector_9+0x132>
				p -= 2;
     76a:	80 91 60 00 	lds	r24, 0x0060
     76e:	90 91 61 00 	lds	r25, 0x0061
     772:	02 97       	sbiw	r24, 0x02	; 2
     774:	90 93 61 00 	sts	0x0061, r25
     778:	80 93 60 00 	sts	0x0060, r24
     77c:	8e 01       	movw	r16, r28
     77e:	0f 5f       	subi	r16, 0xFF	; 255
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	78 01       	movw	r14, r16
     784:	68 01       	movw	r12, r16
     786:	ce 18       	sub	r12, r14
     788:	df 08       	sbc	r13, r15
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     78a:	80 91 60 00 	lds	r24, 0x0060
     78e:	90 91 61 00 	lds	r25, 0x0061
     792:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     796:	f8 01       	movw	r30, r16
     798:	81 93       	st	Z+, r24
     79a:	8f 01       	movw	r16, r30
     79c:	20 91 60 00 	lds	r18, 0x0060
     7a0:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	c9 f4       	brne	.+50     	; 0x7da <__vector_9+0x120>
					    cmd[i + 1] = 0;
     7a8:	fe 01       	movw	r30, r28
     7aa:	ec 0d       	add	r30, r12
     7ac:	fd 1d       	adc	r31, r13
     7ae:	12 82       	std	Z+2, r1	; 0x02
						p--;
     7b0:	21 50       	subi	r18, 0x01	; 1
     7b2:	31 09       	sbc	r19, r1
     7b4:	30 93 61 00 	sts	0x0061, r19
     7b8:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				print("Auto running command:");
     7bc:	82 ef       	ldi	r24, 0xF2	; 242
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
				print(cmd);
     7c4:	c7 01       	movw	r24, r14
     7c6:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
				runCmd(cmd);
     7ca:	c7 01       	movw	r24, r14
     7cc:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
				seconds = 0;
     7d0:	10 92 32 01 	sts	0x0132, r1
     7d4:	10 92 31 01 	sts	0x0131, r1
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <__vector_9+0x132>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     7da:	83 31       	cpi	r24, 0x13	; 19
     7dc:	29 f3       	breq	.-54     	; 0x7a8 <__vector_9+0xee>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	31 09       	sbc	r19, r1
     7e2:	30 93 61 00 	sts	0x0061, r19
     7e6:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     7ea:	cc cf       	rjmp	.-104    	; 0x784 <__vector_9+0xca>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     7ec:	cc 59       	subi	r28, 0x9C	; 156
     7ee:	df 4f       	sbci	r29, 0xFF	; 255
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	7f 91       	pop	r23
     80c:	6f 91       	pop	r22
     80e:	5f 91       	pop	r21
     810:	4f 91       	pop	r20
     812:	3f 91       	pop	r19
     814:	2f 91       	pop	r18
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     856:	80 91 2f 01 	lds	r24, 0x012F
     85a:	90 91 30 01 	lds	r25, 0x0130
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	90 93 30 01 	sts	0x0130, r25
     864:	80 93 2f 01 	sts	0x012F, r24
	if (t > F_CPU / 256 / 1024) {
     868:	4f 97       	sbiw	r24, 0x1f	; 31
     86a:	08 f4       	brcc	.+2      	; 0x86e <__vector_4+0x42>
     86c:	61 c0       	rjmp	.+194    	; 0x930 <__vector_4+0x104>
		t = 0;
     86e:	10 92 30 01 	sts	0x0130, r1
     872:	10 92 2f 01 	sts	0x012F, r1
		sec++;
     876:	80 91 2e 01 	lds	r24, 0x012E
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 93 2e 01 	sts	0x012E, r24
		if (sec >= 60) {
     880:	8c 33       	cpi	r24, 0x3C	; 60
     882:	08 f4       	brcc	.+2      	; 0x886 <__vector_4+0x5a>
     884:	55 c0       	rjmp	.+170    	; 0x930 <__vector_4+0x104>
			sec = 0;
     886:	10 92 2e 01 	sts	0x012E, r1
     88a:	ed ed       	ldi	r30, 0xDD	; 221
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	cb eb       	ldi	r28, 0xBB	; 187
     890:	d1 e0       	ldi	r29, 0x01	; 1
     892:	ab e9       	ldi	r26, 0x9B	; 155
     894:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     89e:	40 81       	ld	r20, Z
     8a0:	51 81       	ldd	r21, Z+1	; 0x01
     8a2:	41 15       	cp	r20, r1
     8a4:	51 05       	cpc	r21, r1
     8a6:	29 f0       	breq	.+10     	; 0x8b2 <__vector_4+0x86>
					m[i]--;
     8a8:	41 50       	subi	r20, 0x01	; 1
     8aa:	51 09       	sbc	r21, r1
     8ac:	51 83       	std	Z+1, r21	; 0x01
     8ae:	40 83       	st	Z, r20
     8b0:	37 c0       	rjmp	.+110    	; 0x920 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     8b2:	88 30       	cpi	r24, 0x08	; 8
     8b4:	91 05       	cpc	r25, r1
     8b6:	50 f4       	brcc	.+20     	; 0x8cc <__vector_4+0xa0>
						PORTA ^= 1 << i;
     8b8:	6b b3       	in	r22, 0x1b	; 27
     8ba:	a9 01       	movw	r20, r18
     8bc:	08 2e       	mov	r0, r24
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__vector_4+0x96>
     8c0:	44 0f       	add	r20, r20
     8c2:	0a 94       	dec	r0
     8c4:	ea f7       	brpl	.-6      	; 0x8c0 <__vector_4+0x94>
     8c6:	64 27       	eor	r22, r20
     8c8:	6b bb       	out	0x1b, r22	; 27
     8ca:	0c c0       	rjmp	.+24     	; 0x8e4 <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     8cc:	65 b3       	in	r22, 0x15	; 21
     8ce:	ac 01       	movw	r20, r24
     8d0:	48 50       	subi	r20, 0x08	; 8
     8d2:	51 09       	sbc	r21, r1
     8d4:	89 01       	movw	r16, r18
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__vector_4+0xb0>
     8d8:	00 0f       	add	r16, r16
     8da:	11 1f       	adc	r17, r17
     8dc:	4a 95       	dec	r20
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__vector_4+0xac>
     8e0:	60 27       	eor	r22, r16
     8e2:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     8e4:	60 91 db 01 	lds	r22, 0x01DB
     8e8:	70 91 dc 01 	lds	r23, 0x01DC
     8ec:	a9 01       	movw	r20, r18
     8ee:	08 2e       	mov	r0, r24
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__vector_4+0xca>
     8f2:	44 0f       	add	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	0a 94       	dec	r0
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__vector_4+0xc6>
     8fa:	8a 01       	movw	r16, r20
     8fc:	06 23       	and	r16, r22
     8fe:	17 23       	and	r17, r23
     900:	01 2b       	or	r16, r17
     902:	19 f0       	breq	.+6      	; 0x90a <__vector_4+0xde>
						m[i] = dutyL[i];
     904:	08 81       	ld	r16, Y
     906:	19 81       	ldd	r17, Y+1	; 0x01
     908:	03 c0       	rjmp	.+6      	; 0x910 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     90a:	0d 91       	ld	r16, X+
     90c:	1c 91       	ld	r17, X
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	11 83       	std	Z+1, r17	; 0x01
     912:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     914:	46 27       	eor	r20, r22
     916:	57 27       	eor	r21, r23
     918:	50 93 dc 01 	sts	0x01DC, r21
     91c:	40 93 db 01 	sts	0x01DB, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	32 96       	adiw	r30, 0x02	; 2
     924:	22 96       	adiw	r28, 0x02	; 2
     926:	12 96       	adiw	r26, 0x02	; 2
     928:	80 31       	cpi	r24, 0x10	; 16
     92a:	91 05       	cpc	r25, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <__vector_4+0x104>
     92e:	b7 cf       	rjmp	.-146    	; 0x89e <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	0f 90       	pop	r0
     952:	0f be       	out	0x3f, r0	; 63
     954:	0f 90       	pop	r0
     956:	1f 90       	pop	r1
     958:	18 95       	reti

0000095a <__vector_11>:

ISR(USART_RXC_vect)
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	2f 93       	push	r18
     972:	3f 93       	push	r19
     974:	4f 93       	push	r20
     976:	5f 93       	push	r21
     978:	6f 93       	push	r22
     97a:	7f 93       	push	r23
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	af 93       	push	r26
     982:	bf 93       	push	r27
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	c4 56       	subi	r28, 0x64	; 100
     992:	d1 09       	sbc	r29, r1
     994:	de bf       	out	0x3e, r29	; 62
     996:	cd bf       	out	0x3d, r28	; 61
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	7c 01       	movw	r14, r24
     99e:	00 e0       	ldi	r16, 0x00	; 0
     9a0:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     9a2:	0e 94 a6 05 	call	0xb4c	; 0xb4c <receiveUSART>
     9a6:	f7 01       	movw	r30, r14
     9a8:	81 93       	st	Z+, r24
     9aa:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     9ac:	83 31       	cpi	r24, 0x13	; 19
     9ae:	41 f4       	brne	.+16     	; 0x9c0 <__vector_11+0x66>
			codeUSART[i] = '\0';
     9b0:	e1 e0       	ldi	r30, 0x01	; 1
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	ec 0f       	add	r30, r28
     9b6:	fd 1f       	adc	r31, r29
     9b8:	e0 0f       	add	r30, r16
     9ba:	f1 1f       	adc	r31, r17
     9bc:	10 82       	st	Z, r1
			break;
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     9c0:	8a 30       	cpi	r24, 0x0A	; 10
     9c2:	b1 f3       	breq	.-20     	; 0x9b0 <__vector_11+0x56>
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     9c8:	04 36       	cpi	r16, 0x64	; 100
     9ca:	11 05       	cpc	r17, r1
     9cc:	51 f7       	brne	.-44     	; 0x9a2 <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	88 23       	and	r24, r24
     9d2:	e1 f0       	breq	.+56     	; 0xa0c <__vector_11+0xb2>
		print("\nReceived:\n");
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
     9dc:	6e 01       	movw	r12, r28
     9de:	f5 e6       	ldi	r31, 0x65	; 101
     9e0:	cf 0e       	add	r12, r31
     9e2:	d1 1c       	adc	r13, r1
     9e4:	8e 01       	movw	r16, r28
     9e6:	0f 5f       	subi	r16, 0xFF	; 255
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     9ec:	f8 01       	movw	r30, r16
     9ee:	81 91       	ld	r24, Z+
     9f0:	8f 01       	movw	r16, r30
     9f2:	0e 94 a0 05 	call	0xb40	; 0xb40 <sendUSART>
			if (codeUSART[i] == '\0')
     9f6:	f7 01       	movw	r30, r14
     9f8:	80 81       	ld	r24, Z
     9fa:	88 23       	and	r24, r24
     9fc:	19 f0       	breq	.+6      	; 0xa04 <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     9fe:	0c 15       	cp	r16, r12
     a00:	1d 05       	cpc	r17, r13
     a02:	99 f7       	brne	.-26     	; 0x9ea <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     a04:	8a ea       	ldi	r24, 0xAA	; 170
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
	}

	runCmd(codeUSART);
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 64 00 	call	0xc8	; 0xc8 <runCmd>
}
     a14:	cc 59       	subi	r28, 0x9C	; 156
     a16:	df 4f       	sbci	r29, 0xFF	; 255
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <initUSART>:

void initUSART()
{
	UCSRA |= (1 << U2X);
     a54:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     a56:	10 bc       	out	0x20, r1	; 32
	UBRRL = 207;		// 9600Hz on 16MHz F_CPU
     a58:	8f ec       	ldi	r24, 0xCF	; 207
     a5a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     a5c:	88 e9       	ldi	r24, 0x98	; 152
     a5e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     a60:	86 e8       	ldi	r24, 0x86	; 134
     a62:	80 bd       	out	0x20, r24	; 32
     a64:	08 95       	ret

00000a66 <initTimer0>:
}

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     a66:	85 e0       	ldi	r24, 0x05	; 5
     a68:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     a6a:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     a6c:	89 b7       	in	r24, 0x39	; 57
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	89 bf       	out	0x39, r24	; 57
     a72:	08 95       	ret

00000a74 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     a74:	87 e0       	ldi	r24, 0x07	; 7
     a76:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     a78:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     a7a:	89 b7       	in	r24, 0x39	; 57
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	89 bf       	out	0x39, r24	; 57
     a80:	08 95       	ret

00000a82 <main>:

int main()
{
	uint8_t i;

	wdt_enable(WDTO_60MS);
     a82:	2a e0       	ldi	r18, 0x0A	; 10
     a84:	88 e1       	ldi	r24, 0x18	; 24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	a8 95       	wdr
     a8e:	81 bd       	out	0x21, r24	; 33
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	21 bd       	out	0x21, r18	; 33

	PORTA = 0x00;
     a94:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
     a96:	15 ba       	out	0x15, r1	; 21
     a98:	c0 e0       	ldi	r28, 0x00	; 0
     a9a:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     a9c:	8b b3       	in	r24, 0x1b	; 27
     a9e:	86 95       	lsr	r24
     aa0:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     aa2:	1b b3       	in	r17, 0x1b	; 27
     aa4:	ce 01       	movw	r24, r28
     aa6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     aaa:	20 e8       	ldi	r18, 0x80	; 128
     aac:	82 9f       	mul	r24, r18
     aae:	c0 01       	movw	r24, r0
     ab0:	11 24       	eor	r1, r1
     ab2:	81 2b       	or	r24, r17
     ab4:	8b bb       	out	0x1b, r24	; 27
     ab6:	21 96       	adiw	r28, 0x01	; 1
	wdt_enable(WDTO_60MS);

	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
     ab8:	c8 30       	cpi	r28, 0x08	; 8
     aba:	d1 05       	cpc	r29, r1
     abc:	79 f7       	brne	.-34     	; 0xa9c <main+0x1a>
     abe:	c8 e0       	ldi	r28, 0x08	; 8
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     ac2:	85 b3       	in	r24, 0x15	; 21
     ac4:	86 95       	lsr	r24
     ac6:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     ac8:	15 b3       	in	r17, 0x15	; 21
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     ad0:	20 e8       	ldi	r18, 0x80	; 128
     ad2:	82 9f       	mul	r24, r18
     ad4:	c0 01       	movw	r24, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	81 2b       	or	r24, r17
     ada:	85 bb       	out	0x15, r24	; 21
     adc:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     ade:	c0 31       	cpi	r28, 0x10	; 16
     ae0:	d1 05       	cpc	r29, r1
     ae2:	79 f7       	brne	.-34     	; 0xac2 <main+0x40>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	DDRA = 0xff;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     ae8:	84 bb       	out	0x14, r24	; 20

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	90 93 9a 01 	sts	0x019A, r25
     af2:	80 93 99 01 	sts	0x0199, r24
     af6:	80 91 99 01 	lds	r24, 0x0199
     afa:	90 91 9a 01 	lds	r25, 0x019A
     afe:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <readEEPROM>
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	31 f0       	breq	.+12     	; 0xb12 <main+0x90>
     b06:	80 91 99 01 	lds	r24, 0x0199
     b0a:	90 91 9a 01 	lds	r25, 0x019A
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	ee cf       	rjmp	.-36     	; 0xaee <main+0x6c>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     b12:	25 b3       	in	r18, 0x15	; 21
     b14:	8b b3       	in	r24, 0x1b	; 27
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	92 2b       	or	r25, r18
     b1a:	90 93 dc 01 	sts	0x01DC, r25
     b1e:	80 93 db 01 	sts	0x01DB, r24

	initUSART();
     b22:	0e 94 2a 05 	call	0xa54	; 0xa54 <initUSART>

	setDuty();
     b26:	0e 94 f7 02 	call	0x5ee	; 0x5ee <setDuty>

	initTimer0();
     b2a:	0e 94 33 05 	call	0xa66	; 0xa66 <initTimer0>

	initTimer2();
     b2e:	0e 94 3a 05 	call	0xa74	; 0xa74 <initTimer2>

	sei();
     b32:	78 94       	sei

	print("\nEntering the main loop\n");
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 ac 05 	call	0xb58	; 0xb58 <print>
	while (1) {
		wdt_reset();
     b3c:	a8 95       	wdr
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <main+0xba>

00000b40 <sendUSART>:

#include "usart.h"

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE)))
     b40:	5d 99       	sbic	0x0b, 5	; 11
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <sendUSART+0x8>
		wdt_reset();
     b44:	a8 95       	wdr
     b46:	fc cf       	rjmp	.-8      	; 0xb40 <sendUSART>
	UDR = data;
     b48:	8c b9       	out	0x0c, r24	; 12
     b4a:	08 95       	ret

00000b4c <receiveUSART>:
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC)))
     b4c:	5f 99       	sbic	0x0b, 7	; 11
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <receiveUSART+0x8>
		wdt_reset();
     b50:	a8 95       	wdr
     b52:	fc cf       	rjmp	.-8      	; 0xb4c <receiveUSART>
	return UDR;
     b54:	8c b1       	in	r24, 0x0c	; 12
}
     b56:	08 95       	ret

00000b58 <print>:

void print(char *s)
{
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
	while (*s) {
     b5e:	89 91       	ld	r24, Y+
     b60:	88 23       	and	r24, r24
     b62:	19 f0       	breq	.+6      	; 0xb6a <print+0x12>
		sendUSART(*s);
     b64:	0e 94 a0 05 	call	0xb40	; 0xb40 <sendUSART>
     b68:	fa cf       	rjmp	.-12     	; 0xb5e <print+0x6>
		s++;
	}
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <__tablejump2__>:
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31

00000b74 <__tablejump__>:
     b74:	05 90       	lpm	r0, Z+
     b76:	f4 91       	lpm	r31, Z
     b78:	e0 2d       	mov	r30, r0
     b7a:	09 94       	ijmp

00000b7c <puts>:
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	e0 91 ff 01 	lds	r30, 0x01FF
     b88:	f0 91 00 02 	lds	r31, 0x0200
     b8c:	23 81       	ldd	r18, Z+3	; 0x03
     b8e:	21 ff       	sbrs	r18, 1
     b90:	1b c0       	rjmp	.+54     	; 0xbc8 <puts+0x4c>
     b92:	ec 01       	movw	r28, r24
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	89 91       	ld	r24, Y+
     b9a:	60 91 ff 01 	lds	r22, 0x01FF
     b9e:	70 91 00 02 	lds	r23, 0x0200
     ba2:	db 01       	movw	r26, r22
     ba4:	18 96       	adiw	r26, 0x08	; 8
     ba6:	ed 91       	ld	r30, X+
     ba8:	fc 91       	ld	r31, X
     baa:	19 97       	sbiw	r26, 0x09	; 9
     bac:	88 23       	and	r24, r24
     bae:	31 f0       	breq	.+12     	; 0xbbc <puts+0x40>
     bb0:	09 95       	icall
     bb2:	89 2b       	or	r24, r25
     bb4:	89 f3       	breq	.-30     	; 0xb98 <puts+0x1c>
     bb6:	0f ef       	ldi	r16, 0xFF	; 255
     bb8:	1f ef       	ldi	r17, 0xFF	; 255
     bba:	ee cf       	rjmp	.-36     	; 0xb98 <puts+0x1c>
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	09 95       	icall
     bc0:	89 2b       	or	r24, r25
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <puts+0x4c>
     bc4:	c8 01       	movw	r24, r16
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <puts+0x50>
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	9f ef       	ldi	r25, 0xFF	; 255
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <sprintf>:
     bd6:	ae e0       	ldi	r26, 0x0E	; 14
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e1 ef       	ldi	r30, 0xF1	; 241
     bdc:	f5 e0       	ldi	r31, 0x05	; 5
     bde:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__prologue_saves__+0x1c>
     be2:	0d 89       	ldd	r16, Y+21	; 0x15
     be4:	1e 89       	ldd	r17, Y+22	; 0x16
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	8c 83       	std	Y+4, r24	; 0x04
     bea:	1a 83       	std	Y+2, r17	; 0x02
     bec:	09 83       	std	Y+1, r16	; 0x01
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	9f e7       	ldi	r25, 0x7F	; 127
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	ae 01       	movw	r20, r28
     bf8:	47 5e       	subi	r20, 0xE7	; 231
     bfa:	5f 4f       	sbci	r21, 0xFF	; 255
     bfc:	6f 89       	ldd	r22, Y+23	; 0x17
     bfe:	78 8d       	ldd	r23, Y+24	; 0x18
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	0e 94 26 06 	call	0xc4c	; 0xc4c <vfprintf>
     c08:	ef 81       	ldd	r30, Y+7	; 0x07
     c0a:	f8 85       	ldd	r31, Y+8	; 0x08
     c0c:	e0 0f       	add	r30, r16
     c0e:	f1 1f       	adc	r31, r17
     c10:	10 82       	st	Z, r1
     c12:	2e 96       	adiw	r28, 0x0e	; 14
     c14:	e4 e0       	ldi	r30, 0x04	; 4
     c16:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__epilogue_restores__+0x1c>

00000c1a <sscanf>:
     c1a:	ae e0       	ldi	r26, 0x0E	; 14
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e1       	ldi	r30, 0x13	; 19
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__prologue_saves__+0x20>
     c26:	85 e0       	ldi	r24, 0x05	; 5
     c28:	8c 83       	std	Y+4, r24	; 0x04
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	ae 01       	movw	r20, r28
     c34:	49 5e       	subi	r20, 0xE9	; 233
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	6d 89       	ldd	r22, Y+21	; 0x15
     c3a:	7e 89       	ldd	r23, Y+22	; 0x16
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	0e 94 76 09 	call	0x12ec	; 0x12ec <vfscanf>
     c44:	2e 96       	adiw	r28, 0x0e	; 14
     c46:	e2 e0       	ldi	r30, 0x02	; 2
     c48:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__epilogue_restores__+0x20>

00000c4c <vfprintf>:
     c4c:	ac e0       	ldi	r26, 0x0C	; 12
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ec e2       	ldi	r30, 0x2C	; 44
     c52:	f6 e0       	ldi	r31, 0x06	; 6
     c54:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__prologue_saves__>
     c58:	7c 01       	movw	r14, r24
     c5a:	6b 01       	movw	r12, r22
     c5c:	8a 01       	movw	r16, r20
     c5e:	fc 01       	movw	r30, r24
     c60:	17 82       	std	Z+7, r1	; 0x07
     c62:	16 82       	std	Z+6, r1	; 0x06
     c64:	83 81       	ldd	r24, Z+3	; 0x03
     c66:	81 ff       	sbrs	r24, 1
     c68:	bd c1       	rjmp	.+890    	; 0xfe4 <vfprintf+0x398>
     c6a:	ce 01       	movw	r24, r28
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	4c 01       	movw	r8, r24
     c70:	f7 01       	movw	r30, r14
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	f6 01       	movw	r30, r12
     c76:	93 fd       	sbrc	r25, 3
     c78:	85 91       	lpm	r24, Z+
     c7a:	93 ff       	sbrs	r25, 3
     c7c:	81 91       	ld	r24, Z+
     c7e:	6f 01       	movw	r12, r30
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <vfprintf+0x3a>
     c84:	ab c1       	rjmp	.+854    	; 0xfdc <vfprintf+0x390>
     c86:	85 32       	cpi	r24, 0x25	; 37
     c88:	39 f4       	brne	.+14     	; 0xc98 <vfprintf+0x4c>
     c8a:	93 fd       	sbrc	r25, 3
     c8c:	85 91       	lpm	r24, Z+
     c8e:	93 ff       	sbrs	r25, 3
     c90:	81 91       	ld	r24, Z+
     c92:	6f 01       	movw	r12, r30
     c94:	85 32       	cpi	r24, 0x25	; 37
     c96:	29 f4       	brne	.+10     	; 0xca2 <vfprintf+0x56>
     c98:	b7 01       	movw	r22, r14
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     ca0:	e7 cf       	rjmp	.-50     	; 0xc70 <vfprintf+0x24>
     ca2:	51 2c       	mov	r5, r1
     ca4:	31 2c       	mov	r3, r1
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	20 32       	cpi	r18, 0x20	; 32
     caa:	a0 f4       	brcc	.+40     	; 0xcd4 <vfprintf+0x88>
     cac:	8b 32       	cpi	r24, 0x2B	; 43
     cae:	69 f0       	breq	.+26     	; 0xcca <vfprintf+0x7e>
     cb0:	30 f4       	brcc	.+12     	; 0xcbe <vfprintf+0x72>
     cb2:	80 32       	cpi	r24, 0x20	; 32
     cb4:	59 f0       	breq	.+22     	; 0xccc <vfprintf+0x80>
     cb6:	83 32       	cpi	r24, 0x23	; 35
     cb8:	69 f4       	brne	.+26     	; 0xcd4 <vfprintf+0x88>
     cba:	20 61       	ori	r18, 0x10	; 16
     cbc:	2c c0       	rjmp	.+88     	; 0xd16 <vfprintf+0xca>
     cbe:	8d 32       	cpi	r24, 0x2D	; 45
     cc0:	39 f0       	breq	.+14     	; 0xcd0 <vfprintf+0x84>
     cc2:	80 33       	cpi	r24, 0x30	; 48
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <vfprintf+0x88>
     cc6:	21 60       	ori	r18, 0x01	; 1
     cc8:	26 c0       	rjmp	.+76     	; 0xd16 <vfprintf+0xca>
     cca:	22 60       	ori	r18, 0x02	; 2
     ccc:	24 60       	ori	r18, 0x04	; 4
     cce:	23 c0       	rjmp	.+70     	; 0xd16 <vfprintf+0xca>
     cd0:	28 60       	ori	r18, 0x08	; 8
     cd2:	21 c0       	rjmp	.+66     	; 0xd16 <vfprintf+0xca>
     cd4:	27 fd       	sbrc	r18, 7
     cd6:	27 c0       	rjmp	.+78     	; 0xd26 <vfprintf+0xda>
     cd8:	30 ed       	ldi	r19, 0xD0	; 208
     cda:	38 0f       	add	r19, r24
     cdc:	3a 30       	cpi	r19, 0x0A	; 10
     cde:	78 f4       	brcc	.+30     	; 0xcfe <vfprintf+0xb2>
     ce0:	26 ff       	sbrs	r18, 6
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0xa4>
     ce4:	fa e0       	ldi	r31, 0x0A	; 10
     ce6:	5f 9e       	mul	r5, r31
     ce8:	30 0d       	add	r19, r0
     cea:	11 24       	eor	r1, r1
     cec:	53 2e       	mov	r5, r19
     cee:	13 c0       	rjmp	.+38     	; 0xd16 <vfprintf+0xca>
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	38 9e       	mul	r3, r24
     cf4:	30 0d       	add	r19, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	33 2e       	mov	r3, r19
     cfa:	20 62       	ori	r18, 0x20	; 32
     cfc:	0c c0       	rjmp	.+24     	; 0xd16 <vfprintf+0xca>
     cfe:	8e 32       	cpi	r24, 0x2E	; 46
     d00:	21 f4       	brne	.+8      	; 0xd0a <vfprintf+0xbe>
     d02:	26 fd       	sbrc	r18, 6
     d04:	6b c1       	rjmp	.+726    	; 0xfdc <vfprintf+0x390>
     d06:	20 64       	ori	r18, 0x40	; 64
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <vfprintf+0xca>
     d0a:	8c 36       	cpi	r24, 0x6C	; 108
     d0c:	11 f4       	brne	.+4      	; 0xd12 <vfprintf+0xc6>
     d0e:	20 68       	ori	r18, 0x80	; 128
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <vfprintf+0xca>
     d12:	88 36       	cpi	r24, 0x68	; 104
     d14:	41 f4       	brne	.+16     	; 0xd26 <vfprintf+0xda>
     d16:	f6 01       	movw	r30, r12
     d18:	93 fd       	sbrc	r25, 3
     d1a:	85 91       	lpm	r24, Z+
     d1c:	93 ff       	sbrs	r25, 3
     d1e:	81 91       	ld	r24, Z+
     d20:	6f 01       	movw	r12, r30
     d22:	81 11       	cpse	r24, r1
     d24:	c1 cf       	rjmp	.-126    	; 0xca8 <vfprintf+0x5c>
     d26:	98 2f       	mov	r25, r24
     d28:	9f 7d       	andi	r25, 0xDF	; 223
     d2a:	95 54       	subi	r25, 0x45	; 69
     d2c:	93 30       	cpi	r25, 0x03	; 3
     d2e:	28 f4       	brcc	.+10     	; 0xd3a <vfprintf+0xee>
     d30:	0c 5f       	subi	r16, 0xFC	; 252
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	ff e3       	ldi	r31, 0x3F	; 63
     d36:	f9 83       	std	Y+1, r31	; 0x01
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <vfprintf+0x108>
     d3a:	83 36       	cpi	r24, 0x63	; 99
     d3c:	31 f0       	breq	.+12     	; 0xd4a <vfprintf+0xfe>
     d3e:	83 37       	cpi	r24, 0x73	; 115
     d40:	71 f0       	breq	.+28     	; 0xd5e <vfprintf+0x112>
     d42:	83 35       	cpi	r24, 0x53	; 83
     d44:	09 f0       	breq	.+2      	; 0xd48 <vfprintf+0xfc>
     d46:	5b c0       	rjmp	.+182    	; 0xdfe <vfprintf+0x1b2>
     d48:	22 c0       	rjmp	.+68     	; 0xd8e <vfprintf+0x142>
     d4a:	f8 01       	movw	r30, r16
     d4c:	80 81       	ld	r24, Z
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	0e 5f       	subi	r16, 0xFE	; 254
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	44 24       	eor	r4, r4
     d56:	43 94       	inc	r4
     d58:	51 2c       	mov	r5, r1
     d5a:	54 01       	movw	r10, r8
     d5c:	15 c0       	rjmp	.+42     	; 0xd88 <vfprintf+0x13c>
     d5e:	38 01       	movw	r6, r16
     d60:	f2 e0       	ldi	r31, 0x02	; 2
     d62:	6f 0e       	add	r6, r31
     d64:	71 1c       	adc	r7, r1
     d66:	f8 01       	movw	r30, r16
     d68:	a0 80       	ld	r10, Z
     d6a:	b1 80       	ldd	r11, Z+1	; 0x01
     d6c:	26 ff       	sbrs	r18, 6
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <vfprintf+0x12a>
     d70:	65 2d       	mov	r22, r5
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <vfprintf+0x12e>
     d76:	6f ef       	ldi	r22, 0xFF	; 255
     d78:	7f ef       	ldi	r23, 0xFF	; 255
     d7a:	c5 01       	movw	r24, r10
     d7c:	2c 87       	std	Y+12, r18	; 0x0c
     d7e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <strnlen>
     d82:	2c 01       	movw	r4, r24
     d84:	83 01       	movw	r16, r6
     d86:	2c 85       	ldd	r18, Y+12	; 0x0c
     d88:	2f 77       	andi	r18, 0x7F	; 127
     d8a:	22 2e       	mov	r2, r18
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <vfprintf+0x170>
     d8e:	38 01       	movw	r6, r16
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	6f 0e       	add	r6, r31
     d94:	71 1c       	adc	r7, r1
     d96:	f8 01       	movw	r30, r16
     d98:	a0 80       	ld	r10, Z
     d9a:	b1 80       	ldd	r11, Z+1	; 0x01
     d9c:	26 ff       	sbrs	r18, 6
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <vfprintf+0x15a>
     da0:	65 2d       	mov	r22, r5
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x15e>
     da6:	6f ef       	ldi	r22, 0xFF	; 255
     da8:	7f ef       	ldi	r23, 0xFF	; 255
     daa:	c5 01       	movw	r24, r10
     dac:	2c 87       	std	Y+12, r18	; 0x0c
     dae:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strnlen_P>
     db2:	2c 01       	movw	r4, r24
     db4:	2c 85       	ldd	r18, Y+12	; 0x0c
     db6:	20 68       	ori	r18, 0x80	; 128
     db8:	22 2e       	mov	r2, r18
     dba:	83 01       	movw	r16, r6
     dbc:	23 fc       	sbrc	r2, 3
     dbe:	1b c0       	rjmp	.+54     	; 0xdf6 <vfprintf+0x1aa>
     dc0:	83 2d       	mov	r24, r3
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	48 16       	cp	r4, r24
     dc6:	59 06       	cpc	r5, r25
     dc8:	b0 f4       	brcc	.+44     	; 0xdf6 <vfprintf+0x1aa>
     dca:	b7 01       	movw	r22, r14
     dcc:	80 e2       	ldi	r24, 0x20	; 32
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     dd4:	3a 94       	dec	r3
     dd6:	f4 cf       	rjmp	.-24     	; 0xdc0 <vfprintf+0x174>
     dd8:	f5 01       	movw	r30, r10
     dda:	27 fc       	sbrc	r2, 7
     ddc:	85 91       	lpm	r24, Z+
     dde:	27 fe       	sbrs	r2, 7
     de0:	81 91       	ld	r24, Z+
     de2:	5f 01       	movw	r10, r30
     de4:	b7 01       	movw	r22, r14
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     dec:	31 10       	cpse	r3, r1
     dee:	3a 94       	dec	r3
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	4f 1a       	sub	r4, r31
     df4:	51 08       	sbc	r5, r1
     df6:	41 14       	cp	r4, r1
     df8:	51 04       	cpc	r5, r1
     dfa:	71 f7       	brne	.-36     	; 0xdd8 <vfprintf+0x18c>
     dfc:	e5 c0       	rjmp	.+458    	; 0xfc8 <vfprintf+0x37c>
     dfe:	84 36       	cpi	r24, 0x64	; 100
     e00:	11 f0       	breq	.+4      	; 0xe06 <vfprintf+0x1ba>
     e02:	89 36       	cpi	r24, 0x69	; 105
     e04:	39 f5       	brne	.+78     	; 0xe54 <vfprintf+0x208>
     e06:	f8 01       	movw	r30, r16
     e08:	27 ff       	sbrs	r18, 7
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <vfprintf+0x1ce>
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	0c 5f       	subi	r16, 0xFC	; 252
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	08 c0       	rjmp	.+16     	; 0xe2a <vfprintf+0x1de>
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	88 27       	eor	r24, r24
     e20:	77 fd       	sbrc	r23, 7
     e22:	80 95       	com	r24
     e24:	98 2f       	mov	r25, r24
     e26:	0e 5f       	subi	r16, 0xFE	; 254
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	2f 76       	andi	r18, 0x6F	; 111
     e2c:	b2 2e       	mov	r11, r18
     e2e:	97 ff       	sbrs	r25, 7
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vfprintf+0x1f8>
     e32:	90 95       	com	r25
     e34:	80 95       	com	r24
     e36:	70 95       	com	r23
     e38:	61 95       	neg	r22
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	20 68       	ori	r18, 0x80	; 128
     e42:	b2 2e       	mov	r11, r18
     e44:	2a e0       	ldi	r18, 0x0A	; 10
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a4 01       	movw	r20, r8
     e4a:	0e 94 5f 0b 	call	0x16be	; 0x16be <__ultoa_invert>
     e4e:	a8 2e       	mov	r10, r24
     e50:	a8 18       	sub	r10, r8
     e52:	44 c0       	rjmp	.+136    	; 0xedc <vfprintf+0x290>
     e54:	85 37       	cpi	r24, 0x75	; 117
     e56:	29 f4       	brne	.+10     	; 0xe62 <vfprintf+0x216>
     e58:	2f 7e       	andi	r18, 0xEF	; 239
     e5a:	b2 2e       	mov	r11, r18
     e5c:	2a e0       	ldi	r18, 0x0A	; 10
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	25 c0       	rjmp	.+74     	; 0xeac <vfprintf+0x260>
     e62:	f2 2f       	mov	r31, r18
     e64:	f9 7f       	andi	r31, 0xF9	; 249
     e66:	bf 2e       	mov	r11, r31
     e68:	8f 36       	cpi	r24, 0x6F	; 111
     e6a:	c1 f0       	breq	.+48     	; 0xe9c <vfprintf+0x250>
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <vfprintf+0x228>
     e6e:	88 35       	cpi	r24, 0x58	; 88
     e70:	79 f0       	breq	.+30     	; 0xe90 <vfprintf+0x244>
     e72:	b4 c0       	rjmp	.+360    	; 0xfdc <vfprintf+0x390>
     e74:	80 37       	cpi	r24, 0x70	; 112
     e76:	19 f0       	breq	.+6      	; 0xe7e <vfprintf+0x232>
     e78:	88 37       	cpi	r24, 0x78	; 120
     e7a:	21 f0       	breq	.+8      	; 0xe84 <vfprintf+0x238>
     e7c:	af c0       	rjmp	.+350    	; 0xfdc <vfprintf+0x390>
     e7e:	2f 2f       	mov	r18, r31
     e80:	20 61       	ori	r18, 0x10	; 16
     e82:	b2 2e       	mov	r11, r18
     e84:	b4 fe       	sbrs	r11, 4
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <vfprintf+0x256>
     e88:	8b 2d       	mov	r24, r11
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	b8 2e       	mov	r11, r24
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x256>
     e90:	24 ff       	sbrs	r18, 4
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <vfprintf+0x25c>
     e94:	9f 2f       	mov	r25, r31
     e96:	96 60       	ori	r25, 0x06	; 6
     e98:	b9 2e       	mov	r11, r25
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <vfprintf+0x25c>
     e9c:	28 e0       	ldi	r18, 0x08	; 8
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <vfprintf+0x260>
     ea2:	20 e1       	ldi	r18, 0x10	; 16
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x260>
     ea8:	20 e1       	ldi	r18, 0x10	; 16
     eaa:	32 e0       	ldi	r19, 0x02	; 2
     eac:	f8 01       	movw	r30, r16
     eae:	b7 fe       	sbrs	r11, 7
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <vfprintf+0x274>
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	0c 5f       	subi	r16, 0xFC	; 252
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <vfprintf+0x280>
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 5f       	subi	r16, 0xFE	; 254
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	a4 01       	movw	r20, r8
     ece:	0e 94 5f 0b 	call	0x16be	; 0x16be <__ultoa_invert>
     ed2:	a8 2e       	mov	r10, r24
     ed4:	a8 18       	sub	r10, r8
     ed6:	fb 2d       	mov	r31, r11
     ed8:	ff 77       	andi	r31, 0x7F	; 127
     eda:	bf 2e       	mov	r11, r31
     edc:	b6 fe       	sbrs	r11, 6
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <vfprintf+0x2aa>
     ee0:	2b 2d       	mov	r18, r11
     ee2:	2e 7f       	andi	r18, 0xFE	; 254
     ee4:	a5 14       	cp	r10, r5
     ee6:	50 f4       	brcc	.+20     	; 0xefc <vfprintf+0x2b0>
     ee8:	b4 fe       	sbrs	r11, 4
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <vfprintf+0x2b4>
     eec:	b2 fc       	sbrc	r11, 2
     eee:	08 c0       	rjmp	.+16     	; 0xf00 <vfprintf+0x2b4>
     ef0:	2b 2d       	mov	r18, r11
     ef2:	2e 7e       	andi	r18, 0xEE	; 238
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <vfprintf+0x2b4>
     ef6:	7a 2c       	mov	r7, r10
     ef8:	2b 2d       	mov	r18, r11
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <vfprintf+0x2b6>
     efc:	7a 2c       	mov	r7, r10
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <vfprintf+0x2b6>
     f00:	75 2c       	mov	r7, r5
     f02:	24 ff       	sbrs	r18, 4
     f04:	0d c0       	rjmp	.+26     	; 0xf20 <vfprintf+0x2d4>
     f06:	fe 01       	movw	r30, r28
     f08:	ea 0d       	add	r30, r10
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	11 f4       	brne	.+4      	; 0xf16 <vfprintf+0x2ca>
     f12:	29 7e       	andi	r18, 0xE9	; 233
     f14:	09 c0       	rjmp	.+18     	; 0xf28 <vfprintf+0x2dc>
     f16:	22 ff       	sbrs	r18, 2
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <vfprintf+0x2da>
     f1a:	73 94       	inc	r7
     f1c:	73 94       	inc	r7
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <vfprintf+0x2dc>
     f20:	82 2f       	mov	r24, r18
     f22:	86 78       	andi	r24, 0x86	; 134
     f24:	09 f0       	breq	.+2      	; 0xf28 <vfprintf+0x2dc>
     f26:	73 94       	inc	r7
     f28:	23 fd       	sbrc	r18, 3
     f2a:	13 c0       	rjmp	.+38     	; 0xf52 <vfprintf+0x306>
     f2c:	20 ff       	sbrs	r18, 0
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x2f0>
     f30:	5a 2c       	mov	r5, r10
     f32:	73 14       	cp	r7, r3
     f34:	18 f4       	brcc	.+6      	; 0xf3c <vfprintf+0x2f0>
     f36:	53 0c       	add	r5, r3
     f38:	57 18       	sub	r5, r7
     f3a:	73 2c       	mov	r7, r3
     f3c:	73 14       	cp	r7, r3
     f3e:	68 f4       	brcc	.+26     	; 0xf5a <vfprintf+0x30e>
     f40:	b7 01       	movw	r22, r14
     f42:	80 e2       	ldi	r24, 0x20	; 32
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2c 87       	std	Y+12, r18	; 0x0c
     f48:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     f4c:	73 94       	inc	r7
     f4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f50:	f5 cf       	rjmp	.-22     	; 0xf3c <vfprintf+0x2f0>
     f52:	73 14       	cp	r7, r3
     f54:	10 f4       	brcc	.+4      	; 0xf5a <vfprintf+0x30e>
     f56:	37 18       	sub	r3, r7
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <vfprintf+0x310>
     f5a:	31 2c       	mov	r3, r1
     f5c:	24 ff       	sbrs	r18, 4
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <vfprintf+0x338>
     f60:	b7 01       	movw	r22, r14
     f62:	80 e3       	ldi	r24, 0x30	; 48
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	2c 87       	std	Y+12, r18	; 0x0c
     f68:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     f6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f6e:	22 ff       	sbrs	r18, 2
     f70:	17 c0       	rjmp	.+46     	; 0xfa0 <vfprintf+0x354>
     f72:	21 ff       	sbrs	r18, 1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <vfprintf+0x330>
     f76:	88 e5       	ldi	r24, 0x58	; 88
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <vfprintf+0x334>
     f7c:	88 e7       	ldi	r24, 0x78	; 120
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	b7 01       	movw	r22, r14
     f82:	0c c0       	rjmp	.+24     	; 0xf9c <vfprintf+0x350>
     f84:	82 2f       	mov	r24, r18
     f86:	86 78       	andi	r24, 0x86	; 134
     f88:	59 f0       	breq	.+22     	; 0xfa0 <vfprintf+0x354>
     f8a:	21 fd       	sbrc	r18, 1
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <vfprintf+0x346>
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <vfprintf+0x348>
     f92:	8b e2       	ldi	r24, 0x2B	; 43
     f94:	27 fd       	sbrc	r18, 7
     f96:	8d e2       	ldi	r24, 0x2D	; 45
     f98:	b7 01       	movw	r22, r14
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     fa0:	a5 14       	cp	r10, r5
     fa2:	38 f4       	brcc	.+14     	; 0xfb2 <vfprintf+0x366>
     fa4:	b7 01       	movw	r22, r14
     fa6:	80 e3       	ldi	r24, 0x30	; 48
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     fae:	5a 94       	dec	r5
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <vfprintf+0x354>
     fb2:	aa 94       	dec	r10
     fb4:	f4 01       	movw	r30, r8
     fb6:	ea 0d       	add	r30, r10
     fb8:	f1 1d       	adc	r31, r1
     fba:	80 81       	ld	r24, Z
     fbc:	b7 01       	movw	r22, r14
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     fc4:	a1 10       	cpse	r10, r1
     fc6:	f5 cf       	rjmp	.-22     	; 0xfb2 <vfprintf+0x366>
     fc8:	33 20       	and	r3, r3
     fca:	09 f4       	brne	.+2      	; 0xfce <vfprintf+0x382>
     fcc:	51 ce       	rjmp	.-862    	; 0xc70 <vfprintf+0x24>
     fce:	b7 01       	movw	r22, r14
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
     fd8:	3a 94       	dec	r3
     fda:	f6 cf       	rjmp	.-20     	; 0xfc8 <vfprintf+0x37c>
     fdc:	f7 01       	movw	r30, r14
     fde:	86 81       	ldd	r24, Z+6	; 0x06
     fe0:	97 81       	ldd	r25, Z+7	; 0x07
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <vfprintf+0x39c>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	2c 96       	adiw	r28, 0x0c	; 12
     fea:	e2 e1       	ldi	r30, 0x12	; 18
     fec:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__epilogue_restores__>

00000ff0 <putval>:
     ff0:	20 fd       	sbrc	r18, 0
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <putval+0x16>
     ff4:	fc 01       	movw	r30, r24
     ff6:	23 fd       	sbrc	r18, 3
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <putval+0x14>
     ffa:	22 ff       	sbrs	r18, 2
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <putval+0x12>
     ffe:	73 83       	std	Z+3, r23	; 0x03
    1000:	62 83       	std	Z+2, r22	; 0x02
    1002:	51 83       	std	Z+1, r21	; 0x01
    1004:	40 83       	st	Z, r20
    1006:	08 95       	ret

00001008 <mulacc>:
    1008:	44 fd       	sbrc	r20, 4
    100a:	10 c0       	rjmp	.+32     	; 0x102c <mulacc+0x24>
    100c:	46 fd       	sbrc	r20, 6
    100e:	10 c0       	rjmp	.+32     	; 0x1030 <mulacc+0x28>
    1010:	db 01       	movw	r26, r22
    1012:	fc 01       	movw	r30, r24
    1014:	aa 0f       	add	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	ee 1f       	adc	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	10 94       	com	r1
    101e:	d1 f7       	brne	.-12     	; 0x1014 <mulacc+0xc>
    1020:	6a 0f       	add	r22, r26
    1022:	7b 1f       	adc	r23, r27
    1024:	8e 1f       	adc	r24, r30
    1026:	9f 1f       	adc	r25, r31
    1028:	31 e0       	ldi	r19, 0x01	; 1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <mulacc+0x2a>
    102c:	33 e0       	ldi	r19, 0x03	; 3
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <mulacc+0x2a>
    1030:	34 e0       	ldi	r19, 0x04	; 4
    1032:	66 0f       	add	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	31 50       	subi	r19, 0x01	; 1
    103c:	d1 f7       	brne	.-12     	; 0x1032 <mulacc+0x2a>
    103e:	62 0f       	add	r22, r18
    1040:	71 1d       	adc	r23, r1
    1042:	81 1d       	adc	r24, r1
    1044:	91 1d       	adc	r25, r1
    1046:	08 95       	ret

00001048 <skip_spaces>:
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	8c 01       	movw	r16, r24
    1052:	c8 01       	movw	r24, r16
    1054:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    1058:	ec 01       	movw	r28, r24
    105a:	97 fd       	sbrc	r25, 7
    105c:	08 c0       	rjmp	.+16     	; 0x106e <skip_spaces+0x26>
    105e:	0e 94 ad 0a 	call	0x155a	; 0x155a <isspace>
    1062:	89 2b       	or	r24, r25
    1064:	b1 f7       	brne	.-20     	; 0x1052 <skip_spaces+0xa>
    1066:	b8 01       	movw	r22, r16
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 46 0b 	call	0x168c	; 0x168c <ungetc>
    106e:	ce 01       	movw	r24, r28
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	08 95       	ret

0000107a <conv_int>:
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
    1092:	a6 2e       	mov	r10, r22
    1094:	4a 01       	movw	r8, r20
    1096:	02 2f       	mov	r16, r18
    1098:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    109c:	ac 01       	movw	r20, r24
    109e:	55 27       	eor	r21, r21
    10a0:	4b 32       	cpi	r20, 0x2B	; 43
    10a2:	51 05       	cpc	r21, r1
    10a4:	21 f0       	breq	.+8      	; 0x10ae <conv_int+0x34>
    10a6:	4d 32       	cpi	r20, 0x2D	; 45
    10a8:	51 05       	cpc	r21, r1
    10aa:	51 f4       	brne	.+20     	; 0x10c0 <conv_int+0x46>
    10ac:	00 68       	ori	r16, 0x80	; 128
    10ae:	aa 94       	dec	r10
    10b0:	11 f4       	brne	.+4      	; 0x10b6 <conv_int+0x3c>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	67 c0       	rjmp	.+206    	; 0x1184 <conv_int+0x10a>
    10b6:	ce 01       	movw	r24, r28
    10b8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    10bc:	97 fd       	sbrc	r25, 7
    10be:	f9 cf       	rjmp	.-14     	; 0x10b2 <conv_int+0x38>
    10c0:	10 2f       	mov	r17, r16
    10c2:	1d 7f       	andi	r17, 0xFD	; 253
    10c4:	30 2f       	mov	r19, r16
    10c6:	30 73       	andi	r19, 0x30	; 48
    10c8:	01 f5       	brne	.+64     	; 0x110a <conv_int+0x90>
    10ca:	80 33       	cpi	r24, 0x30	; 48
    10cc:	f1 f4       	brne	.+60     	; 0x110a <conv_int+0x90>
    10ce:	ff 24       	eor	r15, r15
    10d0:	fa 94       	dec	r15
    10d2:	fa 0c       	add	r15, r10
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <conv_int+0x5e>
    10d6:	42 c0       	rjmp	.+132    	; 0x115c <conv_int+0xe2>
    10d8:	ce 01       	movw	r24, r28
    10da:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    10de:	97 fd       	sbrc	r25, 7
    10e0:	3d c0       	rjmp	.+122    	; 0x115c <conv_int+0xe2>
    10e2:	38 2f       	mov	r19, r24
    10e4:	3f 7d       	andi	r19, 0xDF	; 223
    10e6:	38 35       	cpi	r19, 0x58	; 88
    10e8:	51 f4       	brne	.+20     	; 0x10fe <conv_int+0x84>
    10ea:	12 64       	ori	r17, 0x42	; 66
    10ec:	aa 94       	dec	r10
    10ee:	aa 94       	dec	r10
    10f0:	a9 f1       	breq	.+106    	; 0x115c <conv_int+0xe2>
    10f2:	ce 01       	movw	r24, r28
    10f4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    10f8:	97 ff       	sbrs	r25, 7
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <conv_int+0x90>
    10fc:	2f c0       	rjmp	.+94     	; 0x115c <conv_int+0xe2>
    10fe:	06 ff       	sbrs	r16, 6
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <conv_int+0x8c>
    1102:	12 60       	ori	r17, 0x02	; 2
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <conv_int+0x8e>
    1106:	12 61       	ori	r17, 0x12	; 18
    1108:	af 2c       	mov	r10, r15
    110a:	c1 2c       	mov	r12, r1
    110c:	d1 2c       	mov	r13, r1
    110e:	76 01       	movw	r14, r12
    1110:	20 ed       	ldi	r18, 0xD0	; 208
    1112:	28 0f       	add	r18, r24
    1114:	28 30       	cpi	r18, 0x08	; 8
    1116:	80 f0       	brcs	.+32     	; 0x1138 <conv_int+0xbe>
    1118:	14 ff       	sbrs	r17, 4
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <conv_int+0xaa>
    111c:	be 01       	movw	r22, r28
    111e:	0e 94 46 0b 	call	0x168c	; 0x168c <ungetc>
    1122:	19 c0       	rjmp	.+50     	; 0x1156 <conv_int+0xdc>
    1124:	2a 30       	cpi	r18, 0x0A	; 10
    1126:	40 f0       	brcs	.+16     	; 0x1138 <conv_int+0xbe>
    1128:	16 ff       	sbrs	r17, 6
    112a:	f8 cf       	rjmp	.-16     	; 0x111c <conv_int+0xa2>
    112c:	2f 7d       	andi	r18, 0xDF	; 223
    112e:	3f ee       	ldi	r19, 0xEF	; 239
    1130:	32 0f       	add	r19, r18
    1132:	36 30       	cpi	r19, 0x06	; 6
    1134:	98 f7       	brcc	.-26     	; 0x111c <conv_int+0xa2>
    1136:	27 50       	subi	r18, 0x07	; 7
    1138:	41 2f       	mov	r20, r17
    113a:	c7 01       	movw	r24, r14
    113c:	b6 01       	movw	r22, r12
    113e:	0e 94 04 08 	call	0x1008	; 0x1008 <mulacc>
    1142:	6b 01       	movw	r12, r22
    1144:	7c 01       	movw	r14, r24
    1146:	12 60       	ori	r17, 0x02	; 2
    1148:	aa 94       	dec	r10
    114a:	59 f0       	breq	.+22     	; 0x1162 <conv_int+0xe8>
    114c:	ce 01       	movw	r24, r28
    114e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    1152:	97 ff       	sbrs	r25, 7
    1154:	dd cf       	rjmp	.-70     	; 0x1110 <conv_int+0x96>
    1156:	11 fd       	sbrc	r17, 1
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <conv_int+0xe8>
    115a:	ab cf       	rjmp	.-170    	; 0x10b2 <conv_int+0x38>
    115c:	c1 2c       	mov	r12, r1
    115e:	d1 2c       	mov	r13, r1
    1160:	76 01       	movw	r14, r12
    1162:	17 ff       	sbrs	r17, 7
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <conv_int+0xfc>
    1166:	f0 94       	com	r15
    1168:	e0 94       	com	r14
    116a:	d0 94       	com	r13
    116c:	c0 94       	com	r12
    116e:	c1 1c       	adc	r12, r1
    1170:	d1 1c       	adc	r13, r1
    1172:	e1 1c       	adc	r14, r1
    1174:	f1 1c       	adc	r15, r1
    1176:	21 2f       	mov	r18, r17
    1178:	b7 01       	movw	r22, r14
    117a:	a6 01       	movw	r20, r12
    117c:	c4 01       	movw	r24, r8
    117e:	0e 94 f8 07 	call	0xff0	; 0xff0 <putval>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	08 95       	ret

0000119c <conv_brk>:
    119c:	a1 e2       	ldi	r26, 0x21	; 33
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 ed       	ldi	r30, 0xD4	; 212
    11a2:	f8 e0       	ldi	r31, 0x08	; 8
    11a4:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__prologue_saves__+0xa>
    11a8:	5c 01       	movw	r10, r24
    11aa:	7a 01       	movw	r14, r20
    11ac:	8e 01       	movw	r16, r28
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	68 01       	movw	r12, r16
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	d8 01       	movw	r26, r16
    11b8:	1d 92       	st	X+, r1
    11ba:	8a 95       	dec	r24
    11bc:	e9 f7       	brne	.-6      	; 0x11b8 <conv_brk+0x1c>
    11be:	f5 01       	movw	r30, r10
    11c0:	73 80       	ldd	r7, Z+3	; 0x03
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	81 2c       	mov	r8, r1
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	91 2c       	mov	r9, r1
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f9 01       	movw	r30, r18
    11d2:	73 fc       	sbrc	r7, 3
    11d4:	a5 91       	lpm	r26, Z+
    11d6:	73 fe       	sbrs	r7, 3
    11d8:	a1 91       	ld	r26, Z+
    11da:	8f 01       	movw	r16, r30
    11dc:	7a 2f       	mov	r23, r26
    11de:	9f 01       	movw	r18, r30
    11e0:	a1 11       	cpse	r26, r1
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <conv_brk+0x4e>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	7d c0       	rjmp	.+250    	; 0x12e4 <conv_brk+0x148>
    11ea:	ae 35       	cpi	r26, 0x5E	; 94
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <conv_brk+0x58>
    11ee:	41 15       	cp	r20, r1
    11f0:	51 05       	cpc	r21, r1
    11f2:	59 f1       	breq	.+86     	; 0x124a <conv_brk+0xae>
    11f4:	e9 2d       	mov	r30, r9
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	e4 17       	cp	r30, r20
    11fa:	f5 07       	cpc	r31, r21
    11fc:	3c f4       	brge	.+14     	; 0x120c <conv_brk+0x70>
    11fe:	ad 35       	cpi	r26, 0x5D	; 93
    1200:	69 f1       	breq	.+90     	; 0x125c <conv_brk+0xc0>
    1202:	ad 32       	cpi	r26, 0x2D	; 45
    1204:	19 f4       	brne	.+6      	; 0x120c <conv_brk+0x70>
    1206:	bb 23       	and	r27, r27
    1208:	19 f1       	breq	.+70     	; 0x1250 <conv_brk+0xb4>
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <conv_brk+0x76>
    120c:	b1 11       	cpse	r27, r1
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <conv_brk+0x76>
    1210:	8a 2e       	mov	r8, r26
    1212:	e7 2f       	mov	r30, r23
    1214:	e6 95       	lsr	r30
    1216:	e6 95       	lsr	r30
    1218:	e6 95       	lsr	r30
    121a:	86 01       	movw	r16, r12
    121c:	0e 0f       	add	r16, r30
    121e:	11 1d       	adc	r17, r1
    1220:	f8 01       	movw	r30, r16
    1222:	a7 2f       	mov	r26, r23
    1224:	a7 70       	andi	r26, 0x07	; 7
    1226:	8c 01       	movw	r16, r24
    1228:	02 c0       	rjmp	.+4      	; 0x122e <conv_brk+0x92>
    122a:	00 0f       	add	r16, r16
    122c:	11 1f       	adc	r17, r17
    122e:	aa 95       	dec	r26
    1230:	e2 f7       	brpl	.-8      	; 0x122a <conv_brk+0x8e>
    1232:	d8 01       	movw	r26, r16
    1234:	b0 81       	ld	r27, Z
    1236:	ba 2b       	or	r27, r26
    1238:	b0 83       	st	Z, r27
    123a:	78 15       	cp	r23, r8
    123c:	59 f0       	breq	.+22     	; 0x1254 <conv_brk+0xb8>
    123e:	78 15       	cp	r23, r8
    1240:	10 f4       	brcc	.+4      	; 0x1246 <conv_brk+0xaa>
    1242:	7f 5f       	subi	r23, 0xFF	; 255
    1244:	e6 cf       	rjmp	.-52     	; 0x1212 <conv_brk+0x76>
    1246:	71 50       	subi	r23, 0x01	; 1
    1248:	e4 cf       	rjmp	.-56     	; 0x1212 <conv_brk+0x76>
    124a:	99 24       	eor	r9, r9
    124c:	93 94       	inc	r9
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <conv_brk+0xba>
    1250:	b1 e0       	ldi	r27, 0x01	; 1
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <conv_brk+0xba>
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	4f 5f       	subi	r20, 0xFF	; 255
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	ba cf       	rjmp	.-140    	; 0x11d0 <conv_brk+0x34>
    125c:	bb 23       	and	r27, r27
    125e:	19 f0       	breq	.+6      	; 0x1266 <conv_brk+0xca>
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	80 62       	ori	r24, 0x20	; 32
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	91 10       	cpse	r9, r1
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <conv_brk+0xd4>
    126a:	99 24       	eor	r9, r9
    126c:	93 94       	inc	r9
    126e:	15 c0       	rjmp	.+42     	; 0x129a <conv_brk+0xfe>
    1270:	f6 01       	movw	r30, r12
    1272:	ce 01       	movw	r24, r28
    1274:	81 96       	adiw	r24, 0x21	; 33
    1276:	20 81       	ld	r18, Z
    1278:	20 95       	com	r18
    127a:	21 93       	st	Z+, r18
    127c:	e8 17       	cp	r30, r24
    127e:	f9 07       	cpc	r31, r25
    1280:	d1 f7       	brne	.-12     	; 0x1276 <conv_brk+0xda>
    1282:	f3 cf       	rjmp	.-26     	; 0x126a <conv_brk+0xce>
    1284:	e1 14       	cp	r14, r1
    1286:	f1 04       	cpc	r15, r1
    1288:	29 f0       	breq	.+10     	; 0x1294 <conv_brk+0xf8>
    128a:	d7 01       	movw	r26, r14
    128c:	8c 93       	st	X, r24
    128e:	f7 01       	movw	r30, r14
    1290:	31 96       	adiw	r30, 0x01	; 1
    1292:	7f 01       	movw	r14, r30
    1294:	61 50       	subi	r22, 0x01	; 1
    1296:	01 f1       	breq	.+64     	; 0x12d8 <conv_brk+0x13c>
    1298:	91 2c       	mov	r9, r1
    129a:	c5 01       	movw	r24, r10
    129c:	69 a3       	std	Y+33, r22	; 0x21
    129e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    12a2:	69 a1       	ldd	r22, Y+33	; 0x21
    12a4:	97 fd       	sbrc	r25, 7
    12a6:	16 c0       	rjmp	.+44     	; 0x12d4 <conv_brk+0x138>
    12a8:	28 2f       	mov	r18, r24
    12aa:	26 95       	lsr	r18
    12ac:	26 95       	lsr	r18
    12ae:	26 95       	lsr	r18
    12b0:	f6 01       	movw	r30, r12
    12b2:	e2 0f       	add	r30, r18
    12b4:	f1 1d       	adc	r31, r1
    12b6:	20 81       	ld	r18, Z
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	ac 01       	movw	r20, r24
    12bc:	47 70       	andi	r20, 0x07	; 7
    12be:	55 27       	eor	r21, r21
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <conv_brk+0x12a>
    12c2:	35 95       	asr	r19
    12c4:	27 95       	ror	r18
    12c6:	4a 95       	dec	r20
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <conv_brk+0x126>
    12ca:	20 fd       	sbrc	r18, 0
    12cc:	db cf       	rjmp	.-74     	; 0x1284 <conv_brk+0xe8>
    12ce:	b5 01       	movw	r22, r10
    12d0:	0e 94 46 0b 	call	0x168c	; 0x168c <ungetc>
    12d4:	91 10       	cpse	r9, r1
    12d6:	86 cf       	rjmp	.-244    	; 0x11e4 <conv_brk+0x48>
    12d8:	e1 14       	cp	r14, r1
    12da:	f1 04       	cpc	r15, r1
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <conv_brk+0x146>
    12de:	d7 01       	movw	r26, r14
    12e0:	1c 92       	st	X, r1
    12e2:	c8 01       	movw	r24, r16
    12e4:	a1 96       	adiw	r28, 0x21	; 33
    12e6:	ed e0       	ldi	r30, 0x0D	; 13
    12e8:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__epilogue_restores__+0xa>

000012ec <vfscanf>:
    12ec:	4f 92       	push	r4
    12ee:	5f 92       	push	r5
    12f0:	7f 92       	push	r7
    12f2:	8f 92       	push	r8
    12f4:	9f 92       	push	r9
    12f6:	af 92       	push	r10
    12f8:	bf 92       	push	r11
    12fa:	cf 92       	push	r12
    12fc:	df 92       	push	r13
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	1f 92       	push	r1
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8c 01       	movw	r16, r24
    1312:	2b 01       	movw	r4, r22
    1314:	7a 01       	movw	r14, r20
    1316:	fc 01       	movw	r30, r24
    1318:	17 82       	std	Z+7, r1	; 0x07
    131a:	16 82       	std	Z+6, r1	; 0x06
    131c:	a1 2c       	mov	r10, r1
    131e:	f8 01       	movw	r30, r16
    1320:	d3 80       	ldd	r13, Z+3	; 0x03
    1322:	f2 01       	movw	r30, r4
    1324:	d3 fc       	sbrc	r13, 3
    1326:	85 91       	lpm	r24, Z+
    1328:	d3 fe       	sbrs	r13, 3
    132a:	81 91       	ld	r24, Z+
    132c:	38 2f       	mov	r19, r24
    132e:	2f 01       	movw	r4, r30
    1330:	88 23       	and	r24, r24
    1332:	09 f4       	brne	.+2      	; 0x1336 <vfscanf+0x4a>
    1334:	fc c0       	rjmp	.+504    	; 0x152e <vfscanf+0x242>
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	39 83       	std	Y+1, r19	; 0x01
    133a:	0e 94 ad 0a 	call	0x155a	; 0x155a <isspace>
    133e:	39 81       	ldd	r19, Y+1	; 0x01
    1340:	89 2b       	or	r24, r25
    1342:	21 f0       	breq	.+8      	; 0x134c <vfscanf+0x60>
    1344:	c8 01       	movw	r24, r16
    1346:	0e 94 24 08 	call	0x1048	; 0x1048 <skip_spaces>
    134a:	e9 cf       	rjmp	.-46     	; 0x131e <vfscanf+0x32>
    134c:	35 32       	cpi	r19, 0x25	; 37
    134e:	41 f4       	brne	.+16     	; 0x1360 <vfscanf+0x74>
    1350:	f2 01       	movw	r30, r4
    1352:	d3 fc       	sbrc	r13, 3
    1354:	35 91       	lpm	r19, Z+
    1356:	d3 fe       	sbrs	r13, 3
    1358:	31 91       	ld	r19, Z+
    135a:	2f 01       	movw	r4, r30
    135c:	35 32       	cpi	r19, 0x25	; 37
    135e:	69 f4       	brne	.+26     	; 0x137a <vfscanf+0x8e>
    1360:	c8 01       	movw	r24, r16
    1362:	39 83       	std	Y+1, r19	; 0x01
    1364:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    1368:	39 81       	ldd	r19, Y+1	; 0x01
    136a:	97 fd       	sbrc	r25, 7
    136c:	de c0       	rjmp	.+444    	; 0x152a <vfscanf+0x23e>
    136e:	38 17       	cp	r19, r24
    1370:	b1 f2       	breq	.-84     	; 0x131e <vfscanf+0x32>
    1372:	b8 01       	movw	r22, r16
    1374:	0e 94 46 0b 	call	0x168c	; 0x168c <ungetc>
    1378:	da c0       	rjmp	.+436    	; 0x152e <vfscanf+0x242>
    137a:	3a 32       	cpi	r19, 0x2A	; 42
    137c:	41 f4       	brne	.+16     	; 0x138e <vfscanf+0xa2>
    137e:	d3 fc       	sbrc	r13, 3
    1380:	35 91       	lpm	r19, Z+
    1382:	d3 fe       	sbrs	r13, 3
    1384:	31 91       	ld	r19, Z+
    1386:	2f 01       	movw	r4, r30
    1388:	bb 24       	eor	r11, r11
    138a:	b3 94       	inc	r11
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfscanf+0xa4>
    138e:	b1 2c       	mov	r11, r1
    1390:	71 2c       	mov	r7, r1
    1392:	20 ed       	ldi	r18, 0xD0	; 208
    1394:	23 0f       	add	r18, r19
    1396:	2a 30       	cpi	r18, 0x0A	; 10
    1398:	90 f4       	brcc	.+36     	; 0x13be <vfscanf+0xd2>
    139a:	fb 2d       	mov	r31, r11
    139c:	f2 60       	ori	r31, 0x02	; 2
    139e:	bf 2e       	mov	r11, r31
    13a0:	67 2d       	mov	r22, r7
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	0e 94 04 08 	call	0x1008	; 0x1008 <mulacc>
    13ae:	76 2e       	mov	r7, r22
    13b0:	f2 01       	movw	r30, r4
    13b2:	d3 fc       	sbrc	r13, 3
    13b4:	35 91       	lpm	r19, Z+
    13b6:	d3 fe       	sbrs	r13, 3
    13b8:	31 91       	ld	r19, Z+
    13ba:	2f 01       	movw	r4, r30
    13bc:	ea cf       	rjmp	.-44     	; 0x1392 <vfscanf+0xa6>
    13be:	b1 fe       	sbrs	r11, 1
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <vfscanf+0xdc>
    13c2:	71 10       	cpse	r7, r1
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <vfscanf+0xe0>
    13c6:	b3 c0       	rjmp	.+358    	; 0x152e <vfscanf+0x242>
    13c8:	77 24       	eor	r7, r7
    13ca:	7a 94       	dec	r7
    13cc:	38 36       	cpi	r19, 0x68	; 104
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <vfscanf+0xea>
    13d0:	3c 36       	cpi	r19, 0x6C	; 108
    13d2:	61 f0       	breq	.+24     	; 0x13ec <vfscanf+0x100>
    13d4:	14 c0       	rjmp	.+40     	; 0x13fe <vfscanf+0x112>
    13d6:	f2 01       	movw	r30, r4
    13d8:	d3 fc       	sbrc	r13, 3
    13da:	35 91       	lpm	r19, Z+
    13dc:	d3 fe       	sbrs	r13, 3
    13de:	31 91       	ld	r19, Z+
    13e0:	2f 01       	movw	r4, r30
    13e2:	38 36       	cpi	r19, 0x68	; 104
    13e4:	61 f4       	brne	.+24     	; 0x13fe <vfscanf+0x112>
    13e6:	fb 2d       	mov	r31, r11
    13e8:	f8 60       	ori	r31, 0x08	; 8
    13ea:	bf 2e       	mov	r11, r31
    13ec:	8b 2d       	mov	r24, r11
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	b8 2e       	mov	r11, r24
    13f2:	f2 01       	movw	r30, r4
    13f4:	d3 fc       	sbrc	r13, 3
    13f6:	35 91       	lpm	r19, Z+
    13f8:	d3 fe       	sbrs	r13, 3
    13fa:	31 91       	ld	r19, Z+
    13fc:	2f 01       	movw	r4, r30
    13fe:	33 23       	and	r19, r19
    1400:	09 f4       	brne	.+2      	; 0x1404 <vfscanf+0x118>
    1402:	95 c0       	rjmp	.+298    	; 0x152e <vfscanf+0x242>
    1404:	63 2f       	mov	r22, r19
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	8e e7       	ldi	r24, 0x7E	; 126
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	39 83       	std	Y+1, r19	; 0x01
    140e:	0e 94 b5 0a 	call	0x156a	; 0x156a <strchr_P>
    1412:	39 81       	ldd	r19, Y+1	; 0x01
    1414:	89 2b       	or	r24, r25
    1416:	09 f4       	brne	.+2      	; 0x141a <vfscanf+0x12e>
    1418:	8a c0       	rjmp	.+276    	; 0x152e <vfscanf+0x242>
    141a:	b0 fc       	sbrc	r11, 0
    141c:	07 c0       	rjmp	.+14     	; 0x142c <vfscanf+0x140>
    141e:	f7 01       	movw	r30, r14
    1420:	c0 80       	ld	r12, Z
    1422:	d1 80       	ldd	r13, Z+1	; 0x01
    1424:	c7 01       	movw	r24, r14
    1426:	02 96       	adiw	r24, 0x02	; 2
    1428:	7c 01       	movw	r14, r24
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <vfscanf+0x144>
    142c:	c1 2c       	mov	r12, r1
    142e:	d1 2c       	mov	r13, r1
    1430:	3e 36       	cpi	r19, 0x6E	; 110
    1432:	51 f4       	brne	.+20     	; 0x1448 <vfscanf+0x15c>
    1434:	f8 01       	movw	r30, r16
    1436:	46 81       	ldd	r20, Z+6	; 0x06
    1438:	57 81       	ldd	r21, Z+7	; 0x07
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	2b 2d       	mov	r18, r11
    1440:	c6 01       	movw	r24, r12
    1442:	0e 94 f8 07 	call	0xff0	; 0xff0 <putval>
    1446:	6b cf       	rjmp	.-298    	; 0x131e <vfscanf+0x32>
    1448:	33 36       	cpi	r19, 0x63	; 99
    144a:	a1 f4       	brne	.+40     	; 0x1474 <vfscanf+0x188>
    144c:	b1 fc       	sbrc	r11, 1
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfscanf+0x168>
    1450:	77 24       	eor	r7, r7
    1452:	73 94       	inc	r7
    1454:	c8 01       	movw	r24, r16
    1456:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    145a:	97 fd       	sbrc	r25, 7
    145c:	66 c0       	rjmp	.+204    	; 0x152a <vfscanf+0x23e>
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	29 f0       	breq	.+10     	; 0x146e <vfscanf+0x182>
    1464:	f6 01       	movw	r30, r12
    1466:	80 83       	st	Z, r24
    1468:	c6 01       	movw	r24, r12
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	6c 01       	movw	r12, r24
    146e:	7a 94       	dec	r7
    1470:	89 f7       	brne	.-30     	; 0x1454 <vfscanf+0x168>
    1472:	57 c0       	rjmp	.+174    	; 0x1522 <vfscanf+0x236>
    1474:	3b 35       	cpi	r19, 0x5B	; 91
    1476:	59 f4       	brne	.+22     	; 0x148e <vfscanf+0x1a2>
    1478:	92 01       	movw	r18, r4
    147a:	a6 01       	movw	r20, r12
    147c:	67 2d       	mov	r22, r7
    147e:	c8 01       	movw	r24, r16
    1480:	0e 94 ce 08 	call	0x119c	; 0x119c <conv_brk>
    1484:	2c 01       	movw	r4, r24
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	09 f0       	breq	.+2      	; 0x148c <vfscanf+0x1a0>
    148a:	4b c0       	rjmp	.+150    	; 0x1522 <vfscanf+0x236>
    148c:	45 c0       	rjmp	.+138    	; 0x1518 <vfscanf+0x22c>
    148e:	c8 01       	movw	r24, r16
    1490:	39 83       	std	Y+1, r19	; 0x01
    1492:	0e 94 24 08 	call	0x1048	; 0x1048 <skip_spaces>
    1496:	39 81       	ldd	r19, Y+1	; 0x01
    1498:	97 fd       	sbrc	r25, 7
    149a:	47 c0       	rjmp	.+142    	; 0x152a <vfscanf+0x23e>
    149c:	3f 36       	cpi	r19, 0x6F	; 111
    149e:	69 f1       	breq	.+90     	; 0x14fa <vfscanf+0x20e>
    14a0:	28 f4       	brcc	.+10     	; 0x14ac <vfscanf+0x1c0>
    14a2:	34 36       	cpi	r19, 0x64	; 100
    14a4:	31 f1       	breq	.+76     	; 0x14f2 <vfscanf+0x206>
    14a6:	39 36       	cpi	r19, 0x69	; 105
    14a8:	79 f1       	breq	.+94     	; 0x1508 <vfscanf+0x21c>
    14aa:	2b c0       	rjmp	.+86     	; 0x1502 <vfscanf+0x216>
    14ac:	33 37       	cpi	r19, 0x73	; 115
    14ae:	69 f0       	breq	.+26     	; 0x14ca <vfscanf+0x1de>
    14b0:	35 37       	cpi	r19, 0x75	; 117
    14b2:	f9 f0       	breq	.+62     	; 0x14f2 <vfscanf+0x206>
    14b4:	26 c0       	rjmp	.+76     	; 0x1502 <vfscanf+0x216>
    14b6:	c1 14       	cp	r12, r1
    14b8:	d1 04       	cpc	r13, r1
    14ba:	29 f0       	breq	.+10     	; 0x14c6 <vfscanf+0x1da>
    14bc:	f6 01       	movw	r30, r12
    14be:	80 82       	st	Z, r8
    14c0:	c6 01       	movw	r24, r12
    14c2:	01 96       	adiw	r24, 0x01	; 1
    14c4:	6c 01       	movw	r12, r24
    14c6:	7a 94       	dec	r7
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <vfscanf+0x1fa>
    14ca:	c8 01       	movw	r24, r16
    14cc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <fgetc>
    14d0:	4c 01       	movw	r8, r24
    14d2:	97 fd       	sbrc	r25, 7
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <vfscanf+0x1fa>
    14d6:	0e 94 ad 0a 	call	0x155a	; 0x155a <isspace>
    14da:	89 2b       	or	r24, r25
    14dc:	61 f3       	breq	.-40     	; 0x14b6 <vfscanf+0x1ca>
    14de:	b8 01       	movw	r22, r16
    14e0:	c4 01       	movw	r24, r8
    14e2:	0e 94 46 0b 	call	0x168c	; 0x168c <ungetc>
    14e6:	c1 14       	cp	r12, r1
    14e8:	d1 04       	cpc	r13, r1
    14ea:	d9 f0       	breq	.+54     	; 0x1522 <vfscanf+0x236>
    14ec:	f6 01       	movw	r30, r12
    14ee:	10 82       	st	Z, r1
    14f0:	18 c0       	rjmp	.+48     	; 0x1522 <vfscanf+0x236>
    14f2:	fb 2d       	mov	r31, r11
    14f4:	f0 62       	ori	r31, 0x20	; 32
    14f6:	bf 2e       	mov	r11, r31
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <vfscanf+0x21c>
    14fa:	8b 2d       	mov	r24, r11
    14fc:	80 61       	ori	r24, 0x10	; 16
    14fe:	b8 2e       	mov	r11, r24
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfscanf+0x21c>
    1502:	9b 2d       	mov	r25, r11
    1504:	90 64       	ori	r25, 0x40	; 64
    1506:	b9 2e       	mov	r11, r25
    1508:	2b 2d       	mov	r18, r11
    150a:	a6 01       	movw	r20, r12
    150c:	67 2d       	mov	r22, r7
    150e:	c8 01       	movw	r24, r16
    1510:	0e 94 3d 08 	call	0x107a	; 0x107a <conv_int>
    1514:	81 11       	cpse	r24, r1
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <vfscanf+0x236>
    1518:	f8 01       	movw	r30, r16
    151a:	83 81       	ldd	r24, Z+3	; 0x03
    151c:	80 73       	andi	r24, 0x30	; 48
    151e:	29 f4       	brne	.+10     	; 0x152a <vfscanf+0x23e>
    1520:	06 c0       	rjmp	.+12     	; 0x152e <vfscanf+0x242>
    1522:	b0 fc       	sbrc	r11, 0
    1524:	fc ce       	rjmp	.-520    	; 0x131e <vfscanf+0x32>
    1526:	a3 94       	inc	r10
    1528:	fa ce       	rjmp	.-524    	; 0x131e <vfscanf+0x32>
    152a:	aa 20       	and	r10, r10
    152c:	19 f0       	breq	.+6      	; 0x1534 <vfscanf+0x248>
    152e:	8a 2d       	mov	r24, r10
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <vfscanf+0x24c>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	9f ef       	ldi	r25, 0xFF	; 255
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	7f 90       	pop	r7
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	08 95       	ret

0000155a <isspace>:
    155a:	91 11       	cpse	r25, r1
    155c:	0e c1       	rjmp	.+540    	; 0x177a <__ctype_isfalse>
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	19 f0       	breq	.+6      	; 0x1568 <isspace+0xe>
    1562:	89 50       	subi	r24, 0x09	; 9
    1564:	85 50       	subi	r24, 0x05	; 5
    1566:	d0 f7       	brcc	.-12     	; 0x155c <isspace+0x2>
    1568:	08 95       	ret

0000156a <strchr_P>:
    156a:	fc 01       	movw	r30, r24
    156c:	05 90       	lpm	r0, Z+
    156e:	06 16       	cp	r0, r22
    1570:	21 f0       	breq	.+8      	; 0x157a <strchr_P+0x10>
    1572:	00 20       	and	r0, r0
    1574:	d9 f7       	brne	.-10     	; 0x156c <strchr_P+0x2>
    1576:	c0 01       	movw	r24, r0
    1578:	08 95       	ret
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	cf 01       	movw	r24, r30
    157e:	08 95       	ret

00001580 <strnlen_P>:
    1580:	fc 01       	movw	r30, r24
    1582:	05 90       	lpm	r0, Z+
    1584:	61 50       	subi	r22, 0x01	; 1
    1586:	70 40       	sbci	r23, 0x00	; 0
    1588:	01 10       	cpse	r0, r1
    158a:	d8 f7       	brcc	.-10     	; 0x1582 <strnlen_P+0x2>
    158c:	80 95       	com	r24
    158e:	90 95       	com	r25
    1590:	8e 0f       	add	r24, r30
    1592:	9f 1f       	adc	r25, r31
    1594:	08 95       	ret

00001596 <strnlen>:
    1596:	fc 01       	movw	r30, r24
    1598:	61 50       	subi	r22, 0x01	; 1
    159a:	70 40       	sbci	r23, 0x00	; 0
    159c:	01 90       	ld	r0, Z+
    159e:	01 10       	cpse	r0, r1
    15a0:	d8 f7       	brcc	.-10     	; 0x1598 <strnlen+0x2>
    15a2:	80 95       	com	r24
    15a4:	90 95       	com	r25
    15a6:	8e 0f       	add	r24, r30
    15a8:	9f 1f       	adc	r25, r31
    15aa:	08 95       	ret

000015ac <fgetc>:
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ec 01       	movw	r28, r24
    15b2:	2b 81       	ldd	r18, Y+3	; 0x03
    15b4:	20 ff       	sbrs	r18, 0
    15b6:	33 c0       	rjmp	.+102    	; 0x161e <fgetc+0x72>
    15b8:	26 ff       	sbrs	r18, 6
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <fgetc+0x24>
    15bc:	2f 7b       	andi	r18, 0xBF	; 191
    15be:	2b 83       	std	Y+3, r18	; 0x03
    15c0:	8e 81       	ldd	r24, Y+6	; 0x06
    15c2:	9f 81       	ldd	r25, Y+7	; 0x07
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9f 83       	std	Y+7, r25	; 0x07
    15c8:	8e 83       	std	Y+6, r24	; 0x06
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	29 c0       	rjmp	.+82     	; 0x1622 <fgetc+0x76>
    15d0:	22 ff       	sbrs	r18, 2
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <fgetc+0x46>
    15d4:	e8 81       	ld	r30, Y
    15d6:	f9 81       	ldd	r31, Y+1	; 0x01
    15d8:	80 81       	ld	r24, Z
    15da:	99 27       	eor	r25, r25
    15dc:	87 fd       	sbrc	r24, 7
    15de:	90 95       	com	r25
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	19 f4       	brne	.+6      	; 0x15ea <fgetc+0x3e>
    15e4:	20 62       	ori	r18, 0x20	; 32
    15e6:	2b 83       	std	Y+3, r18	; 0x03
    15e8:	1a c0       	rjmp	.+52     	; 0x161e <fgetc+0x72>
    15ea:	31 96       	adiw	r30, 0x01	; 1
    15ec:	f9 83       	std	Y+1, r31	; 0x01
    15ee:	e8 83       	st	Y, r30
    15f0:	0e c0       	rjmp	.+28     	; 0x160e <fgetc+0x62>
    15f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    15f4:	fb 85       	ldd	r31, Y+11	; 0x0b
    15f6:	09 95       	icall
    15f8:	97 ff       	sbrs	r25, 7
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <fgetc+0x62>
    15fc:	2b 81       	ldd	r18, Y+3	; 0x03
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	11 f4       	brne	.+4      	; 0x1606 <fgetc+0x5a>
    1602:	80 e1       	ldi	r24, 0x10	; 16
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <fgetc+0x5c>
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	82 2b       	or	r24, r18
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	08 c0       	rjmp	.+16     	; 0x161e <fgetc+0x72>
    160e:	2e 81       	ldd	r18, Y+6	; 0x06
    1610:	3f 81       	ldd	r19, Y+7	; 0x07
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	3f 83       	std	Y+7, r19	; 0x07
    1618:	2e 83       	std	Y+6, r18	; 0x06
    161a:	99 27       	eor	r25, r25
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <fgetc+0x76>
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <fputc>:
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	18 2f       	mov	r17, r24
    1632:	09 2f       	mov	r16, r25
    1634:	eb 01       	movw	r28, r22
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 fd       	sbrc	r24, 1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <fputc+0x1a>
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <fputc+0x5a>
    1642:	82 ff       	sbrs	r24, 2
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <fputc+0x3e>
    1646:	4e 81       	ldd	r20, Y+6	; 0x06
    1648:	5f 81       	ldd	r21, Y+7	; 0x07
    164a:	2c 81       	ldd	r18, Y+4	; 0x04
    164c:	3d 81       	ldd	r19, Y+5	; 0x05
    164e:	42 17       	cp	r20, r18
    1650:	53 07       	cpc	r21, r19
    1652:	7c f4       	brge	.+30     	; 0x1672 <fputc+0x4a>
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	9f 01       	movw	r18, r30
    165a:	2f 5f       	subi	r18, 0xFF	; 255
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	39 83       	std	Y+1, r19	; 0x01
    1660:	28 83       	st	Y, r18
    1662:	10 83       	st	Z, r17
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <fputc+0x4a>
    1666:	e8 85       	ldd	r30, Y+8	; 0x08
    1668:	f9 85       	ldd	r31, Y+9	; 0x09
    166a:	81 2f       	mov	r24, r17
    166c:	09 95       	icall
    166e:	89 2b       	or	r24, r25
    1670:	29 f7       	brne	.-54     	; 0x163c <fputc+0x14>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	3f 83       	std	Y+7, r19	; 0x07
    167c:	2e 83       	std	Y+6, r18	; 0x06
    167e:	81 2f       	mov	r24, r17
    1680:	90 2f       	mov	r25, r16
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <ungetc>:
    168c:	fb 01       	movw	r30, r22
    168e:	23 81       	ldd	r18, Z+3	; 0x03
    1690:	20 ff       	sbrs	r18, 0
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <ungetc+0x2c>
    1694:	26 fd       	sbrc	r18, 6
    1696:	10 c0       	rjmp	.+32     	; 0x16b8 <ungetc+0x2c>
    1698:	8f 3f       	cpi	r24, 0xFF	; 255
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	93 07       	cpc	r25, r19
    169e:	61 f0       	breq	.+24     	; 0x16b8 <ungetc+0x2c>
    16a0:	82 83       	std	Z+2, r24	; 0x02
    16a2:	2f 7d       	andi	r18, 0xDF	; 223
    16a4:	20 64       	ori	r18, 0x40	; 64
    16a6:	23 83       	std	Z+3, r18	; 0x03
    16a8:	26 81       	ldd	r18, Z+6	; 0x06
    16aa:	37 81       	ldd	r19, Z+7	; 0x07
    16ac:	21 50       	subi	r18, 0x01	; 1
    16ae:	31 09       	sbc	r19, r1
    16b0:	37 83       	std	Z+7, r19	; 0x07
    16b2:	26 83       	std	Z+6, r18	; 0x06
    16b4:	99 27       	eor	r25, r25
    16b6:	08 95       	ret
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <__ultoa_invert>:
    16be:	fa 01       	movw	r30, r20
    16c0:	aa 27       	eor	r26, r26
    16c2:	28 30       	cpi	r18, 0x08	; 8
    16c4:	51 f1       	breq	.+84     	; 0x171a <__ultoa_invert+0x5c>
    16c6:	20 31       	cpi	r18, 0x10	; 16
    16c8:	81 f1       	breq	.+96     	; 0x172a <__ultoa_invert+0x6c>
    16ca:	e8 94       	clt
    16cc:	6f 93       	push	r22
    16ce:	6e 7f       	andi	r22, 0xFE	; 254
    16d0:	6e 5f       	subi	r22, 0xFE	; 254
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	8f 4f       	sbci	r24, 0xFF	; 255
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	af 4f       	sbci	r26, 0xFF	; 255
    16da:	b1 e0       	ldi	r27, 0x01	; 1
    16dc:	3e d0       	rcall	.+124    	; 0x175a <__ultoa_invert+0x9c>
    16de:	b4 e0       	ldi	r27, 0x04	; 4
    16e0:	3c d0       	rcall	.+120    	; 0x175a <__ultoa_invert+0x9c>
    16e2:	67 0f       	add	r22, r23
    16e4:	78 1f       	adc	r23, r24
    16e6:	89 1f       	adc	r24, r25
    16e8:	9a 1f       	adc	r25, r26
    16ea:	a1 1d       	adc	r26, r1
    16ec:	68 0f       	add	r22, r24
    16ee:	79 1f       	adc	r23, r25
    16f0:	8a 1f       	adc	r24, r26
    16f2:	91 1d       	adc	r25, r1
    16f4:	a1 1d       	adc	r26, r1
    16f6:	6a 0f       	add	r22, r26
    16f8:	71 1d       	adc	r23, r1
    16fa:	81 1d       	adc	r24, r1
    16fc:	91 1d       	adc	r25, r1
    16fe:	a1 1d       	adc	r26, r1
    1700:	20 d0       	rcall	.+64     	; 0x1742 <__ultoa_invert+0x84>
    1702:	09 f4       	brne	.+2      	; 0x1706 <__ultoa_invert+0x48>
    1704:	68 94       	set
    1706:	3f 91       	pop	r19
    1708:	2a e0       	ldi	r18, 0x0A	; 10
    170a:	26 9f       	mul	r18, r22
    170c:	11 24       	eor	r1, r1
    170e:	30 19       	sub	r19, r0
    1710:	30 5d       	subi	r19, 0xD0	; 208
    1712:	31 93       	st	Z+, r19
    1714:	de f6       	brtc	.-74     	; 0x16cc <__ultoa_invert+0xe>
    1716:	cf 01       	movw	r24, r30
    1718:	08 95       	ret
    171a:	46 2f       	mov	r20, r22
    171c:	47 70       	andi	r20, 0x07	; 7
    171e:	40 5d       	subi	r20, 0xD0	; 208
    1720:	41 93       	st	Z+, r20
    1722:	b3 e0       	ldi	r27, 0x03	; 3
    1724:	0f d0       	rcall	.+30     	; 0x1744 <__ultoa_invert+0x86>
    1726:	c9 f7       	brne	.-14     	; 0x171a <__ultoa_invert+0x5c>
    1728:	f6 cf       	rjmp	.-20     	; 0x1716 <__ultoa_invert+0x58>
    172a:	46 2f       	mov	r20, r22
    172c:	4f 70       	andi	r20, 0x0F	; 15
    172e:	40 5d       	subi	r20, 0xD0	; 208
    1730:	4a 33       	cpi	r20, 0x3A	; 58
    1732:	18 f0       	brcs	.+6      	; 0x173a <__ultoa_invert+0x7c>
    1734:	49 5d       	subi	r20, 0xD9	; 217
    1736:	31 fd       	sbrc	r19, 1
    1738:	40 52       	subi	r20, 0x20	; 32
    173a:	41 93       	st	Z+, r20
    173c:	02 d0       	rcall	.+4      	; 0x1742 <__ultoa_invert+0x84>
    173e:	a9 f7       	brne	.-22     	; 0x172a <__ultoa_invert+0x6c>
    1740:	ea cf       	rjmp	.-44     	; 0x1716 <__ultoa_invert+0x58>
    1742:	b4 e0       	ldi	r27, 0x04	; 4
    1744:	a6 95       	lsr	r26
    1746:	97 95       	ror	r25
    1748:	87 95       	ror	r24
    174a:	77 95       	ror	r23
    174c:	67 95       	ror	r22
    174e:	ba 95       	dec	r27
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0x86>
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 05       	cpc	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	08 95       	ret
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	0a 2e       	mov	r0, r26
    1760:	06 94       	lsr	r0
    1762:	57 95       	ror	r21
    1764:	47 95       	ror	r20
    1766:	37 95       	ror	r19
    1768:	27 95       	ror	r18
    176a:	ba 95       	dec	r27
    176c:	c9 f7       	brne	.-14     	; 0x1760 <__ultoa_invert+0xa2>
    176e:	62 0f       	add	r22, r18
    1770:	73 1f       	adc	r23, r19
    1772:	84 1f       	adc	r24, r20
    1774:	95 1f       	adc	r25, r21
    1776:	a0 1d       	adc	r26, r0
    1778:	08 95       	ret

0000177a <__ctype_isfalse>:
    177a:	99 27       	eor	r25, r25
    177c:	88 27       	eor	r24, r24

0000177e <__ctype_istrue>:
    177e:	08 95       	ret

00001780 <__prologue_saves__>:
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	ca 1b       	sub	r28, r26
    17aa:	db 0b       	sbc	r29, r27
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	09 94       	ijmp

000017b8 <__epilogue_restores__>:
    17b8:	2a 88       	ldd	r2, Y+18	; 0x12
    17ba:	39 88       	ldd	r3, Y+17	; 0x11
    17bc:	48 88       	ldd	r4, Y+16	; 0x10
    17be:	5f 84       	ldd	r5, Y+15	; 0x0f
    17c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ca:	b9 84       	ldd	r11, Y+9	; 0x09
    17cc:	c8 84       	ldd	r12, Y+8	; 0x08
    17ce:	df 80       	ldd	r13, Y+7	; 0x07
    17d0:	ee 80       	ldd	r14, Y+6	; 0x06
    17d2:	fd 80       	ldd	r15, Y+5	; 0x05
    17d4:	0c 81       	ldd	r16, Y+4	; 0x04
    17d6:	1b 81       	ldd	r17, Y+3	; 0x03
    17d8:	aa 81       	ldd	r26, Y+2	; 0x02
    17da:	b9 81       	ldd	r27, Y+1	; 0x01
    17dc:	ce 0f       	add	r28, r30
    17de:	d1 1d       	adc	r29, r1
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	ed 01       	movw	r28, r26
    17ec:	08 95       	ret

000017ee <_exit>:
    17ee:	f8 94       	cli

000017f0 <__stop_program>:
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <__stop_program>
