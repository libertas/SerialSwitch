
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000176a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  0000176a  000017fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000139  00800114  00800114  000018b2  2**0
                  ALLOC
  3 .stab         00001b9c  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa7  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000043f7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_4>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d4 e0       	ldi	r29, 0x04	; 4
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	11 e0       	ldi	r17, 0x01	; 1
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	ea e6       	ldi	r30, 0x6A	; 106
      74:	f7 e1       	ldi	r31, 0x17	; 23
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a4 31       	cpi	r26, 0x14	; 20
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	22 e0       	ldi	r18, 0x02	; 2
      84:	a4 e1       	ldi	r26, 0x14	; 20
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	ad 34       	cpi	r26, 0x4D	; 77
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 11 05 	call	0xa22	; 0xa22 <main>
      96:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      9e:	cf 92       	push	r12
      a0:	df 92       	push	r13
      a2:	ef 92       	push	r14
      a4:	ff 92       	push	r15
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	28 97       	sbiw	r28, 0x08	; 8
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	8c 01       	movw	r16, r24
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      c0:	fc 01       	movw	r30, r24
      c2:	51 81       	ldd	r21, Z+1	; 0x01
      c4:	85 2f       	mov	r24, r21
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	9c 01       	movw	r18, r24
      ca:	20 53       	subi	r18, 0x30	; 48
      cc:	31 09       	sbc	r19, r1
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	2d 83       	std	Y+5, r18	; 0x05
	switch (code[0]) {
      d2:	40 81       	ld	r20, Z
      d4:	45 34       	cpi	r20, 0x45	; 69
      d6:	09 f4       	brne	.+2      	; 0xda <runCmd+0x3c>
      d8:	d9 c0       	rjmp	.+434    	; 0x28c <runCmd+0x1ee>
      da:	30 f4       	brcc	.+12     	; 0xe8 <runCmd+0x4a>
      dc:	41 34       	cpi	r20, 0x41	; 65
      de:	59 f0       	breq	.+22     	; 0xf6 <runCmd+0x58>
      e0:	43 34       	cpi	r20, 0x43	; 67
      e2:	09 f4       	brne	.+2      	; 0xe6 <runCmd+0x48>
      e4:	70 c0       	rjmp	.+224    	; 0x1c6 <runCmd+0x128>
      e6:	1f c2       	rjmp	.+1086   	; 0x526 <__stack+0xc7>
      e8:	44 35       	cpi	r20, 0x54	; 84
      ea:	09 f4       	brne	.+2      	; 0xee <runCmd+0x50>
      ec:	61 c1       	rjmp	.+706    	; 0x3b0 <runCmd+0x312>
      ee:	45 35       	cpi	r20, 0x55	; 85
      f0:	09 f4       	brne	.+2      	; 0xf4 <runCmd+0x56>
      f2:	bf c1       	rjmp	.+894    	; 0x472 <__stack+0x13>
      f4:	18 c2       	rjmp	.+1072   	; 0x526 <__stack+0xc7>
	case 'A':		// control port a
		if (code[2] - '0') {
      f6:	f8 01       	movw	r30, r16
      f8:	82 81       	ldd	r24, Z+2	; 0x02
      fa:	80 33       	cpi	r24, 0x30	; 48
      fc:	31 f1       	breq	.+76     	; 0x14a <runCmd+0xac>
			writeEEPROM(addr, '1');
      fe:	61 e3       	ldi	r22, 0x31	; 49
     100:	c9 01       	movw	r24, r18
     102:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTA |= 1 << addr;
     106:	2b b3       	in	r18, 0x1b	; 27
     108:	ee 24       	eor	r14, r14
     10a:	e3 94       	inc	r14
     10c:	f1 2c       	mov	r15, r1
     10e:	c7 01       	movw	r24, r14
     110:	0d 80       	ldd	r0, Y+5	; 0x05
     112:	02 c0       	rjmp	.+4      	; 0x118 <runCmd+0x7a>
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <runCmd+0x76>
     11c:	28 2b       	or	r18, r24
     11e:	2b bb       	out	0x1b, r18	; 27
			sprintf(buf, "UA%c65535/0", code[1]);
     120:	f8 01       	movw	r30, r16
     122:	81 81       	ldd	r24, Z+1	; 0x01
     124:	1f 92       	push	r1
     126:	8f 93       	push	r24
     128:	82 e6       	ldi	r24, 0x62	; 98
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	9f 93       	push	r25
     12e:	8f 93       	push	r24
     130:	8b e1       	ldi	r24, 0x1B	; 27
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	9f 93       	push	r25
     136:	8f 93       	push	r24
     138:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
			status |= 1 << addr;
     13c:	0d 80       	ldd	r0, Y+5	; 0x05
     13e:	02 c0       	rjmp	.+4      	; 0x144 <runCmd+0xa6>
     140:	ee 0c       	add	r14, r14
     142:	ff 1c       	adc	r15, r15
     144:	0a 94       	dec	r0
     146:	e2 f7       	brpl	.-8      	; 0x140 <runCmd+0xa2>
     148:	69 c0       	rjmp	.+210    	; 0x21c <runCmd+0x17e>
		} else {
			writeEEPROM(addr, '0');
     14a:	60 e3       	ldi	r22, 0x30	; 48
     14c:	c9 01       	movw	r24, r18
     14e:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTA &= ~(1 << addr);
     152:	2b b3       	in	r18, 0x1b	; 27
     154:	ee 24       	eor	r14, r14
     156:	e3 94       	inc	r14
     158:	f1 2c       	mov	r15, r1
     15a:	c7 01       	movw	r24, r14
     15c:	0d 80       	ldd	r0, Y+5	; 0x05
     15e:	02 c0       	rjmp	.+4      	; 0x164 <runCmd+0xc6>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <runCmd+0xc2>
     168:	80 95       	com	r24
     16a:	82 23       	and	r24, r18
     16c:	8b bb       	out	0x1b, r24	; 27
			sprintf(buf, "UA%c0/65535", code[1]);
     16e:	f8 01       	movw	r30, r16
     170:	81 81       	ldd	r24, Z+1	; 0x01
     172:	1f 92       	push	r1
     174:	8f 93       	push	r24
     176:	8e e6       	ldi	r24, 0x6E	; 110
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9f 93       	push	r25
     17c:	8f 93       	push	r24
     17e:	8b e1       	ldi	r24, 0x1B	; 27
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
			status &= ~(1 << addr);
     18a:	97 01       	movw	r18, r14
     18c:	0d 80       	ldd	r0, Y+5	; 0x05
     18e:	02 c0       	rjmp	.+4      	; 0x194 <runCmd+0xf6>
     190:	22 0f       	add	r18, r18
     192:	33 1f       	adc	r19, r19
     194:	0a 94       	dec	r0
     196:	e2 f7       	brpl	.-8      	; 0x190 <runCmd+0xf2>
     198:	20 95       	com	r18
     19a:	30 95       	com	r19
     19c:	80 91 c1 01 	lds	r24, 0x01C1
     1a0:	90 91 c2 01 	lds	r25, 0x01C2
     1a4:	82 23       	and	r24, r18
     1a6:	93 23       	and	r25, r19
     1a8:	90 93 c2 01 	sts	0x01C2, r25
     1ac:	80 93 c1 01 	sts	0x01C1, r24
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
		}
		runCmd(buf);
     1bc:	8b e1       	ldi	r24, 0x1B	; 27
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
		break;
     1c4:	c6 c1       	rjmp	.+908    	; 0x552 <__stack+0xf3>
	case 'C':		// control port c
		if (code[2] - '0') {
     1c6:	f8 01       	movw	r30, r16
     1c8:	22 81       	ldd	r18, Z+2	; 0x02
     1ca:	88 97       	sbiw	r24, 0x28	; 40
     1cc:	20 33       	cpi	r18, 0x30	; 48
     1ce:	69 f1       	breq	.+90     	; 0x22a <runCmd+0x18c>
			writeEEPROM(8 + addr, '1');
     1d0:	61 e3       	ldi	r22, 0x31	; 49
     1d2:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTC |= 1 << addr;
     1d6:	25 b3       	in	r18, 0x15	; 21
     1d8:	ee 24       	eor	r14, r14
     1da:	e3 94       	inc	r14
     1dc:	f1 2c       	mov	r15, r1
     1de:	c7 01       	movw	r24, r14
     1e0:	0d 80       	ldd	r0, Y+5	; 0x05
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <runCmd+0x14a>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <runCmd+0x146>
     1ec:	28 2b       	or	r18, r24
     1ee:	25 bb       	out	0x15, r18	; 21
			sprintf(buf, "UC%c65535/0", code[1]);
     1f0:	f8 01       	movw	r30, r16
     1f2:	81 81       	ldd	r24, Z+1	; 0x01
     1f4:	1f 92       	push	r1
     1f6:	8f 93       	push	r24
     1f8:	8a e7       	ldi	r24, 0x7A	; 122
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	8b e1       	ldi	r24, 0x1B	; 27
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
			status |= 1 << (8 + addr);
     20c:	8d 81       	ldd	r24, Y+5	; 0x05
     20e:	9e 81       	ldd	r25, Y+6	; 0x06
     210:	08 96       	adiw	r24, 0x08	; 8
     212:	02 c0       	rjmp	.+4      	; 0x218 <runCmd+0x17a>
     214:	ee 0c       	add	r14, r14
     216:	ff 1c       	adc	r15, r15
     218:	8a 95       	dec	r24
     21a:	e2 f7       	brpl	.-8      	; 0x214 <runCmd+0x176>
     21c:	80 91 c1 01 	lds	r24, 0x01C1
     220:	90 91 c2 01 	lds	r25, 0x01C2
     224:	8e 29       	or	r24, r14
     226:	9f 29       	or	r25, r15
     228:	bf cf       	rjmp	.-130    	; 0x1a8 <runCmd+0x10a>
		} else {
			writeEEPROM(8 + addr, '0');
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			PORTC &= ~(1 << addr);
     230:	25 b3       	in	r18, 0x15	; 21
     232:	ee 24       	eor	r14, r14
     234:	e3 94       	inc	r14
     236:	f1 2c       	mov	r15, r1
     238:	c7 01       	movw	r24, r14
     23a:	0d 80       	ldd	r0, Y+5	; 0x05
     23c:	02 c0       	rjmp	.+4      	; 0x242 <runCmd+0x1a4>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <runCmd+0x1a0>
     246:	80 95       	com	r24
     248:	82 23       	and	r24, r18
     24a:	85 bb       	out	0x15, r24	; 21
			sprintf(buf, "UC%c0/65535", code[1]);
     24c:	f8 01       	movw	r30, r16
     24e:	81 81       	ldd	r24, Z+1	; 0x01
     250:	1f 92       	push	r1
     252:	8f 93       	push	r24
     254:	86 e8       	ldi	r24, 0x86	; 134
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9f 93       	push	r25
     25a:	8f 93       	push	r24
     25c:	8b e1       	ldi	r24, 0x1B	; 27
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	9f 93       	push	r25
     262:	8f 93       	push	r24
     264:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
			status ^= ~(1 << (8 + addr));
     268:	8d 81       	ldd	r24, Y+5	; 0x05
     26a:	9e 81       	ldd	r25, Y+6	; 0x06
     26c:	08 96       	adiw	r24, 0x08	; 8
     26e:	97 01       	movw	r18, r14
     270:	02 c0       	rjmp	.+4      	; 0x276 <runCmd+0x1d8>
     272:	22 0f       	add	r18, r18
     274:	33 1f       	adc	r19, r19
     276:	8a 95       	dec	r24
     278:	e2 f7       	brpl	.-8      	; 0x272 <runCmd+0x1d4>
     27a:	20 95       	com	r18
     27c:	30 95       	com	r19
     27e:	80 91 c1 01 	lds	r24, 0x01C1
     282:	90 91 c2 01 	lds	r25, 0x01C2
     286:	82 27       	eor	r24, r18
     288:	93 27       	eor	r25, r19
     28a:	8e cf       	rjmp	.-228    	; 0x1a8 <runCmd+0x10a>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     28c:	f8 01       	movw	r30, r16
     28e:	62 81       	ldd	r22, Z+2	; 0x02
     290:	69 36       	cpi	r22, 0x69	; 105
     292:	79 f4       	brne	.+30     	; 0x2b2 <runCmd+0x214>
     294:	e1 2c       	mov	r14, r1
     296:	f1 2c       	mov	r15, r1
			for (i = 0; i < 16; i++)
				writeEEPROM(i, code[1]);
     298:	f8 01       	movw	r30, r16
     29a:	61 81       	ldd	r22, Z+1	; 0x01
     29c:	c7 01       	movw	r24, r14
     29e:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
			for (i = 0; i < 16; i++)
     2a2:	ff ef       	ldi	r31, 0xFF	; 255
     2a4:	ef 1a       	sub	r14, r31
     2a6:	ff 0a       	sbc	r15, r31
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	e2 16       	cp	r14, r18
     2ac:	f1 04       	cpc	r15, r1
     2ae:	a1 f7       	brne	.-24     	; 0x298 <runCmd+0x1fa>
     2b0:	50 c1       	rjmp	.+672    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, code[1]);
		else if (code[2] == 'f')
     2b2:	66 36       	cpi	r22, 0x66	; 102
     2b4:	c1 f4       	brne	.+48     	; 0x2e6 <runCmd+0x248>
		{
			if(code[1] == 'a')
     2b6:	51 36       	cpi	r21, 0x61	; 97
     2b8:	19 f4       	brne	.+6      	; 0x2c0 <runCmd+0x222>
				addr = EEPROM_SIZE;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <runCmd+0x226>
			else
				addr = 16;
     2c0:	80 e1       	ldi	r24, 0x10	; 16
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9e 83       	std	Y+6, r25	; 0x06
     2c6:	8d 83       	std	Y+5, r24	; 0x05
			status ^= ~(1 << (8 + addr));
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     2c8:	00 e0       	ldi	r16, 0x00	; 0
     2ca:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
     2ce:	9e 81       	ldd	r25, Y+6	; 0x06
     2d0:	08 17       	cp	r16, r24
     2d2:	19 07       	cpc	r17, r25
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <runCmd+0x23a>
     2d6:	3d c1       	rjmp	.+634    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, 0xff);
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	c8 01       	movw	r24, r16
     2dc:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	f3 cf       	rjmp	.-26     	; 0x2cc <runCmd+0x22e>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
     2e6:	62 37       	cpi	r22, 0x72	; 114
     2e8:	29 f4       	brne	.+10     	; 0x2f4 <runCmd+0x256>
			PORTA = ~readEEPROM(code[1]);
     2ea:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     2ee:	80 95       	com	r24
     2f0:	8b bb       	out	0x1b, r24	; 27
     2f2:	2f c1       	rjmp	.+606    	; 0x552 <__stack+0xf3>
		else if (code[1] == 'R') {
     2f4:	52 35       	cpi	r21, 0x52	; 82
     2f6:	09 f0       	breq	.+2      	; 0x2fa <runCmd+0x25c>
     2f8:	b4 c0       	rjmp	.+360    	; 0x462 <__stack+0x3>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     2fa:	ce 01       	movw	r24, r28
     2fc:	05 96       	adiw	r24, 0x05	; 5
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	84 eb       	ldi	r24, 0xB4	; 180
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 5f       	subi	r16, 0xFE	; 254
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	1f 93       	push	r17
     310:	0f 93       	push	r16
     312:	0e 94 c9 05 	call	0xb92	; 0xb92 <sscanf>
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f4       	brne	.+60     	; 0x362 <runCmd+0x2c4>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	9e 81       	ldd	r25, Y+6	; 0x06
     32a:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     32e:	1f 92       	push	r1
     330:	8f 93       	push	r24
     332:	8e 81       	ldd	r24, Y+6	; 0x06
     334:	8f 93       	push	r24
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	8f 93       	push	r24
     33a:	82 e9       	ldi	r24, 0x92	; 146
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	9f 93       	push	r25
     340:	8f 93       	push	r24
     342:	8b e1       	ldi	r24, 0x1B	; 27
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
				print(buf);
     34e:	8b e1       	ldi	r24, 0x1B	; 27
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	f8 c0       	rjmp	.+496    	; 0x552 <__stack+0xf3>
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
			PORTA = ~readEEPROM(code[1]);
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
     362:	00 e0       	ldi	r16, 0x00	; 0
     364:	10 e0       	ldi	r17, 0x00	; 0
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     366:	32 e9       	ldi	r19, 0x92	; 146
     368:	c3 2e       	mov	r12, r19
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	d3 2e       	mov	r13, r19
     36e:	4b e1       	ldi	r20, 0x1B	; 27
     370:	e4 2e       	mov	r14, r20
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	f4 2e       	mov	r15, r20
						readEEPROM(i));
     376:	c8 01       	movw	r24, r16
     378:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     37c:	1f 92       	push	r1
     37e:	8f 93       	push	r24
     380:	1f 93       	push	r17
     382:	0f 93       	push	r16
     384:	df 92       	push	r13
     386:	cf 92       	push	r12
     388:	ff 92       	push	r15
     38a:	ef 92       	push	r14
     38c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
						readEEPROM(i));
					print(buf);
     390:	8b e1       	ldi	r24, 0x1B	; 27
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	01 15       	cp	r16, r1
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	1f 07       	cpc	r17, r31
     3ac:	21 f7       	brne	.-56     	; 0x376 <runCmd+0x2d8>
     3ae:	d1 c0       	rjmp	.+418    	; 0x552 <__stack+0xf3>
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     3b0:	1f 93       	push	r17
     3b2:	0f 93       	push	r16
     3b4:	ce 01       	movw	r24, r28
     3b6:	03 96       	adiw	r24, 0x03	; 3
     3b8:	9f 93       	push	r25
     3ba:	8f 93       	push	r24
     3bc:	89 e9       	ldi	r24, 0x99	; 153
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	1f 93       	push	r17
     3c6:	0f 93       	push	r16
     3c8:	0e 94 c9 05 	call	0xb92	; 0xb92 <sscanf>
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	02 97       	sbiw	r24, 0x02	; 2
     3d8:	09 f0       	breq	.+2      	; 0x3dc <runCmd+0x33e>
     3da:	46 c0       	rjmp	.+140    	; 0x468 <__stack+0x9>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     3dc:	6c 81       	ldd	r22, Y+4	; 0x04
     3de:	80 91 7f 01 	lds	r24, 0x017F
     3e2:	90 91 80 01 	lds	r25, 0x0180
     3e6:	9c 01       	movw	r18, r24
     3e8:	21 50       	subi	r18, 0x01	; 1
     3ea:	31 09       	sbc	r19, r1
     3ec:	30 93 80 01 	sts	0x0180, r19
     3f0:	20 93 7f 01 	sts	0x017F, r18
     3f4:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     3f8:	6b 81       	ldd	r22, Y+3	; 0x03
     3fa:	80 91 7f 01 	lds	r24, 0x017F
     3fe:	90 91 80 01 	lds	r25, 0x0180
     402:	9c 01       	movw	r18, r24
     404:	21 50       	subi	r18, 0x01	; 1
     406:	31 09       	sbc	r19, r1
     408:	30 93 80 01 	sts	0x0180, r19
     40c:	20 93 7f 01 	sts	0x017F, r18
     410:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     414:	78 01       	movw	r14, r16
     416:	f8 01       	movw	r30, r16
     418:	01 90       	ld	r0, Z+
     41a:	00 20       	and	r0, r0
     41c:	e9 f7       	brne	.-6      	; 0x418 <runCmd+0x37a>
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	e0 1b       	sub	r30, r16
     422:	f1 0b       	sbc	r31, r17
     424:	80 91 7f 01 	lds	r24, 0x017F
     428:	90 91 80 01 	lds	r25, 0x0180
     42c:	97 01       	movw	r18, r14
     42e:	20 1b       	sub	r18, r16
     430:	31 0b       	sbc	r19, r17
     432:	2e 17       	cp	r18, r30
     434:	3f 07       	cpc	r19, r31
     436:	68 f4       	brcc	.+26     	; 0x452 <runCmd+0x3b4>
				writeEEPROM(stackTail--, code[i]);
     438:	f7 01       	movw	r30, r14
     43a:	61 91       	ld	r22, Z+
     43c:	7f 01       	movw	r14, r30
     43e:	9c 01       	movw	r18, r24
     440:	21 50       	subi	r18, 0x01	; 1
     442:	31 09       	sbc	r19, r1
     444:	30 93 80 01 	sts	0x0180, r19
     448:	20 93 7f 01 	sts	0x017F, r18
     44c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
     450:	e2 cf       	rjmp	.-60     	; 0x416 <runCmd+0x378>
			}
			writeEEPROM(stackTail--, '\n');
     452:	9c 01       	movw	r18, r24
     454:	21 50       	subi	r18, 0x01	; 1
     456:	31 09       	sbc	r19, r1
     458:	30 93 80 01 	sts	0x0180, r19
     45c:	20 93 7f 01 	sts	0x017F, r18
     460:	6a e0       	ldi	r22, 0x0A	; 10
     462:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     466:	75 c0       	rjmp	.+234    	; 0x552 <__stack+0xf3>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     468:	8f e9       	ldi	r24, 0x9F	; 159
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
			return;
     470:	70 c0       	rjmp	.+224    	; 0x552 <__stack+0xf3>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	02 96       	adiw	r24, 0x02	; 2
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	04 96       	adiw	r24, 0x04	; 4
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	8c ea       	ldi	r24, 0xAC	; 172
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	1f 93       	push	r17
     496:	0f 93       	push	r16
     498:	0e 94 c9 05 	call	0xb92	; 0xb92 <sscanf>
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	04 97       	sbiw	r24, 0x04	; 4
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__stack+0x4d>
     4aa:	53 c0       	rjmp	.+166    	; 0x552 <__stack+0xf3>
			if (port == 'A')
     4ac:	88 85       	ldd	r24, Y+8	; 0x08
     4ae:	81 34       	cpi	r24, 0x41	; 65
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <__stack+0x59>
				addr = 16;
     4b2:	80 e1       	ldi	r24, 0x10	; 16
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__stack+0x61>
			else if (port == 'C')
     4b8:	83 34       	cpi	r24, 0x43	; 67
     4ba:	b1 f4       	brne	.+44     	; 0x4e8 <__stack+0x89>
				addr = 48;
     4bc:	80 e3       	ldi	r24, 0x30	; 48
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9e 83       	std	Y+6, r25	; 0x06
     4c2:	8d 83       	std	Y+5, r24	; 0x05
			else {
				printf("Wrong port\n");
				return;
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     4c4:	8f 81       	ldd	r24, Y+7	; 0x07
     4c6:	90 ed       	ldi	r25, 0xD0	; 208
     4c8:	98 0f       	add	r25, r24
     4ca:	9a 30       	cpi	r25, 0x0A	; 10
     4cc:	90 f4       	brcc	.+36     	; 0x4f2 <__stack+0x93>
				addr += (pin - '0') * 4;
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	c0 97       	sbiw	r24, 0x30	; 48
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	2d 81       	ldd	r18, Y+5	; 0x05
     4dc:	3e 81       	ldd	r19, Y+6	; 0x06
     4de:	28 0f       	add	r18, r24
     4e0:	39 1f       	adc	r19, r25
     4e2:	3e 83       	std	Y+6, r19	; 0x06
     4e4:	2d 83       	std	Y+5, r18	; 0x05
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__stack+0x93>
			if (port == 'A')
				addr = 16;
			else if (port == 'C')
				addr = 48;
			else {
				printf("Wrong port\n");
     4e8:	87 eb       	ldi	r24, 0xB7	; 183
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <puts>
				return;
     4f0:	30 c0       	rjmp	.+96     	; 0x552 <__stack+0xf3>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
				addr += (pin - '0') * 4;
			writeEEPROM(addr, time >> 8);
     4f2:	6c 81       	ldd	r22, Y+4	; 0x04
     4f4:	8d 81       	ldd	r24, Y+5	; 0x05
     4f6:	9e 81       	ldd	r25, Y+6	; 0x06
     4f8:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 1, time);
     4fc:	8d 81       	ldd	r24, Y+5	; 0x05
     4fe:	9e 81       	ldd	r25, Y+6	; 0x06
     500:	6b 81       	ldd	r22, Y+3	; 0x03
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     508:	6a 81       	ldd	r22, Y+2	; 0x02
     50a:	8d 81       	ldd	r24, Y+5	; 0x05
     50c:	9e 81       	ldd	r25, Y+6	; 0x06
     50e:	02 96       	adiw	r24, 0x02	; 2
     510:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	9e 81       	ldd	r25, Y+6	; 0x06
     518:	69 81       	ldd	r22, Y+1	; 0x01
     51a:	03 96       	adiw	r24, 0x03	; 3
     51c:	0e 94 b8 02 	call	0x570	; 0x570 <writeEEPROM>
			setDuty();
     520:	0e 94 c7 02 	call	0x58e	; 0x58e <setDuty>
     524:	16 c0       	rjmp	.+44     	; 0x552 <__stack+0xf3>
		}
		break;
	default:
		sprintf(buf, "Unrecognised code:%s\n", code);
     526:	1f 93       	push	r17
     528:	0f 93       	push	r16
     52a:	82 ec       	ldi	r24, 0xC2	; 194
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	8b e1       	ldi	r24, 0x1B	; 27
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <sprintf>
		print(buf);
     53e:	8b e1       	ldi	r24, 0x1B	; 27
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
		break;
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
	}
}
     552:	28 96       	adiw	r28, 0x08	; 8
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <writeEEPROM>:
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
	while (EECR & (1 << EEWE)) ;
     570:	e1 99       	sbic	0x1c, 1	; 28
     572:	fe cf       	rjmp	.-4      	; 0x570 <writeEEPROM>
	EEAR = addr;
     574:	9f bb       	out	0x1f, r25	; 31
     576:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
     578:	6d bb       	out	0x1d, r22	; 29
	EECR |= 1 << EEMWE;
     57a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= 1 << EEWE;
     57c:	e1 9a       	sbi	0x1c, 1	; 28
     57e:	08 95       	ret

00000580 <readEEPROM>:
}

unsigned char readEEPROM(unsigned int addr)
{
	while (EECR & (1 << EEWE)) ;
     580:	e1 99       	sbic	0x1c, 1	; 28
     582:	fe cf       	rjmp	.-4      	; 0x580 <readEEPROM>
	EEAR = addr;
     584:	9f bb       	out	0x1f, r25	; 31
     586:	8e bb       	out	0x1e, r24	; 30
	EECR |= 1 << EERE;
     588:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     58a:	8d b3       	in	r24, 0x1d	; 29
}
     58c:	08 95       	ret

0000058e <setDuty>:

void setDuty()
{
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	c0 e0       	ldi	r28, 0x00	; 0
     59a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     59c:	8e 01       	movw	r16, r28
     59e:	15 95       	asr	r17
     5a0:	07 95       	ror	r16
     5a2:	15 95       	asr	r17
     5a4:	07 95       	ror	r16
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5a6:	ce 01       	movw	r24, r28
     5a8:	40 96       	adiw	r24, 0x10	; 16
     5aa:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     5ae:	f8 2e       	mov	r15, r24
     5b0:	ce 01       	movw	r24, r28
     5b2:	41 96       	adiw	r24, 0x11	; 17
     5b4:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5b8:	00 0f       	add	r16, r16
     5ba:	11 1f       	adc	r17, r17
     5bc:	f8 01       	movw	r30, r16
     5be:	ef 57       	subi	r30, 0x7F	; 127
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     5c2:	2f 2d       	mov	r18, r15
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	32 2f       	mov	r19, r18
     5c8:	22 27       	eor	r18, r18
     5ca:	28 2b       	or	r18, r24

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     5cc:	31 83       	std	Z+1, r19	; 0x01
     5ce:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5d0:	ce 01       	movw	r24, r28
     5d2:	42 96       	adiw	r24, 0x12	; 18
     5d4:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     5d8:	f8 2e       	mov	r15, r24
     5da:	ce 01       	movw	r24, r28
     5dc:	43 96       	adiw	r24, 0x13	; 19
     5de:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5e2:	f8 01       	movw	r30, r16
     5e4:	ef 55       	subi	r30, 0x5F	; 95
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     5e8:	2f 2d       	mov	r18, r15
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	32 2f       	mov	r19, r18
     5ee:	22 27       	eor	r18, r18
     5f0:	28 2b       	or	r18, r24
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     5f2:	31 83       	std	Z+1, r19	; 0x01
     5f4:	20 83       	st	Z, r18
     5f6:	24 96       	adiw	r28, 0x04	; 4
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     5f8:	c0 34       	cpi	r28, 0x40	; 64
     5fa:	d1 05       	cpc	r29, r1
     5fc:	79 f6       	brne	.-98     	; 0x59c <setDuty+0xe>
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
		if (status & (1 << i))
     5fe:	40 91 c1 01 	lds	r20, 0x01C1
     602:	50 91 c2 01 	lds	r21, 0x01C2
     606:	c1 e8       	ldi	r28, 0x81	; 129
     608:	d1 e0       	ldi	r29, 0x01	; 1
     60a:	e3 ec       	ldi	r30, 0xC3	; 195
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	a1 ea       	ldi	r26, 0xA1	; 161
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	9b 01       	movw	r18, r22
     61c:	08 2e       	mov	r0, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <setDuty+0x96>
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <setDuty+0x92>
     628:	24 23       	and	r18, r20
     62a:	35 23       	and	r19, r21
     62c:	23 2b       	or	r18, r19
     62e:	19 f0       	breq	.+6      	; 0x636 <setDuty+0xa8>
			m[i] = dutyH[i];
     630:	28 81       	ld	r18, Y
     632:	39 81       	ldd	r19, Y+1	; 0x01
     634:	03 c0       	rjmp	.+6      	; 0x63c <setDuty+0xae>
		else
			m[i] = dutyL[i];
     636:	2d 91       	ld	r18, X+
     638:	3c 91       	ld	r19, X
     63a:	11 97       	sbiw	r26, 0x01	; 1
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	22 96       	adiw	r28, 0x02	; 2
     644:	32 96       	adiw	r30, 0x02	; 2
     646:	12 96       	adiw	r26, 0x02	; 2
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     648:	80 31       	cpi	r24, 0x10	; 16
     64a:	91 05       	cpc	r25, r1
     64c:	31 f7       	brne	.-52     	; 0x61a <setDuty+0x8c>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	08 95       	ret

0000065a <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	c4 56       	subi	r28, 0x64	; 100
     692:	d1 09       	sbc	r29, r1
     694:	de bf       	out	0x3e, r29	; 62
     696:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     698:	80 91 19 01 	lds	r24, 0x0119
     69c:	90 91 1a 01 	lds	r25, 0x011A
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	90 93 1a 01 	sts	0x011A, r25
     6a6:	80 93 19 01 	sts	0x0119, r24
	if (t > F_CPU / 256 / 1024) {
     6aa:	04 97       	sbiw	r24, 0x04	; 4
     6ac:	08 f4       	brcc	.+2      	; 0x6b0 <__vector_9+0x56>
     6ae:	6e c0       	rjmp	.+220    	; 0x78c <__vector_9+0x132>
		t = 0;
     6b0:	10 92 1a 01 	sts	0x011A, r1
     6b4:	10 92 19 01 	sts	0x0119, r1
		seconds++;
     6b8:	80 91 17 01 	lds	r24, 0x0117
     6bc:	90 91 18 01 	lds	r25, 0x0118
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 18 01 	sts	0x0118, r25
     6c6:	80 93 17 01 	sts	0x0117, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6ca:	80 91 60 00 	lds	r24, 0x0060
     6ce:	90 91 61 00 	lds	r25, 0x0061
     6d2:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     6d6:	18 2f       	mov	r17, r24
		    readEEPROM(p - 1);
     6d8:	80 91 60 00 	lds	r24, 0x0060
     6dc:	90 91 61 00 	lds	r25, 0x0061
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     6e6:	21 2f       	mov	r18, r17
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	32 2f       	mov	r19, r18
     6ec:	22 27       	eor	r18, r18

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     6ee:	28 2b       	or	r18, r24
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     6f0:	2f 3f       	cpi	r18, 0xFF	; 255
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	38 07       	cpc	r19, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <__vector_9+0xa0>
     6f8:	49 c0       	rjmp	.+146    	; 0x78c <__vector_9+0x132>
			if (seconds >= time) {
     6fa:	80 91 17 01 	lds	r24, 0x0117
     6fe:	90 91 18 01 	lds	r25, 0x0118
     702:	82 17       	cp	r24, r18
     704:	93 07       	cpc	r25, r19
     706:	08 f4       	brcc	.+2      	; 0x70a <__vector_9+0xb0>
     708:	41 c0       	rjmp	.+130    	; 0x78c <__vector_9+0x132>
				p -= 2;
     70a:	80 91 60 00 	lds	r24, 0x0060
     70e:	90 91 61 00 	lds	r25, 0x0061
     712:	02 97       	sbiw	r24, 0x02	; 2
     714:	90 93 61 00 	sts	0x0061, r25
     718:	80 93 60 00 	sts	0x0060, r24
     71c:	8e 01       	movw	r16, r28
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	78 01       	movw	r14, r16
     724:	68 01       	movw	r12, r16
     726:	ce 18       	sub	r12, r14
     728:	df 08       	sbc	r13, r15
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
     72a:	80 91 60 00 	lds	r24, 0x0060
     72e:	90 91 61 00 	lds	r25, 0x0061
     732:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     736:	f8 01       	movw	r30, r16
     738:	81 93       	st	Z+, r24
     73a:	8f 01       	movw	r16, r30
     73c:	20 91 60 00 	lds	r18, 0x0060
     740:	30 91 61 00 	lds	r19, 0x0061
					if (cmd[i] == '\n' || cmd[i] == 19) {
     744:	8a 30       	cpi	r24, 0x0A	; 10
     746:	c9 f4       	brne	.+50     	; 0x77a <__vector_9+0x120>
					    cmd[i + 1] = 0;
     748:	fe 01       	movw	r30, r28
     74a:	ec 0d       	add	r30, r12
     74c:	fd 1d       	adc	r31, r13
     74e:	12 82       	std	Z+2, r1	; 0x02
						p--;
     750:	21 50       	subi	r18, 0x01	; 1
     752:	31 09       	sbc	r19, r1
     754:	30 93 61 00 	sts	0x0061, r19
     758:	20 93 60 00 	sts	0x0060, r18
						break;
					}
				}
				print("Auto running command:");
     75c:	88 ed       	ldi	r24, 0xD8	; 216
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
				print(cmd);
     764:	c7 01       	movw	r24, r14
     766:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
				runCmd(cmd);
     76a:	c7 01       	movw	r24, r14
     76c:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
				seconds = 0;
     770:	10 92 18 01 	sts	0x0118, r1
     774:	10 92 17 01 	sts	0x0117, r1
     778:	09 c0       	rjmp	.+18     	; 0x78c <__vector_9+0x132>
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
					cmd[i] = readEEPROM(p);
					if (cmd[i] == '\n' || cmd[i] == 19) {
     77a:	83 31       	cpi	r24, 0x13	; 19
     77c:	29 f3       	breq	.-54     	; 0x748 <__vector_9+0xee>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	31 09       	sbc	r19, r1
     782:	30 93 61 00 	sts	0x0061, r19
     786:	20 93 60 00 	sts	0x0060, r18
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     78a:	cc cf       	rjmp	.-104    	; 0x724 <__vector_9+0xca>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     78c:	cc 59       	subi	r28, 0x9C	; 156
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	0f 90       	pop	r0
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	0f 90       	pop	r0
     7c8:	1f 90       	pop	r1
     7ca:	18 95       	reti

000007cc <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ef 93       	push	r30
     7f4:	ff 93       	push	r31
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     7f6:	80 91 15 01 	lds	r24, 0x0115
     7fa:	90 91 16 01 	lds	r25, 0x0116
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	90 93 16 01 	sts	0x0116, r25
     804:	80 93 15 01 	sts	0x0115, r24
	if (t > F_CPU / 256 / 1024) {
     808:	04 97       	sbiw	r24, 0x04	; 4
     80a:	08 f4       	brcc	.+2      	; 0x80e <__vector_4+0x42>
     80c:	61 c0       	rjmp	.+194    	; 0x8d0 <__vector_4+0x104>
		t = 0;
     80e:	10 92 16 01 	sts	0x0116, r1
     812:	10 92 15 01 	sts	0x0115, r1
		sec++;
     816:	80 91 14 01 	lds	r24, 0x0114
     81a:	8f 5f       	subi	r24, 0xFF	; 255
     81c:	80 93 14 01 	sts	0x0114, r24
		if (sec >= 60) {
     820:	8c 33       	cpi	r24, 0x3C	; 60
     822:	08 f4       	brcc	.+2      	; 0x826 <__vector_4+0x5a>
     824:	55 c0       	rjmp	.+170    	; 0x8d0 <__vector_4+0x104>
			sec = 0;
     826:	10 92 14 01 	sts	0x0114, r1
     82a:	e3 ec       	ldi	r30, 0xC3	; 195
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	c1 ea       	ldi	r28, 0xA1	; 161
     830:	d1 e0       	ldi	r29, 0x01	; 1
     832:	a1 e8       	ldi	r26, 0x81	; 129
     834:	b1 e0       	ldi	r27, 0x01	; 1
			for (i = 0; i < 16; i++) {
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
						PORTA ^= 1 << i;
					} else {
						PORTC ^= 1 << (i - 8);
					}

					if (status & 1 << i) {
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
				if (m[i] > 0) {
     83e:	40 81       	ld	r20, Z
     840:	51 81       	ldd	r21, Z+1	; 0x01
     842:	41 15       	cp	r20, r1
     844:	51 05       	cpc	r21, r1
     846:	29 f0       	breq	.+10     	; 0x852 <__vector_4+0x86>
					m[i]--;
     848:	41 50       	subi	r20, 0x01	; 1
     84a:	51 09       	sbc	r21, r1
     84c:	51 83       	std	Z+1, r21	; 0x01
     84e:	40 83       	st	Z, r20
     850:	37 c0       	rjmp	.+110    	; 0x8c0 <__vector_4+0xf4>
				} else {
					if (i < 8) {
     852:	88 30       	cpi	r24, 0x08	; 8
     854:	91 05       	cpc	r25, r1
     856:	50 f4       	brcc	.+20     	; 0x86c <__vector_4+0xa0>
						PORTA ^= 1 << i;
     858:	6b b3       	in	r22, 0x1b	; 27
     85a:	a9 01       	movw	r20, r18
     85c:	08 2e       	mov	r0, r24
     85e:	01 c0       	rjmp	.+2      	; 0x862 <__vector_4+0x96>
     860:	44 0f       	add	r20, r20
     862:	0a 94       	dec	r0
     864:	ea f7       	brpl	.-6      	; 0x860 <__vector_4+0x94>
     866:	64 27       	eor	r22, r20
     868:	6b bb       	out	0x1b, r22	; 27
     86a:	0c c0       	rjmp	.+24     	; 0x884 <__vector_4+0xb8>
					} else {
						PORTC ^= 1 << (i - 8);
     86c:	65 b3       	in	r22, 0x15	; 21
     86e:	ac 01       	movw	r20, r24
     870:	48 50       	subi	r20, 0x08	; 8
     872:	51 09       	sbc	r21, r1
     874:	89 01       	movw	r16, r18
     876:	02 c0       	rjmp	.+4      	; 0x87c <__vector_4+0xb0>
     878:	00 0f       	add	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	4a 95       	dec	r20
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__vector_4+0xac>
     880:	60 27       	eor	r22, r16
     882:	65 bb       	out	0x15, r22	; 21
					}

					if (status & 1 << i) {
     884:	60 91 c1 01 	lds	r22, 0x01C1
     888:	70 91 c2 01 	lds	r23, 0x01C2
     88c:	a9 01       	movw	r20, r18
     88e:	08 2e       	mov	r0, r24
     890:	02 c0       	rjmp	.+4      	; 0x896 <__vector_4+0xca>
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <__vector_4+0xc6>
     89a:	8a 01       	movw	r16, r20
     89c:	06 23       	and	r16, r22
     89e:	17 23       	and	r17, r23
     8a0:	01 2b       	or	r16, r17
     8a2:	19 f0       	breq	.+6      	; 0x8aa <__vector_4+0xde>
						m[i] = dutyL[i];
     8a4:	08 81       	ld	r16, Y
     8a6:	19 81       	ldd	r17, Y+1	; 0x01
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__vector_4+0xe4>
					} else {
						m[i] = dutyH[i];
     8aa:	0d 91       	ld	r16, X+
     8ac:	1c 91       	ld	r17, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	11 83       	std	Z+1, r17	; 0x01
     8b2:	00 83       	st	Z, r16
					}
					status ^= 1 << i;
     8b4:	46 27       	eor	r20, r22
     8b6:	57 27       	eor	r21, r23
     8b8:	50 93 c2 01 	sts	0x01C2, r21
     8bc:	40 93 c1 01 	sts	0x01C1, r20
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	32 96       	adiw	r30, 0x02	; 2
     8c4:	22 96       	adiw	r28, 0x02	; 2
     8c6:	12 96       	adiw	r26, 0x02	; 2
     8c8:	80 31       	cpi	r24, 0x10	; 16
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_4+0x104>
     8ce:	b7 cf       	rjmp	.-146    	; 0x83e <__vector_4+0x72>
					status ^= 1 << i;
				}
			}
		}
	}
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_11>:

ISR(USART_RXC_vect)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	c4 56       	subi	r28, 0x64	; 100
     932:	d1 09       	sbc	r29, r1
     934:	de bf       	out	0x3e, r29	; 62
     936:	cd bf       	out	0x3d, r28	; 61
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	7c 01       	movw	r14, r24
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	10 e0       	ldi	r17, 0x00	; 0
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
     942:	0e 94 6a 05 	call	0xad4	; 0xad4 <receiveUSART>
     946:	f7 01       	movw	r30, r14
     948:	81 93       	st	Z+, r24
     94a:	7f 01       	movw	r14, r30
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     94c:	83 31       	cpi	r24, 0x13	; 19
     94e:	41 f4       	brne	.+16     	; 0x960 <__vector_11+0x66>
			codeUSART[i] = '\0';
     950:	e1 e0       	ldi	r30, 0x01	; 1
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	e0 0f       	add	r30, r16
     95a:	f1 1f       	adc	r31, r17
     95c:	10 82       	st	Z, r1
			break;
     95e:	07 c0       	rjmp	.+14     	; 0x96e <__vector_11+0x74>
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
		codeUSART[i] = receiveUSART();
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	b1 f3       	breq	.-20     	; 0x950 <__vector_11+0x56>
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     968:	04 36       	cpi	r16, 0x64	; 100
     96a:	11 05       	cpc	r17, r1
     96c:	51 f7       	brne	.-44     	; 0x942 <__vector_11+0x48>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	88 23       	and	r24, r24
     972:	e1 f0       	breq	.+56     	; 0x9ac <__vector_11+0xb2>
		print("\nReceived:\n");
     974:	8e ee       	ldi	r24, 0xEE	; 238
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
     97c:	6e 01       	movw	r12, r28
     97e:	f5 e6       	ldi	r31, 0x65	; 101
     980:	cf 0e       	add	r12, r31
     982:	d1 1c       	adc	r13, r1
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	78 01       	movw	r14, r16
		for (i = 0; i < MAXCMDLEN; i++) {
			sendUSART(codeUSART[i]);
     98c:	f8 01       	movw	r30, r16
     98e:	81 91       	ld	r24, Z+
     990:	8f 01       	movw	r16, r30
     992:	0e 94 66 05 	call	0xacc	; 0xacc <sendUSART>
			if (codeUSART[i] == '\0')
     996:	f7 01       	movw	r30, r14
     998:	80 81       	ld	r24, Z
     99a:	88 23       	and	r24, r24
     99c:	19 f0       	breq	.+6      	; 0x9a4 <__vector_11+0xaa>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     99e:	0c 15       	cp	r16, r12
     9a0:	1d 05       	cpc	r17, r13
     9a2:	99 f7       	brne	.-26     	; 0x98a <__vector_11+0x90>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     9a4:	8a ea       	ldi	r24, 0xAA	; 170
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
	}

	runCmd(codeUSART);
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
}
     9b4:	cc 59       	subi	r28, 0x9C	; 156
     9b6:	df 4f       	sbci	r29, 0xFF	; 255
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <initUSART>:

void initUSART()
{
	UCSRA |= (1 << U2X);
     9f4:	59 9a       	sbi	0x0b, 1	; 11
	UBRRH = 0;
     9f6:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;		// 9600Hz on 1MHz F_CPU
     9f8:	8c e0       	ldi	r24, 0x0C	; 12
     9fa:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     9fc:	88 e9       	ldi	r24, 0x98	; 152
     9fe:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     a00:	86 e8       	ldi	r24, 0x86	; 134
     a02:	80 bd       	out	0x20, r24	; 32
     a04:	08 95       	ret

00000a06 <initTimer0>:
}

void initTimer0()
{
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     a0a:	12 be       	out	0x32, r1	; 50
	TIMSK |= _BV(TOIE0);
     a0c:	89 b7       	in	r24, 0x39	; 57
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	89 bf       	out	0x39, r24	; 57
     a12:	08 95       	ret

00000a14 <initTimer2>:
}

void initTimer2()
{
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
     a18:	14 bc       	out	0x24, r1	; 36
	TIMSK |= _BV(TOIE2);
     a1a:	89 b7       	in	r24, 0x39	; 57
     a1c:	80 64       	ori	r24, 0x40	; 64
     a1e:	89 bf       	out	0x39, r24	; 57
     a20:	08 95       	ret

00000a22 <main>:

int main()
{
	uint8_t i;

	DDRA = 0xff;
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
     a26:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
     a28:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
     a2a:	15 ba       	out	0x15, r1	; 21
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
     a30:	8b b3       	in	r24, 0x1b	; 27
     a32:	86 95       	lsr	r24
     a34:	8b bb       	out	0x1b, r24	; 27
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a36:	1b b3       	in	r17, 0x1b	; 27
     a38:	ce 01       	movw	r24, r28
     a3a:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a3e:	20 e8       	ldi	r18, 0x80	; 128
     a40:	82 9f       	mul	r24, r18
     a42:	c0 01       	movw	r24, r0
     a44:	11 24       	eor	r1, r1
     a46:	81 2b       	or	r24, r17
     a48:	8b bb       	out	0x1b, r24	; 27
     a4a:	21 96       	adiw	r28, 0x01	; 1
	DDRA = 0xff;
	DDRC = 0xff;
	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
     a4c:	c8 30       	cpi	r28, 0x08	; 8
     a4e:	d1 05       	cpc	r29, r1
     a50:	79 f7       	brne	.-34     	; 0xa30 <main+0xe>
     a52:	c8 e0       	ldi	r28, 0x08	; 8
     a54:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
		PORTC = PORTC >> 1;
     a56:	85 b3       	in	r24, 0x15	; 21
     a58:	86 95       	lsr	r24
     a5a:	85 bb       	out	0x15, r24	; 21
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
     a5c:	15 b3       	in	r17, 0x15	; 21
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a64:	20 e8       	ldi	r18, 0x80	; 128
     a66:	82 9f       	mul	r24, r18
     a68:	c0 01       	movw	r24, r0
     a6a:	11 24       	eor	r1, r1
     a6c:	81 2b       	or	r24, r17
     a6e:	85 bb       	out	0x15, r24	; 21
     a70:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
     a72:	c0 31       	cpi	r28, 0x10	; 16
     a74:	d1 05       	cpc	r29, r1
     a76:	79 f7       	brne	.-34     	; 0xa56 <main+0x34>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	90 93 80 01 	sts	0x0180, r25
     a80:	80 93 7f 01 	sts	0x017F, r24
     a84:	80 91 7f 01 	lds	r24, 0x017F
     a88:	90 91 80 01 	lds	r25, 0x0180
     a8c:	0e 94 c0 02 	call	0x580	; 0x580 <readEEPROM>
     a90:	8f 3f       	cpi	r24, 0xFF	; 255
     a92:	31 f0       	breq	.+12     	; 0xaa0 <main+0x7e>
     a94:	80 91 7f 01 	lds	r24, 0x017F
     a98:	90 91 80 01 	lds	r25, 0x0180
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	ee cf       	rjmp	.-36     	; 0xa7c <main+0x5a>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
     aa0:	25 b3       	in	r18, 0x15	; 21
     aa2:	8b b3       	in	r24, 0x1b	; 27
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	92 2b       	or	r25, r18
     aa8:	90 93 c2 01 	sts	0x01C2, r25
     aac:	80 93 c1 01 	sts	0x01C1, r24

	initUSART();
     ab0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <initUSART>

	setDuty();
     ab4:	0e 94 c7 02 	call	0x58e	; 0x58e <setDuty>

	initTimer0();
     ab8:	0e 94 03 05 	call	0xa06	; 0xa06 <initTimer0>

	initTimer2();
     abc:	0e 94 0a 05 	call	0xa14	; 0xa14 <initTimer2>

	sei();
     ac0:	78 94       	sei

	print("\nEntering the main loop\n");
     ac2:	8a ef       	ldi	r24, 0xFA	; 250
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 6e 05 	call	0xadc	; 0xadc <print>
     aca:	ff cf       	rjmp	.-2      	; 0xaca <main+0xa8>

00000acc <sendUSART>:

#include "usart.h"

void sendUSART(unsigned char data)
{
	while (!(UCSRA & (1 << UDRE))) ;
     acc:	5d 9b       	sbis	0x0b, 5	; 11
     ace:	fe cf       	rjmp	.-4      	; 0xacc <sendUSART>
	UDR = data;
     ad0:	8c b9       	out	0x0c, r24	; 12
     ad2:	08 95       	ret

00000ad4 <receiveUSART>:
}

unsigned char receiveUSART()
{
	while (!(UCSRA & (1 << RXC))) ;
     ad4:	5f 9b       	sbis	0x0b, 7	; 11
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <receiveUSART>
	return UDR;
     ad8:	8c b1       	in	r24, 0x0c	; 12
}
     ada:	08 95       	ret

00000adc <print>:

void print(char *s)
{
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
	while (*s) {
     ae2:	89 91       	ld	r24, Y+
     ae4:	88 23       	and	r24, r24
     ae6:	19 f0       	breq	.+6      	; 0xaee <print+0x12>
		sendUSART(*s);
     ae8:	0e 94 66 05 	call	0xacc	; 0xacc <sendUSART>
     aec:	fa cf       	rjmp	.-12     	; 0xae2 <print+0x6>
		s++;
	}
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <puts>:
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	e0 91 49 02 	lds	r30, 0x0249
     b00:	f0 91 4a 02 	lds	r31, 0x024A
     b04:	23 81       	ldd	r18, Z+3	; 0x03
     b06:	21 ff       	sbrs	r18, 1
     b08:	1b c0       	rjmp	.+54     	; 0xb40 <puts+0x4c>
     b0a:	ec 01       	movw	r28, r24
     b0c:	00 e0       	ldi	r16, 0x00	; 0
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	89 91       	ld	r24, Y+
     b12:	60 91 49 02 	lds	r22, 0x0249
     b16:	70 91 4a 02 	lds	r23, 0x024A
     b1a:	db 01       	movw	r26, r22
     b1c:	18 96       	adiw	r26, 0x08	; 8
     b1e:	ed 91       	ld	r30, X+
     b20:	fc 91       	ld	r31, X
     b22:	19 97       	sbiw	r26, 0x09	; 9
     b24:	88 23       	and	r24, r24
     b26:	31 f0       	breq	.+12     	; 0xb34 <puts+0x40>
     b28:	09 95       	icall
     b2a:	89 2b       	or	r24, r25
     b2c:	89 f3       	breq	.-30     	; 0xb10 <puts+0x1c>
     b2e:	0f ef       	ldi	r16, 0xFF	; 255
     b30:	1f ef       	ldi	r17, 0xFF	; 255
     b32:	ee cf       	rjmp	.-36     	; 0xb10 <puts+0x1c>
     b34:	8a e0       	ldi	r24, 0x0A	; 10
     b36:	09 95       	icall
     b38:	89 2b       	or	r24, r25
     b3a:	11 f4       	brne	.+4      	; 0xb40 <puts+0x4c>
     b3c:	c8 01       	movw	r24, r16
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <puts+0x50>
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	08 95       	ret

00000b4e <sprintf>:
     b4e:	ae e0       	ldi	r26, 0x0E	; 14
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ed ea       	ldi	r30, 0xAD	; 173
     b54:	f5 e0       	ldi	r31, 0x05	; 5
     b56:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__prologue_saves__+0x1c>
     b5a:	0d 89       	ldd	r16, Y+21	; 0x15
     b5c:	1e 89       	ldd	r17, Y+22	; 0x16
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	8c 83       	std	Y+4, r24	; 0x04
     b62:	1a 83       	std	Y+2, r17	; 0x02
     b64:	09 83       	std	Y+1, r16	; 0x01
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	9f e7       	ldi	r25, 0x7F	; 127
     b6a:	9e 83       	std	Y+6, r25	; 0x06
     b6c:	8d 83       	std	Y+5, r24	; 0x05
     b6e:	ae 01       	movw	r20, r28
     b70:	47 5e       	subi	r20, 0xE7	; 231
     b72:	5f 4f       	sbci	r21, 0xFF	; 255
     b74:	6f 89       	ldd	r22, Y+23	; 0x17
     b76:	78 8d       	ldd	r23, Y+24	; 0x18
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vfprintf>
     b80:	ef 81       	ldd	r30, Y+7	; 0x07
     b82:	f8 85       	ldd	r31, Y+8	; 0x08
     b84:	e0 0f       	add	r30, r16
     b86:	f1 1f       	adc	r31, r17
     b88:	10 82       	st	Z, r1
     b8a:	2e 96       	adiw	r28, 0x0e	; 14
     b8c:	e4 e0       	ldi	r30, 0x04	; 4
     b8e:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__epilogue_restores__+0x1c>

00000b92 <sscanf>:
     b92:	ae e0       	ldi	r26, 0x0E	; 14
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ef ec       	ldi	r30, 0xCF	; 207
     b98:	f5 e0       	ldi	r31, 0x05	; 5
     b9a:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__prologue_saves__+0x20>
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	8c 83       	std	Y+4, r24	; 0x04
     ba2:	8b 89       	ldd	r24, Y+19	; 0x13
     ba4:	9c 89       	ldd	r25, Y+20	; 0x14
     ba6:	9a 83       	std	Y+2, r25	; 0x02
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	ae 01       	movw	r20, r28
     bac:	49 5e       	subi	r20, 0xE9	; 233
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	6d 89       	ldd	r22, Y+21	; 0x15
     bb2:	7e 89       	ldd	r23, Y+22	; 0x16
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0e 94 32 09 	call	0x1264	; 0x1264 <vfscanf>
     bbc:	2e 96       	adiw	r28, 0x0e	; 14
     bbe:	e2 e0       	ldi	r30, 0x02	; 2
     bc0:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__epilogue_restores__+0x20>

00000bc4 <vfprintf>:
     bc4:	ac e0       	ldi	r26, 0x0C	; 12
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__prologue_saves__>
     bd0:	7c 01       	movw	r14, r24
     bd2:	6b 01       	movw	r12, r22
     bd4:	8a 01       	movw	r16, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	17 82       	std	Z+7, r1	; 0x07
     bda:	16 82       	std	Z+6, r1	; 0x06
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	81 ff       	sbrs	r24, 1
     be0:	bd c1       	rjmp	.+890    	; 0xf5c <vfprintf+0x398>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	4c 01       	movw	r8, r24
     be8:	f7 01       	movw	r30, r14
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	f6 01       	movw	r30, r12
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	6f 01       	movw	r12, r30
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <vfprintf+0x3a>
     bfc:	ab c1       	rjmp	.+854    	; 0xf54 <vfprintf+0x390>
     bfe:	85 32       	cpi	r24, 0x25	; 37
     c00:	39 f4       	brne	.+14     	; 0xc10 <vfprintf+0x4c>
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	6f 01       	movw	r12, r30
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	29 f4       	brne	.+10     	; 0xc1a <vfprintf+0x56>
     c10:	b7 01       	movw	r22, r14
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     c18:	e7 cf       	rjmp	.-50     	; 0xbe8 <vfprintf+0x24>
     c1a:	51 2c       	mov	r5, r1
     c1c:	31 2c       	mov	r3, r1
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	20 32       	cpi	r18, 0x20	; 32
     c22:	a0 f4       	brcc	.+40     	; 0xc4c <vfprintf+0x88>
     c24:	8b 32       	cpi	r24, 0x2B	; 43
     c26:	69 f0       	breq	.+26     	; 0xc42 <vfprintf+0x7e>
     c28:	30 f4       	brcc	.+12     	; 0xc36 <vfprintf+0x72>
     c2a:	80 32       	cpi	r24, 0x20	; 32
     c2c:	59 f0       	breq	.+22     	; 0xc44 <vfprintf+0x80>
     c2e:	83 32       	cpi	r24, 0x23	; 35
     c30:	69 f4       	brne	.+26     	; 0xc4c <vfprintf+0x88>
     c32:	20 61       	ori	r18, 0x10	; 16
     c34:	2c c0       	rjmp	.+88     	; 0xc8e <vfprintf+0xca>
     c36:	8d 32       	cpi	r24, 0x2D	; 45
     c38:	39 f0       	breq	.+14     	; 0xc48 <vfprintf+0x84>
     c3a:	80 33       	cpi	r24, 0x30	; 48
     c3c:	39 f4       	brne	.+14     	; 0xc4c <vfprintf+0x88>
     c3e:	21 60       	ori	r18, 0x01	; 1
     c40:	26 c0       	rjmp	.+76     	; 0xc8e <vfprintf+0xca>
     c42:	22 60       	ori	r18, 0x02	; 2
     c44:	24 60       	ori	r18, 0x04	; 4
     c46:	23 c0       	rjmp	.+70     	; 0xc8e <vfprintf+0xca>
     c48:	28 60       	ori	r18, 0x08	; 8
     c4a:	21 c0       	rjmp	.+66     	; 0xc8e <vfprintf+0xca>
     c4c:	27 fd       	sbrc	r18, 7
     c4e:	27 c0       	rjmp	.+78     	; 0xc9e <vfprintf+0xda>
     c50:	30 ed       	ldi	r19, 0xD0	; 208
     c52:	38 0f       	add	r19, r24
     c54:	3a 30       	cpi	r19, 0x0A	; 10
     c56:	78 f4       	brcc	.+30     	; 0xc76 <vfprintf+0xb2>
     c58:	26 ff       	sbrs	r18, 6
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0xa4>
     c5c:	fa e0       	ldi	r31, 0x0A	; 10
     c5e:	5f 9e       	mul	r5, r31
     c60:	30 0d       	add	r19, r0
     c62:	11 24       	eor	r1, r1
     c64:	53 2e       	mov	r5, r19
     c66:	13 c0       	rjmp	.+38     	; 0xc8e <vfprintf+0xca>
     c68:	8a e0       	ldi	r24, 0x0A	; 10
     c6a:	38 9e       	mul	r3, r24
     c6c:	30 0d       	add	r19, r0
     c6e:	11 24       	eor	r1, r1
     c70:	33 2e       	mov	r3, r19
     c72:	20 62       	ori	r18, 0x20	; 32
     c74:	0c c0       	rjmp	.+24     	; 0xc8e <vfprintf+0xca>
     c76:	8e 32       	cpi	r24, 0x2E	; 46
     c78:	21 f4       	brne	.+8      	; 0xc82 <vfprintf+0xbe>
     c7a:	26 fd       	sbrc	r18, 6
     c7c:	6b c1       	rjmp	.+726    	; 0xf54 <vfprintf+0x390>
     c7e:	20 64       	ori	r18, 0x40	; 64
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <vfprintf+0xca>
     c82:	8c 36       	cpi	r24, 0x6C	; 108
     c84:	11 f4       	brne	.+4      	; 0xc8a <vfprintf+0xc6>
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0xca>
     c8a:	88 36       	cpi	r24, 0x68	; 104
     c8c:	41 f4       	brne	.+16     	; 0xc9e <vfprintf+0xda>
     c8e:	f6 01       	movw	r30, r12
     c90:	93 fd       	sbrc	r25, 3
     c92:	85 91       	lpm	r24, Z+
     c94:	93 ff       	sbrs	r25, 3
     c96:	81 91       	ld	r24, Z+
     c98:	6f 01       	movw	r12, r30
     c9a:	81 11       	cpse	r24, r1
     c9c:	c1 cf       	rjmp	.-126    	; 0xc20 <vfprintf+0x5c>
     c9e:	98 2f       	mov	r25, r24
     ca0:	9f 7d       	andi	r25, 0xDF	; 223
     ca2:	95 54       	subi	r25, 0x45	; 69
     ca4:	93 30       	cpi	r25, 0x03	; 3
     ca6:	28 f4       	brcc	.+10     	; 0xcb2 <vfprintf+0xee>
     ca8:	0c 5f       	subi	r16, 0xFC	; 252
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	ff e3       	ldi	r31, 0x3F	; 63
     cae:	f9 83       	std	Y+1, r31	; 0x01
     cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x108>
     cb2:	83 36       	cpi	r24, 0x63	; 99
     cb4:	31 f0       	breq	.+12     	; 0xcc2 <vfprintf+0xfe>
     cb6:	83 37       	cpi	r24, 0x73	; 115
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <vfprintf+0x112>
     cba:	83 35       	cpi	r24, 0x53	; 83
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <vfprintf+0xfc>
     cbe:	5b c0       	rjmp	.+182    	; 0xd76 <vfprintf+0x1b2>
     cc0:	22 c0       	rjmp	.+68     	; 0xd06 <vfprintf+0x142>
     cc2:	f8 01       	movw	r30, r16
     cc4:	80 81       	ld	r24, Z
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	0e 5f       	subi	r16, 0xFE	; 254
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	44 24       	eor	r4, r4
     cce:	43 94       	inc	r4
     cd0:	51 2c       	mov	r5, r1
     cd2:	54 01       	movw	r10, r8
     cd4:	15 c0       	rjmp	.+42     	; 0xd00 <vfprintf+0x13c>
     cd6:	38 01       	movw	r6, r16
     cd8:	f2 e0       	ldi	r31, 0x02	; 2
     cda:	6f 0e       	add	r6, r31
     cdc:	71 1c       	adc	r7, r1
     cde:	f8 01       	movw	r30, r16
     ce0:	a0 80       	ld	r10, Z
     ce2:	b1 80       	ldd	r11, Z+1	; 0x01
     ce4:	26 ff       	sbrs	r18, 6
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <vfprintf+0x12a>
     ce8:	65 2d       	mov	r22, r5
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <vfprintf+0x12e>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	c5 01       	movw	r24, r10
     cf4:	2c 87       	std	Y+12, r18	; 0x0c
     cf6:	0e 94 87 0a 	call	0x150e	; 0x150e <strnlen>
     cfa:	2c 01       	movw	r4, r24
     cfc:	83 01       	movw	r16, r6
     cfe:	2c 85       	ldd	r18, Y+12	; 0x0c
     d00:	2f 77       	andi	r18, 0x7F	; 127
     d02:	22 2e       	mov	r2, r18
     d04:	17 c0       	rjmp	.+46     	; 0xd34 <vfprintf+0x170>
     d06:	38 01       	movw	r6, r16
     d08:	f2 e0       	ldi	r31, 0x02	; 2
     d0a:	6f 0e       	add	r6, r31
     d0c:	71 1c       	adc	r7, r1
     d0e:	f8 01       	movw	r30, r16
     d10:	a0 80       	ld	r10, Z
     d12:	b1 80       	ldd	r11, Z+1	; 0x01
     d14:	26 ff       	sbrs	r18, 6
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x15a>
     d18:	65 2d       	mov	r22, r5
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x15e>
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	c5 01       	movw	r24, r10
     d24:	2c 87       	std	Y+12, r18	; 0x0c
     d26:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <strnlen_P>
     d2a:	2c 01       	movw	r4, r24
     d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2e:	20 68       	ori	r18, 0x80	; 128
     d30:	22 2e       	mov	r2, r18
     d32:	83 01       	movw	r16, r6
     d34:	23 fc       	sbrc	r2, 3
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <vfprintf+0x1aa>
     d38:	83 2d       	mov	r24, r3
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	48 16       	cp	r4, r24
     d3e:	59 06       	cpc	r5, r25
     d40:	b0 f4       	brcc	.+44     	; 0xd6e <vfprintf+0x1aa>
     d42:	b7 01       	movw	r22, r14
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     d4c:	3a 94       	dec	r3
     d4e:	f4 cf       	rjmp	.-24     	; 0xd38 <vfprintf+0x174>
     d50:	f5 01       	movw	r30, r10
     d52:	27 fc       	sbrc	r2, 7
     d54:	85 91       	lpm	r24, Z+
     d56:	27 fe       	sbrs	r2, 7
     d58:	81 91       	ld	r24, Z+
     d5a:	5f 01       	movw	r10, r30
     d5c:	b7 01       	movw	r22, r14
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     d64:	31 10       	cpse	r3, r1
     d66:	3a 94       	dec	r3
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	4f 1a       	sub	r4, r31
     d6c:	51 08       	sbc	r5, r1
     d6e:	41 14       	cp	r4, r1
     d70:	51 04       	cpc	r5, r1
     d72:	71 f7       	brne	.-36     	; 0xd50 <vfprintf+0x18c>
     d74:	e5 c0       	rjmp	.+458    	; 0xf40 <vfprintf+0x37c>
     d76:	84 36       	cpi	r24, 0x64	; 100
     d78:	11 f0       	breq	.+4      	; 0xd7e <vfprintf+0x1ba>
     d7a:	89 36       	cpi	r24, 0x69	; 105
     d7c:	39 f5       	brne	.+78     	; 0xdcc <vfprintf+0x208>
     d7e:	f8 01       	movw	r30, r16
     d80:	27 ff       	sbrs	r18, 7
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <vfprintf+0x1ce>
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	0c 5f       	subi	r16, 0xFC	; 252
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <vfprintf+0x1de>
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	88 27       	eor	r24, r24
     d98:	77 fd       	sbrc	r23, 7
     d9a:	80 95       	com	r24
     d9c:	98 2f       	mov	r25, r24
     d9e:	0e 5f       	subi	r16, 0xFE	; 254
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	2f 76       	andi	r18, 0x6F	; 111
     da4:	b2 2e       	mov	r11, r18
     da6:	97 ff       	sbrs	r25, 7
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <vfprintf+0x1f8>
     daa:	90 95       	com	r25
     dac:	80 95       	com	r24
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	20 68       	ori	r18, 0x80	; 128
     dba:	b2 2e       	mov	r11, r18
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a4 01       	movw	r20, r8
     dc2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__ultoa_invert>
     dc6:	a8 2e       	mov	r10, r24
     dc8:	a8 18       	sub	r10, r8
     dca:	44 c0       	rjmp	.+136    	; 0xe54 <vfprintf+0x290>
     dcc:	85 37       	cpi	r24, 0x75	; 117
     dce:	29 f4       	brne	.+10     	; 0xdda <vfprintf+0x216>
     dd0:	2f 7e       	andi	r18, 0xEF	; 239
     dd2:	b2 2e       	mov	r11, r18
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	25 c0       	rjmp	.+74     	; 0xe24 <vfprintf+0x260>
     dda:	f2 2f       	mov	r31, r18
     ddc:	f9 7f       	andi	r31, 0xF9	; 249
     dde:	bf 2e       	mov	r11, r31
     de0:	8f 36       	cpi	r24, 0x6F	; 111
     de2:	c1 f0       	breq	.+48     	; 0xe14 <vfprintf+0x250>
     de4:	18 f4       	brcc	.+6      	; 0xdec <vfprintf+0x228>
     de6:	88 35       	cpi	r24, 0x58	; 88
     de8:	79 f0       	breq	.+30     	; 0xe08 <vfprintf+0x244>
     dea:	b4 c0       	rjmp	.+360    	; 0xf54 <vfprintf+0x390>
     dec:	80 37       	cpi	r24, 0x70	; 112
     dee:	19 f0       	breq	.+6      	; 0xdf6 <vfprintf+0x232>
     df0:	88 37       	cpi	r24, 0x78	; 120
     df2:	21 f0       	breq	.+8      	; 0xdfc <vfprintf+0x238>
     df4:	af c0       	rjmp	.+350    	; 0xf54 <vfprintf+0x390>
     df6:	2f 2f       	mov	r18, r31
     df8:	20 61       	ori	r18, 0x10	; 16
     dfa:	b2 2e       	mov	r11, r18
     dfc:	b4 fe       	sbrs	r11, 4
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x256>
     e00:	8b 2d       	mov	r24, r11
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	b8 2e       	mov	r11, r24
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x256>
     e08:	24 ff       	sbrs	r18, 4
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <vfprintf+0x25c>
     e0c:	9f 2f       	mov	r25, r31
     e0e:	96 60       	ori	r25, 0x06	; 6
     e10:	b9 2e       	mov	r11, r25
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x25c>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x260>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x260>
     e20:	20 e1       	ldi	r18, 0x10	; 16
     e22:	32 e0       	ldi	r19, 0x02	; 2
     e24:	f8 01       	movw	r30, r16
     e26:	b7 fe       	sbrs	r11, 7
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x274>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0c 5f       	subi	r16, 0xFC	; 252
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x280>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 5f       	subi	r16, 0xFE	; 254
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	a4 01       	movw	r20, r8
     e46:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__ultoa_invert>
     e4a:	a8 2e       	mov	r10, r24
     e4c:	a8 18       	sub	r10, r8
     e4e:	fb 2d       	mov	r31, r11
     e50:	ff 77       	andi	r31, 0x7F	; 127
     e52:	bf 2e       	mov	r11, r31
     e54:	b6 fe       	sbrs	r11, 6
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <vfprintf+0x2aa>
     e58:	2b 2d       	mov	r18, r11
     e5a:	2e 7f       	andi	r18, 0xFE	; 254
     e5c:	a5 14       	cp	r10, r5
     e5e:	50 f4       	brcc	.+20     	; 0xe74 <vfprintf+0x2b0>
     e60:	b4 fe       	sbrs	r11, 4
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <vfprintf+0x2b4>
     e64:	b2 fc       	sbrc	r11, 2
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <vfprintf+0x2b4>
     e68:	2b 2d       	mov	r18, r11
     e6a:	2e 7e       	andi	r18, 0xEE	; 238
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <vfprintf+0x2b4>
     e6e:	7a 2c       	mov	r7, r10
     e70:	2b 2d       	mov	r18, r11
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <vfprintf+0x2b6>
     e74:	7a 2c       	mov	r7, r10
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <vfprintf+0x2b6>
     e78:	75 2c       	mov	r7, r5
     e7a:	24 ff       	sbrs	r18, 4
     e7c:	0d c0       	rjmp	.+26     	; 0xe98 <vfprintf+0x2d4>
     e7e:	fe 01       	movw	r30, r28
     e80:	ea 0d       	add	r30, r10
     e82:	f1 1d       	adc	r31, r1
     e84:	80 81       	ld	r24, Z
     e86:	80 33       	cpi	r24, 0x30	; 48
     e88:	11 f4       	brne	.+4      	; 0xe8e <vfprintf+0x2ca>
     e8a:	29 7e       	andi	r18, 0xE9	; 233
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <vfprintf+0x2dc>
     e8e:	22 ff       	sbrs	r18, 2
     e90:	06 c0       	rjmp	.+12     	; 0xe9e <vfprintf+0x2da>
     e92:	73 94       	inc	r7
     e94:	73 94       	inc	r7
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <vfprintf+0x2dc>
     e98:	82 2f       	mov	r24, r18
     e9a:	86 78       	andi	r24, 0x86	; 134
     e9c:	09 f0       	breq	.+2      	; 0xea0 <vfprintf+0x2dc>
     e9e:	73 94       	inc	r7
     ea0:	23 fd       	sbrc	r18, 3
     ea2:	13 c0       	rjmp	.+38     	; 0xeca <vfprintf+0x306>
     ea4:	20 ff       	sbrs	r18, 0
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0x2f0>
     ea8:	5a 2c       	mov	r5, r10
     eaa:	73 14       	cp	r7, r3
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <vfprintf+0x2f0>
     eae:	53 0c       	add	r5, r3
     eb0:	57 18       	sub	r5, r7
     eb2:	73 2c       	mov	r7, r3
     eb4:	73 14       	cp	r7, r3
     eb6:	68 f4       	brcc	.+26     	; 0xed2 <vfprintf+0x30e>
     eb8:	b7 01       	movw	r22, r14
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2c 87       	std	Y+12, r18	; 0x0c
     ec0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     ec4:	73 94       	inc	r7
     ec6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec8:	f5 cf       	rjmp	.-22     	; 0xeb4 <vfprintf+0x2f0>
     eca:	73 14       	cp	r7, r3
     ecc:	10 f4       	brcc	.+4      	; 0xed2 <vfprintf+0x30e>
     ece:	37 18       	sub	r3, r7
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <vfprintf+0x310>
     ed2:	31 2c       	mov	r3, r1
     ed4:	24 ff       	sbrs	r18, 4
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <vfprintf+0x338>
     ed8:	b7 01       	movw	r22, r14
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	2c 87       	std	Y+12, r18	; 0x0c
     ee0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee6:	22 ff       	sbrs	r18, 2
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <vfprintf+0x354>
     eea:	21 ff       	sbrs	r18, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x330>
     eee:	88 e5       	ldi	r24, 0x58	; 88
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x334>
     ef4:	88 e7       	ldi	r24, 0x78	; 120
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b7 01       	movw	r22, r14
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <vfprintf+0x350>
     efc:	82 2f       	mov	r24, r18
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	59 f0       	breq	.+22     	; 0xf18 <vfprintf+0x354>
     f02:	21 fd       	sbrc	r18, 1
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x346>
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <vfprintf+0x348>
     f0a:	8b e2       	ldi	r24, 0x2B	; 43
     f0c:	27 fd       	sbrc	r18, 7
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	b7 01       	movw	r22, r14
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     f18:	a5 14       	cp	r10, r5
     f1a:	38 f4       	brcc	.+14     	; 0xf2a <vfprintf+0x366>
     f1c:	b7 01       	movw	r22, r14
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     f26:	5a 94       	dec	r5
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <vfprintf+0x354>
     f2a:	aa 94       	dec	r10
     f2c:	f4 01       	movw	r30, r8
     f2e:	ea 0d       	add	r30, r10
     f30:	f1 1d       	adc	r31, r1
     f32:	80 81       	ld	r24, Z
     f34:	b7 01       	movw	r22, r14
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     f3c:	a1 10       	cpse	r10, r1
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <vfprintf+0x366>
     f40:	33 20       	and	r3, r3
     f42:	09 f4       	brne	.+2      	; 0xf46 <vfprintf+0x382>
     f44:	51 ce       	rjmp	.-862    	; 0xbe8 <vfprintf+0x24>
     f46:	b7 01       	movw	r22, r14
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <fputc>
     f50:	3a 94       	dec	r3
     f52:	f6 cf       	rjmp	.-20     	; 0xf40 <vfprintf+0x37c>
     f54:	f7 01       	movw	r30, r14
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x39c>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	2c 96       	adiw	r28, 0x0c	; 12
     f62:	e2 e1       	ldi	r30, 0x12	; 18
     f64:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__epilogue_restores__>

00000f68 <putval>:
     f68:	20 fd       	sbrc	r18, 0
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <putval+0x16>
     f6c:	fc 01       	movw	r30, r24
     f6e:	23 fd       	sbrc	r18, 3
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <putval+0x14>
     f72:	22 ff       	sbrs	r18, 2
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <putval+0x12>
     f76:	73 83       	std	Z+3, r23	; 0x03
     f78:	62 83       	std	Z+2, r22	; 0x02
     f7a:	51 83       	std	Z+1, r21	; 0x01
     f7c:	40 83       	st	Z, r20
     f7e:	08 95       	ret

00000f80 <mulacc>:
     f80:	44 fd       	sbrc	r20, 4
     f82:	10 c0       	rjmp	.+32     	; 0xfa4 <mulacc+0x24>
     f84:	46 fd       	sbrc	r20, 6
     f86:	10 c0       	rjmp	.+32     	; 0xfa8 <mulacc+0x28>
     f88:	db 01       	movw	r26, r22
     f8a:	fc 01       	movw	r30, r24
     f8c:	aa 0f       	add	r26, r26
     f8e:	bb 1f       	adc	r27, r27
     f90:	ee 1f       	adc	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	10 94       	com	r1
     f96:	d1 f7       	brne	.-12     	; 0xf8c <mulacc+0xc>
     f98:	6a 0f       	add	r22, r26
     f9a:	7b 1f       	adc	r23, r27
     f9c:	8e 1f       	adc	r24, r30
     f9e:	9f 1f       	adc	r25, r31
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <mulacc+0x2a>
     fa4:	33 e0       	ldi	r19, 0x03	; 3
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <mulacc+0x2a>
     fa8:	34 e0       	ldi	r19, 0x04	; 4
     faa:	66 0f       	add	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	31 50       	subi	r19, 0x01	; 1
     fb4:	d1 f7       	brne	.-12     	; 0xfaa <mulacc+0x2a>
     fb6:	62 0f       	add	r22, r18
     fb8:	71 1d       	adc	r23, r1
     fba:	81 1d       	adc	r24, r1
     fbc:	91 1d       	adc	r25, r1
     fbe:	08 95       	ret

00000fc0 <skip_spaces>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	8c 01       	movw	r16, r24
     fca:	c8 01       	movw	r24, r16
     fcc:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
     fd0:	ec 01       	movw	r28, r24
     fd2:	97 fd       	sbrc	r25, 7
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <skip_spaces+0x26>
     fd6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
     fda:	89 2b       	or	r24, r25
     fdc:	b1 f7       	brne	.-20     	; 0xfca <skip_spaces+0xa>
     fde:	b8 01       	movw	r22, r16
     fe0:	ce 01       	movw	r24, r28
     fe2:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
     fe6:	ce 01       	movw	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <conv_int>:
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	a6 2e       	mov	r10, r22
    100c:	4a 01       	movw	r8, r20
    100e:	02 2f       	mov	r16, r18
    1010:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1014:	ac 01       	movw	r20, r24
    1016:	55 27       	eor	r21, r21
    1018:	4b 32       	cpi	r20, 0x2B	; 43
    101a:	51 05       	cpc	r21, r1
    101c:	21 f0       	breq	.+8      	; 0x1026 <conv_int+0x34>
    101e:	4d 32       	cpi	r20, 0x2D	; 45
    1020:	51 05       	cpc	r21, r1
    1022:	51 f4       	brne	.+20     	; 0x1038 <conv_int+0x46>
    1024:	00 68       	ori	r16, 0x80	; 128
    1026:	aa 94       	dec	r10
    1028:	11 f4       	brne	.+4      	; 0x102e <conv_int+0x3c>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	67 c0       	rjmp	.+206    	; 0x10fc <conv_int+0x10a>
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1034:	97 fd       	sbrc	r25, 7
    1036:	f9 cf       	rjmp	.-14     	; 0x102a <conv_int+0x38>
    1038:	10 2f       	mov	r17, r16
    103a:	1d 7f       	andi	r17, 0xFD	; 253
    103c:	30 2f       	mov	r19, r16
    103e:	30 73       	andi	r19, 0x30	; 48
    1040:	01 f5       	brne	.+64     	; 0x1082 <conv_int+0x90>
    1042:	80 33       	cpi	r24, 0x30	; 48
    1044:	f1 f4       	brne	.+60     	; 0x1082 <conv_int+0x90>
    1046:	ff 24       	eor	r15, r15
    1048:	fa 94       	dec	r15
    104a:	fa 0c       	add	r15, r10
    104c:	09 f4       	brne	.+2      	; 0x1050 <conv_int+0x5e>
    104e:	42 c0       	rjmp	.+132    	; 0x10d4 <conv_int+0xe2>
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1056:	97 fd       	sbrc	r25, 7
    1058:	3d c0       	rjmp	.+122    	; 0x10d4 <conv_int+0xe2>
    105a:	38 2f       	mov	r19, r24
    105c:	3f 7d       	andi	r19, 0xDF	; 223
    105e:	38 35       	cpi	r19, 0x58	; 88
    1060:	51 f4       	brne	.+20     	; 0x1076 <conv_int+0x84>
    1062:	12 64       	ori	r17, 0x42	; 66
    1064:	aa 94       	dec	r10
    1066:	aa 94       	dec	r10
    1068:	a9 f1       	breq	.+106    	; 0x10d4 <conv_int+0xe2>
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1070:	97 ff       	sbrs	r25, 7
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <conv_int+0x90>
    1074:	2f c0       	rjmp	.+94     	; 0x10d4 <conv_int+0xe2>
    1076:	06 ff       	sbrs	r16, 6
    1078:	02 c0       	rjmp	.+4      	; 0x107e <conv_int+0x8c>
    107a:	12 60       	ori	r17, 0x02	; 2
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <conv_int+0x8e>
    107e:	12 61       	ori	r17, 0x12	; 18
    1080:	af 2c       	mov	r10, r15
    1082:	c1 2c       	mov	r12, r1
    1084:	d1 2c       	mov	r13, r1
    1086:	76 01       	movw	r14, r12
    1088:	20 ed       	ldi	r18, 0xD0	; 208
    108a:	28 0f       	add	r18, r24
    108c:	28 30       	cpi	r18, 0x08	; 8
    108e:	80 f0       	brcs	.+32     	; 0x10b0 <conv_int+0xbe>
    1090:	14 ff       	sbrs	r17, 4
    1092:	04 c0       	rjmp	.+8      	; 0x109c <conv_int+0xaa>
    1094:	be 01       	movw	r22, r28
    1096:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    109a:	19 c0       	rjmp	.+50     	; 0x10ce <conv_int+0xdc>
    109c:	2a 30       	cpi	r18, 0x0A	; 10
    109e:	40 f0       	brcs	.+16     	; 0x10b0 <conv_int+0xbe>
    10a0:	16 ff       	sbrs	r17, 6
    10a2:	f8 cf       	rjmp	.-16     	; 0x1094 <conv_int+0xa2>
    10a4:	2f 7d       	andi	r18, 0xDF	; 223
    10a6:	3f ee       	ldi	r19, 0xEF	; 239
    10a8:	32 0f       	add	r19, r18
    10aa:	36 30       	cpi	r19, 0x06	; 6
    10ac:	98 f7       	brcc	.-26     	; 0x1094 <conv_int+0xa2>
    10ae:	27 50       	subi	r18, 0x07	; 7
    10b0:	41 2f       	mov	r20, r17
    10b2:	c7 01       	movw	r24, r14
    10b4:	b6 01       	movw	r22, r12
    10b6:	0e 94 c0 07 	call	0xf80	; 0xf80 <mulacc>
    10ba:	6b 01       	movw	r12, r22
    10bc:	7c 01       	movw	r14, r24
    10be:	12 60       	ori	r17, 0x02	; 2
    10c0:	aa 94       	dec	r10
    10c2:	59 f0       	breq	.+22     	; 0x10da <conv_int+0xe8>
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    10ca:	97 ff       	sbrs	r25, 7
    10cc:	dd cf       	rjmp	.-70     	; 0x1088 <conv_int+0x96>
    10ce:	11 fd       	sbrc	r17, 1
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <conv_int+0xe8>
    10d2:	ab cf       	rjmp	.-170    	; 0x102a <conv_int+0x38>
    10d4:	c1 2c       	mov	r12, r1
    10d6:	d1 2c       	mov	r13, r1
    10d8:	76 01       	movw	r14, r12
    10da:	17 ff       	sbrs	r17, 7
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <conv_int+0xfc>
    10de:	f0 94       	com	r15
    10e0:	e0 94       	com	r14
    10e2:	d0 94       	com	r13
    10e4:	c0 94       	com	r12
    10e6:	c1 1c       	adc	r12, r1
    10e8:	d1 1c       	adc	r13, r1
    10ea:	e1 1c       	adc	r14, r1
    10ec:	f1 1c       	adc	r15, r1
    10ee:	21 2f       	mov	r18, r17
    10f0:	b7 01       	movw	r22, r14
    10f2:	a6 01       	movw	r20, r12
    10f4:	c4 01       	movw	r24, r8
    10f6:	0e 94 b4 07 	call	0xf68	; 0xf68 <putval>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	08 95       	ret

00001114 <conv_brk>:
    1114:	a1 e2       	ldi	r26, 0x21	; 33
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__prologue_saves__+0xa>
    1120:	5c 01       	movw	r10, r24
    1122:	7a 01       	movw	r14, r20
    1124:	8e 01       	movw	r16, r28
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	68 01       	movw	r12, r16
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	d8 01       	movw	r26, r16
    1130:	1d 92       	st	X+, r1
    1132:	8a 95       	dec	r24
    1134:	e9 f7       	brne	.-6      	; 0x1130 <conv_brk+0x1c>
    1136:	f5 01       	movw	r30, r10
    1138:	73 80       	ldd	r7, Z+3	; 0x03
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	81 2c       	mov	r8, r1
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	91 2c       	mov	r9, r1
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	73 fc       	sbrc	r7, 3
    114c:	a5 91       	lpm	r26, Z+
    114e:	73 fe       	sbrs	r7, 3
    1150:	a1 91       	ld	r26, Z+
    1152:	8f 01       	movw	r16, r30
    1154:	7a 2f       	mov	r23, r26
    1156:	9f 01       	movw	r18, r30
    1158:	a1 11       	cpse	r26, r1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <conv_brk+0x4e>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	7d c0       	rjmp	.+250    	; 0x125c <conv_brk+0x148>
    1162:	ae 35       	cpi	r26, 0x5E	; 94
    1164:	19 f4       	brne	.+6      	; 0x116c <conv_brk+0x58>
    1166:	41 15       	cp	r20, r1
    1168:	51 05       	cpc	r21, r1
    116a:	59 f1       	breq	.+86     	; 0x11c2 <conv_brk+0xae>
    116c:	e9 2d       	mov	r30, r9
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	e4 17       	cp	r30, r20
    1172:	f5 07       	cpc	r31, r21
    1174:	3c f4       	brge	.+14     	; 0x1184 <conv_brk+0x70>
    1176:	ad 35       	cpi	r26, 0x5D	; 93
    1178:	69 f1       	breq	.+90     	; 0x11d4 <conv_brk+0xc0>
    117a:	ad 32       	cpi	r26, 0x2D	; 45
    117c:	19 f4       	brne	.+6      	; 0x1184 <conv_brk+0x70>
    117e:	bb 23       	and	r27, r27
    1180:	19 f1       	breq	.+70     	; 0x11c8 <conv_brk+0xb4>
    1182:	03 c0       	rjmp	.+6      	; 0x118a <conv_brk+0x76>
    1184:	b1 11       	cpse	r27, r1
    1186:	01 c0       	rjmp	.+2      	; 0x118a <conv_brk+0x76>
    1188:	8a 2e       	mov	r8, r26
    118a:	e7 2f       	mov	r30, r23
    118c:	e6 95       	lsr	r30
    118e:	e6 95       	lsr	r30
    1190:	e6 95       	lsr	r30
    1192:	86 01       	movw	r16, r12
    1194:	0e 0f       	add	r16, r30
    1196:	11 1d       	adc	r17, r1
    1198:	f8 01       	movw	r30, r16
    119a:	a7 2f       	mov	r26, r23
    119c:	a7 70       	andi	r26, 0x07	; 7
    119e:	8c 01       	movw	r16, r24
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <conv_brk+0x92>
    11a2:	00 0f       	add	r16, r16
    11a4:	11 1f       	adc	r17, r17
    11a6:	aa 95       	dec	r26
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <conv_brk+0x8e>
    11aa:	d8 01       	movw	r26, r16
    11ac:	b0 81       	ld	r27, Z
    11ae:	ba 2b       	or	r27, r26
    11b0:	b0 83       	st	Z, r27
    11b2:	78 15       	cp	r23, r8
    11b4:	59 f0       	breq	.+22     	; 0x11cc <conv_brk+0xb8>
    11b6:	78 15       	cp	r23, r8
    11b8:	10 f4       	brcc	.+4      	; 0x11be <conv_brk+0xaa>
    11ba:	7f 5f       	subi	r23, 0xFF	; 255
    11bc:	e6 cf       	rjmp	.-52     	; 0x118a <conv_brk+0x76>
    11be:	71 50       	subi	r23, 0x01	; 1
    11c0:	e4 cf       	rjmp	.-56     	; 0x118a <conv_brk+0x76>
    11c2:	99 24       	eor	r9, r9
    11c4:	93 94       	inc	r9
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <conv_brk+0xba>
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <conv_brk+0xba>
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	4f 5f       	subi	r20, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	ba cf       	rjmp	.-140    	; 0x1148 <conv_brk+0x34>
    11d4:	bb 23       	and	r27, r27
    11d6:	19 f0       	breq	.+6      	; 0x11de <conv_brk+0xca>
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	80 62       	ori	r24, 0x20	; 32
    11dc:	8e 83       	std	Y+6, r24	; 0x06
    11de:	91 10       	cpse	r9, r1
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <conv_brk+0xd4>
    11e2:	99 24       	eor	r9, r9
    11e4:	93 94       	inc	r9
    11e6:	15 c0       	rjmp	.+42     	; 0x1212 <conv_brk+0xfe>
    11e8:	f6 01       	movw	r30, r12
    11ea:	ce 01       	movw	r24, r28
    11ec:	81 96       	adiw	r24, 0x21	; 33
    11ee:	20 81       	ld	r18, Z
    11f0:	20 95       	com	r18
    11f2:	21 93       	st	Z+, r18
    11f4:	e8 17       	cp	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	d1 f7       	brne	.-12     	; 0x11ee <conv_brk+0xda>
    11fa:	f3 cf       	rjmp	.-26     	; 0x11e2 <conv_brk+0xce>
    11fc:	e1 14       	cp	r14, r1
    11fe:	f1 04       	cpc	r15, r1
    1200:	29 f0       	breq	.+10     	; 0x120c <conv_brk+0xf8>
    1202:	d7 01       	movw	r26, r14
    1204:	8c 93       	st	X, r24
    1206:	f7 01       	movw	r30, r14
    1208:	31 96       	adiw	r30, 0x01	; 1
    120a:	7f 01       	movw	r14, r30
    120c:	61 50       	subi	r22, 0x01	; 1
    120e:	01 f1       	breq	.+64     	; 0x1250 <conv_brk+0x13c>
    1210:	91 2c       	mov	r9, r1
    1212:	c5 01       	movw	r24, r10
    1214:	69 a3       	std	Y+33, r22	; 0x21
    1216:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    121a:	69 a1       	ldd	r22, Y+33	; 0x21
    121c:	97 fd       	sbrc	r25, 7
    121e:	16 c0       	rjmp	.+44     	; 0x124c <conv_brk+0x138>
    1220:	28 2f       	mov	r18, r24
    1222:	26 95       	lsr	r18
    1224:	26 95       	lsr	r18
    1226:	26 95       	lsr	r18
    1228:	f6 01       	movw	r30, r12
    122a:	e2 0f       	add	r30, r18
    122c:	f1 1d       	adc	r31, r1
    122e:	20 81       	ld	r18, Z
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	ac 01       	movw	r20, r24
    1234:	47 70       	andi	r20, 0x07	; 7
    1236:	55 27       	eor	r21, r21
    1238:	02 c0       	rjmp	.+4      	; 0x123e <conv_brk+0x12a>
    123a:	35 95       	asr	r19
    123c:	27 95       	ror	r18
    123e:	4a 95       	dec	r20
    1240:	e2 f7       	brpl	.-8      	; 0x123a <conv_brk+0x126>
    1242:	20 fd       	sbrc	r18, 0
    1244:	db cf       	rjmp	.-74     	; 0x11fc <conv_brk+0xe8>
    1246:	b5 01       	movw	r22, r10
    1248:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    124c:	91 10       	cpse	r9, r1
    124e:	86 cf       	rjmp	.-244    	; 0x115c <conv_brk+0x48>
    1250:	e1 14       	cp	r14, r1
    1252:	f1 04       	cpc	r15, r1
    1254:	11 f0       	breq	.+4      	; 0x125a <conv_brk+0x146>
    1256:	d7 01       	movw	r26, r14
    1258:	1c 92       	st	X, r1
    125a:	c8 01       	movw	r24, r16
    125c:	a1 96       	adiw	r28, 0x21	; 33
    125e:	ed e0       	ldi	r30, 0x0D	; 13
    1260:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__epilogue_restores__+0xa>

00001264 <vfscanf>:
    1264:	4f 92       	push	r4
    1266:	5f 92       	push	r5
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	1f 92       	push	r1
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8c 01       	movw	r16, r24
    128a:	2b 01       	movw	r4, r22
    128c:	7a 01       	movw	r14, r20
    128e:	fc 01       	movw	r30, r24
    1290:	17 82       	std	Z+7, r1	; 0x07
    1292:	16 82       	std	Z+6, r1	; 0x06
    1294:	a1 2c       	mov	r10, r1
    1296:	f8 01       	movw	r30, r16
    1298:	d3 80       	ldd	r13, Z+3	; 0x03
    129a:	f2 01       	movw	r30, r4
    129c:	d3 fc       	sbrc	r13, 3
    129e:	85 91       	lpm	r24, Z+
    12a0:	d3 fe       	sbrs	r13, 3
    12a2:	81 91       	ld	r24, Z+
    12a4:	38 2f       	mov	r19, r24
    12a6:	2f 01       	movw	r4, r30
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <vfscanf+0x4a>
    12ac:	fc c0       	rjmp	.+504    	; 0x14a6 <vfscanf+0x242>
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	39 83       	std	Y+1, r19	; 0x01
    12b2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
    12b6:	39 81       	ldd	r19, Y+1	; 0x01
    12b8:	89 2b       	or	r24, r25
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <vfscanf+0x60>
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <skip_spaces>
    12c2:	e9 cf       	rjmp	.-46     	; 0x1296 <vfscanf+0x32>
    12c4:	35 32       	cpi	r19, 0x25	; 37
    12c6:	41 f4       	brne	.+16     	; 0x12d8 <vfscanf+0x74>
    12c8:	f2 01       	movw	r30, r4
    12ca:	d3 fc       	sbrc	r13, 3
    12cc:	35 91       	lpm	r19, Z+
    12ce:	d3 fe       	sbrs	r13, 3
    12d0:	31 91       	ld	r19, Z+
    12d2:	2f 01       	movw	r4, r30
    12d4:	35 32       	cpi	r19, 0x25	; 37
    12d6:	69 f4       	brne	.+26     	; 0x12f2 <vfscanf+0x8e>
    12d8:	c8 01       	movw	r24, r16
    12da:	39 83       	std	Y+1, r19	; 0x01
    12dc:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    12e0:	39 81       	ldd	r19, Y+1	; 0x01
    12e2:	97 fd       	sbrc	r25, 7
    12e4:	de c0       	rjmp	.+444    	; 0x14a2 <vfscanf+0x23e>
    12e6:	38 17       	cp	r19, r24
    12e8:	b1 f2       	breq	.-84     	; 0x1296 <vfscanf+0x32>
    12ea:	b8 01       	movw	r22, r16
    12ec:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    12f0:	da c0       	rjmp	.+436    	; 0x14a6 <vfscanf+0x242>
    12f2:	3a 32       	cpi	r19, 0x2A	; 42
    12f4:	41 f4       	brne	.+16     	; 0x1306 <vfscanf+0xa2>
    12f6:	d3 fc       	sbrc	r13, 3
    12f8:	35 91       	lpm	r19, Z+
    12fa:	d3 fe       	sbrs	r13, 3
    12fc:	31 91       	ld	r19, Z+
    12fe:	2f 01       	movw	r4, r30
    1300:	bb 24       	eor	r11, r11
    1302:	b3 94       	inc	r11
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <vfscanf+0xa4>
    1306:	b1 2c       	mov	r11, r1
    1308:	71 2c       	mov	r7, r1
    130a:	20 ed       	ldi	r18, 0xD0	; 208
    130c:	23 0f       	add	r18, r19
    130e:	2a 30       	cpi	r18, 0x0A	; 10
    1310:	90 f4       	brcc	.+36     	; 0x1336 <vfscanf+0xd2>
    1312:	fb 2d       	mov	r31, r11
    1314:	f2 60       	ori	r31, 0x02	; 2
    1316:	bf 2e       	mov	r11, r31
    1318:	67 2d       	mov	r22, r7
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	0e 94 c0 07 	call	0xf80	; 0xf80 <mulacc>
    1326:	76 2e       	mov	r7, r22
    1328:	f2 01       	movw	r30, r4
    132a:	d3 fc       	sbrc	r13, 3
    132c:	35 91       	lpm	r19, Z+
    132e:	d3 fe       	sbrs	r13, 3
    1330:	31 91       	ld	r19, Z+
    1332:	2f 01       	movw	r4, r30
    1334:	ea cf       	rjmp	.-44     	; 0x130a <vfscanf+0xa6>
    1336:	b1 fe       	sbrs	r11, 1
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <vfscanf+0xdc>
    133a:	71 10       	cpse	r7, r1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfscanf+0xe0>
    133e:	b3 c0       	rjmp	.+358    	; 0x14a6 <vfscanf+0x242>
    1340:	77 24       	eor	r7, r7
    1342:	7a 94       	dec	r7
    1344:	38 36       	cpi	r19, 0x68	; 104
    1346:	19 f0       	breq	.+6      	; 0x134e <vfscanf+0xea>
    1348:	3c 36       	cpi	r19, 0x6C	; 108
    134a:	61 f0       	breq	.+24     	; 0x1364 <vfscanf+0x100>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <vfscanf+0x112>
    134e:	f2 01       	movw	r30, r4
    1350:	d3 fc       	sbrc	r13, 3
    1352:	35 91       	lpm	r19, Z+
    1354:	d3 fe       	sbrs	r13, 3
    1356:	31 91       	ld	r19, Z+
    1358:	2f 01       	movw	r4, r30
    135a:	38 36       	cpi	r19, 0x68	; 104
    135c:	61 f4       	brne	.+24     	; 0x1376 <vfscanf+0x112>
    135e:	fb 2d       	mov	r31, r11
    1360:	f8 60       	ori	r31, 0x08	; 8
    1362:	bf 2e       	mov	r11, r31
    1364:	8b 2d       	mov	r24, r11
    1366:	84 60       	ori	r24, 0x04	; 4
    1368:	b8 2e       	mov	r11, r24
    136a:	f2 01       	movw	r30, r4
    136c:	d3 fc       	sbrc	r13, 3
    136e:	35 91       	lpm	r19, Z+
    1370:	d3 fe       	sbrs	r13, 3
    1372:	31 91       	ld	r19, Z+
    1374:	2f 01       	movw	r4, r30
    1376:	33 23       	and	r19, r19
    1378:	09 f4       	brne	.+2      	; 0x137c <vfscanf+0x118>
    137a:	95 c0       	rjmp	.+298    	; 0x14a6 <vfscanf+0x242>
    137c:	63 2f       	mov	r22, r19
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	84 e5       	ldi	r24, 0x54	; 84
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	39 83       	std	Y+1, r19	; 0x01
    1386:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strchr_P>
    138a:	39 81       	ldd	r19, Y+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	09 f4       	brne	.+2      	; 0x1392 <vfscanf+0x12e>
    1390:	8a c0       	rjmp	.+276    	; 0x14a6 <vfscanf+0x242>
    1392:	b0 fc       	sbrc	r11, 0
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <vfscanf+0x140>
    1396:	f7 01       	movw	r30, r14
    1398:	c0 80       	ld	r12, Z
    139a:	d1 80       	ldd	r13, Z+1	; 0x01
    139c:	c7 01       	movw	r24, r14
    139e:	02 96       	adiw	r24, 0x02	; 2
    13a0:	7c 01       	movw	r14, r24
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vfscanf+0x144>
    13a4:	c1 2c       	mov	r12, r1
    13a6:	d1 2c       	mov	r13, r1
    13a8:	3e 36       	cpi	r19, 0x6E	; 110
    13aa:	51 f4       	brne	.+20     	; 0x13c0 <vfscanf+0x15c>
    13ac:	f8 01       	movw	r30, r16
    13ae:	46 81       	ldd	r20, Z+6	; 0x06
    13b0:	57 81       	ldd	r21, Z+7	; 0x07
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	2b 2d       	mov	r18, r11
    13b8:	c6 01       	movw	r24, r12
    13ba:	0e 94 b4 07 	call	0xf68	; 0xf68 <putval>
    13be:	6b cf       	rjmp	.-298    	; 0x1296 <vfscanf+0x32>
    13c0:	33 36       	cpi	r19, 0x63	; 99
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <vfscanf+0x188>
    13c4:	b1 fc       	sbrc	r11, 1
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfscanf+0x168>
    13c8:	77 24       	eor	r7, r7
    13ca:	73 94       	inc	r7
    13cc:	c8 01       	movw	r24, r16
    13ce:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    13d2:	97 fd       	sbrc	r25, 7
    13d4:	66 c0       	rjmp	.+204    	; 0x14a2 <vfscanf+0x23e>
    13d6:	c1 14       	cp	r12, r1
    13d8:	d1 04       	cpc	r13, r1
    13da:	29 f0       	breq	.+10     	; 0x13e6 <vfscanf+0x182>
    13dc:	f6 01       	movw	r30, r12
    13de:	80 83       	st	Z, r24
    13e0:	c6 01       	movw	r24, r12
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	6c 01       	movw	r12, r24
    13e6:	7a 94       	dec	r7
    13e8:	89 f7       	brne	.-30     	; 0x13cc <vfscanf+0x168>
    13ea:	57 c0       	rjmp	.+174    	; 0x149a <vfscanf+0x236>
    13ec:	3b 35       	cpi	r19, 0x5B	; 91
    13ee:	59 f4       	brne	.+22     	; 0x1406 <vfscanf+0x1a2>
    13f0:	92 01       	movw	r18, r4
    13f2:	a6 01       	movw	r20, r12
    13f4:	67 2d       	mov	r22, r7
    13f6:	c8 01       	movw	r24, r16
    13f8:	0e 94 8a 08 	call	0x1114	; 0x1114 <conv_brk>
    13fc:	2c 01       	movw	r4, r24
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfscanf+0x1a0>
    1402:	4b c0       	rjmp	.+150    	; 0x149a <vfscanf+0x236>
    1404:	45 c0       	rjmp	.+138    	; 0x1490 <vfscanf+0x22c>
    1406:	c8 01       	movw	r24, r16
    1408:	39 83       	std	Y+1, r19	; 0x01
    140a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <skip_spaces>
    140e:	39 81       	ldd	r19, Y+1	; 0x01
    1410:	97 fd       	sbrc	r25, 7
    1412:	47 c0       	rjmp	.+142    	; 0x14a2 <vfscanf+0x23e>
    1414:	3f 36       	cpi	r19, 0x6F	; 111
    1416:	69 f1       	breq	.+90     	; 0x1472 <vfscanf+0x20e>
    1418:	28 f4       	brcc	.+10     	; 0x1424 <vfscanf+0x1c0>
    141a:	34 36       	cpi	r19, 0x64	; 100
    141c:	31 f1       	breq	.+76     	; 0x146a <vfscanf+0x206>
    141e:	39 36       	cpi	r19, 0x69	; 105
    1420:	79 f1       	breq	.+94     	; 0x1480 <vfscanf+0x21c>
    1422:	2b c0       	rjmp	.+86     	; 0x147a <vfscanf+0x216>
    1424:	33 37       	cpi	r19, 0x73	; 115
    1426:	69 f0       	breq	.+26     	; 0x1442 <vfscanf+0x1de>
    1428:	35 37       	cpi	r19, 0x75	; 117
    142a:	f9 f0       	breq	.+62     	; 0x146a <vfscanf+0x206>
    142c:	26 c0       	rjmp	.+76     	; 0x147a <vfscanf+0x216>
    142e:	c1 14       	cp	r12, r1
    1430:	d1 04       	cpc	r13, r1
    1432:	29 f0       	breq	.+10     	; 0x143e <vfscanf+0x1da>
    1434:	f6 01       	movw	r30, r12
    1436:	80 82       	st	Z, r8
    1438:	c6 01       	movw	r24, r12
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	6c 01       	movw	r12, r24
    143e:	7a 94       	dec	r7
    1440:	71 f0       	breq	.+28     	; 0x145e <vfscanf+0x1fa>
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 92 0a 	call	0x1524	; 0x1524 <fgetc>
    1448:	4c 01       	movw	r8, r24
    144a:	97 fd       	sbrc	r25, 7
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfscanf+0x1fa>
    144e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <isspace>
    1452:	89 2b       	or	r24, r25
    1454:	61 f3       	breq	.-40     	; 0x142e <vfscanf+0x1ca>
    1456:	b8 01       	movw	r22, r16
    1458:	c4 01       	movw	r24, r8
    145a:	0e 94 02 0b 	call	0x1604	; 0x1604 <ungetc>
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	d9 f0       	breq	.+54     	; 0x149a <vfscanf+0x236>
    1464:	f6 01       	movw	r30, r12
    1466:	10 82       	st	Z, r1
    1468:	18 c0       	rjmp	.+48     	; 0x149a <vfscanf+0x236>
    146a:	fb 2d       	mov	r31, r11
    146c:	f0 62       	ori	r31, 0x20	; 32
    146e:	bf 2e       	mov	r11, r31
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <vfscanf+0x21c>
    1472:	8b 2d       	mov	r24, r11
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	b8 2e       	mov	r11, r24
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfscanf+0x21c>
    147a:	9b 2d       	mov	r25, r11
    147c:	90 64       	ori	r25, 0x40	; 64
    147e:	b9 2e       	mov	r11, r25
    1480:	2b 2d       	mov	r18, r11
    1482:	a6 01       	movw	r20, r12
    1484:	67 2d       	mov	r22, r7
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 f9 07 	call	0xff2	; 0xff2 <conv_int>
    148c:	81 11       	cpse	r24, r1
    148e:	05 c0       	rjmp	.+10     	; 0x149a <vfscanf+0x236>
    1490:	f8 01       	movw	r30, r16
    1492:	83 81       	ldd	r24, Z+3	; 0x03
    1494:	80 73       	andi	r24, 0x30	; 48
    1496:	29 f4       	brne	.+10     	; 0x14a2 <vfscanf+0x23e>
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <vfscanf+0x242>
    149a:	b0 fc       	sbrc	r11, 0
    149c:	fc ce       	rjmp	.-520    	; 0x1296 <vfscanf+0x32>
    149e:	a3 94       	inc	r10
    14a0:	fa ce       	rjmp	.-524    	; 0x1296 <vfscanf+0x32>
    14a2:	aa 20       	and	r10, r10
    14a4:	19 f0       	breq	.+6      	; 0x14ac <vfscanf+0x248>
    14a6:	8a 2d       	mov	r24, r10
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfscanf+0x24c>
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	0f 90       	pop	r0
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	7f 90       	pop	r7
    14cc:	5f 90       	pop	r5
    14ce:	4f 90       	pop	r4
    14d0:	08 95       	ret

000014d2 <isspace>:
    14d2:	91 11       	cpse	r25, r1
    14d4:	0e c1       	rjmp	.+540    	; 0x16f2 <__ctype_isfalse>
    14d6:	80 32       	cpi	r24, 0x20	; 32
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <isspace+0xe>
    14da:	89 50       	subi	r24, 0x09	; 9
    14dc:	85 50       	subi	r24, 0x05	; 5
    14de:	d0 f7       	brcc	.-12     	; 0x14d4 <isspace+0x2>
    14e0:	08 95       	ret

000014e2 <strchr_P>:
    14e2:	fc 01       	movw	r30, r24
    14e4:	05 90       	lpm	r0, Z+
    14e6:	06 16       	cp	r0, r22
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <strchr_P+0x10>
    14ea:	00 20       	and	r0, r0
    14ec:	d9 f7       	brne	.-10     	; 0x14e4 <strchr_P+0x2>
    14ee:	c0 01       	movw	r24, r0
    14f0:	08 95       	ret
    14f2:	31 97       	sbiw	r30, 0x01	; 1
    14f4:	cf 01       	movw	r24, r30
    14f6:	08 95       	ret

000014f8 <strnlen_P>:
    14f8:	fc 01       	movw	r30, r24
    14fa:	05 90       	lpm	r0, Z+
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	70 40       	sbci	r23, 0x00	; 0
    1500:	01 10       	cpse	r0, r1
    1502:	d8 f7       	brcc	.-10     	; 0x14fa <strnlen_P+0x2>
    1504:	80 95       	com	r24
    1506:	90 95       	com	r25
    1508:	8e 0f       	add	r24, r30
    150a:	9f 1f       	adc	r25, r31
    150c:	08 95       	ret

0000150e <strnlen>:
    150e:	fc 01       	movw	r30, r24
    1510:	61 50       	subi	r22, 0x01	; 1
    1512:	70 40       	sbci	r23, 0x00	; 0
    1514:	01 90       	ld	r0, Z+
    1516:	01 10       	cpse	r0, r1
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <strnlen+0x2>
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	8e 0f       	add	r24, r30
    1520:	9f 1f       	adc	r25, r31
    1522:	08 95       	ret

00001524 <fgetc>:
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	20 ff       	sbrs	r18, 0
    152e:	33 c0       	rjmp	.+102    	; 0x1596 <fgetc+0x72>
    1530:	26 ff       	sbrs	r18, 6
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <fgetc+0x24>
    1534:	2f 7b       	andi	r18, 0xBF	; 191
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	9f 81       	ldd	r25, Y+7	; 0x07
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	9f 83       	std	Y+7, r25	; 0x07
    1540:	8e 83       	std	Y+6, r24	; 0x06
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	29 c0       	rjmp	.+82     	; 0x159a <fgetc+0x76>
    1548:	22 ff       	sbrs	r18, 2
    154a:	0f c0       	rjmp	.+30     	; 0x156a <fgetc+0x46>
    154c:	e8 81       	ld	r30, Y
    154e:	f9 81       	ldd	r31, Y+1	; 0x01
    1550:	80 81       	ld	r24, Z
    1552:	99 27       	eor	r25, r25
    1554:	87 fd       	sbrc	r24, 7
    1556:	90 95       	com	r25
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	19 f4       	brne	.+6      	; 0x1562 <fgetc+0x3e>
    155c:	20 62       	ori	r18, 0x20	; 32
    155e:	2b 83       	std	Y+3, r18	; 0x03
    1560:	1a c0       	rjmp	.+52     	; 0x1596 <fgetc+0x72>
    1562:	31 96       	adiw	r30, 0x01	; 1
    1564:	f9 83       	std	Y+1, r31	; 0x01
    1566:	e8 83       	st	Y, r30
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <fgetc+0x62>
    156a:	ea 85       	ldd	r30, Y+10	; 0x0a
    156c:	fb 85       	ldd	r31, Y+11	; 0x0b
    156e:	09 95       	icall
    1570:	97 ff       	sbrs	r25, 7
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <fgetc+0x62>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	11 f4       	brne	.+4      	; 0x157e <fgetc+0x5a>
    157a:	80 e1       	ldi	r24, 0x10	; 16
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <fgetc+0x5c>
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	82 2b       	or	r24, r18
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <fgetc+0x72>
    1586:	2e 81       	ldd	r18, Y+6	; 0x06
    1588:	3f 81       	ldd	r19, Y+7	; 0x07
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	3f 83       	std	Y+7, r19	; 0x07
    1590:	2e 83       	std	Y+6, r18	; 0x06
    1592:	99 27       	eor	r25, r25
    1594:	02 c0       	rjmp	.+4      	; 0x159a <fgetc+0x76>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <fputc>:
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	18 2f       	mov	r17, r24
    15aa:	09 2f       	mov	r16, r25
    15ac:	eb 01       	movw	r28, r22
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	81 fd       	sbrc	r24, 1
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <fputc+0x1a>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	20 c0       	rjmp	.+64     	; 0x15fa <fputc+0x5a>
    15ba:	82 ff       	sbrs	r24, 2
    15bc:	10 c0       	rjmp	.+32     	; 0x15de <fputc+0x3e>
    15be:	4e 81       	ldd	r20, Y+6	; 0x06
    15c0:	5f 81       	ldd	r21, Y+7	; 0x07
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	3d 81       	ldd	r19, Y+5	; 0x05
    15c6:	42 17       	cp	r20, r18
    15c8:	53 07       	cpc	r21, r19
    15ca:	7c f4       	brge	.+30     	; 0x15ea <fputc+0x4a>
    15cc:	e8 81       	ld	r30, Y
    15ce:	f9 81       	ldd	r31, Y+1	; 0x01
    15d0:	9f 01       	movw	r18, r30
    15d2:	2f 5f       	subi	r18, 0xFF	; 255
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	39 83       	std	Y+1, r19	; 0x01
    15d8:	28 83       	st	Y, r18
    15da:	10 83       	st	Z, r17
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <fputc+0x4a>
    15de:	e8 85       	ldd	r30, Y+8	; 0x08
    15e0:	f9 85       	ldd	r31, Y+9	; 0x09
    15e2:	81 2f       	mov	r24, r17
    15e4:	09 95       	icall
    15e6:	89 2b       	or	r24, r25
    15e8:	29 f7       	brne	.-54     	; 0x15b4 <fputc+0x14>
    15ea:	2e 81       	ldd	r18, Y+6	; 0x06
    15ec:	3f 81       	ldd	r19, Y+7	; 0x07
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	3f 83       	std	Y+7, r19	; 0x07
    15f4:	2e 83       	std	Y+6, r18	; 0x06
    15f6:	81 2f       	mov	r24, r17
    15f8:	90 2f       	mov	r25, r16
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <ungetc>:
    1604:	fb 01       	movw	r30, r22
    1606:	23 81       	ldd	r18, Z+3	; 0x03
    1608:	20 ff       	sbrs	r18, 0
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <ungetc+0x2c>
    160c:	26 fd       	sbrc	r18, 6
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <ungetc+0x2c>
    1610:	8f 3f       	cpi	r24, 0xFF	; 255
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	93 07       	cpc	r25, r19
    1616:	61 f0       	breq	.+24     	; 0x1630 <ungetc+0x2c>
    1618:	82 83       	std	Z+2, r24	; 0x02
    161a:	2f 7d       	andi	r18, 0xDF	; 223
    161c:	20 64       	ori	r18, 0x40	; 64
    161e:	23 83       	std	Z+3, r18	; 0x03
    1620:	26 81       	ldd	r18, Z+6	; 0x06
    1622:	37 81       	ldd	r19, Z+7	; 0x07
    1624:	21 50       	subi	r18, 0x01	; 1
    1626:	31 09       	sbc	r19, r1
    1628:	37 83       	std	Z+7, r19	; 0x07
    162a:	26 83       	std	Z+6, r18	; 0x06
    162c:	99 27       	eor	r25, r25
    162e:	08 95       	ret
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__ultoa_invert>:
    1636:	fa 01       	movw	r30, r20
    1638:	aa 27       	eor	r26, r26
    163a:	28 30       	cpi	r18, 0x08	; 8
    163c:	51 f1       	breq	.+84     	; 0x1692 <__ultoa_invert+0x5c>
    163e:	20 31       	cpi	r18, 0x10	; 16
    1640:	81 f1       	breq	.+96     	; 0x16a2 <__ultoa_invert+0x6c>
    1642:	e8 94       	clt
    1644:	6f 93       	push	r22
    1646:	6e 7f       	andi	r22, 0xFE	; 254
    1648:	6e 5f       	subi	r22, 0xFE	; 254
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	af 4f       	sbci	r26, 0xFF	; 255
    1652:	b1 e0       	ldi	r27, 0x01	; 1
    1654:	3e d0       	rcall	.+124    	; 0x16d2 <__ultoa_invert+0x9c>
    1656:	b4 e0       	ldi	r27, 0x04	; 4
    1658:	3c d0       	rcall	.+120    	; 0x16d2 <__ultoa_invert+0x9c>
    165a:	67 0f       	add	r22, r23
    165c:	78 1f       	adc	r23, r24
    165e:	89 1f       	adc	r24, r25
    1660:	9a 1f       	adc	r25, r26
    1662:	a1 1d       	adc	r26, r1
    1664:	68 0f       	add	r22, r24
    1666:	79 1f       	adc	r23, r25
    1668:	8a 1f       	adc	r24, r26
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	6a 0f       	add	r22, r26
    1670:	71 1d       	adc	r23, r1
    1672:	81 1d       	adc	r24, r1
    1674:	91 1d       	adc	r25, r1
    1676:	a1 1d       	adc	r26, r1
    1678:	20 d0       	rcall	.+64     	; 0x16ba <__ultoa_invert+0x84>
    167a:	09 f4       	brne	.+2      	; 0x167e <__ultoa_invert+0x48>
    167c:	68 94       	set
    167e:	3f 91       	pop	r19
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	26 9f       	mul	r18, r22
    1684:	11 24       	eor	r1, r1
    1686:	30 19       	sub	r19, r0
    1688:	30 5d       	subi	r19, 0xD0	; 208
    168a:	31 93       	st	Z+, r19
    168c:	de f6       	brtc	.-74     	; 0x1644 <__ultoa_invert+0xe>
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret
    1692:	46 2f       	mov	r20, r22
    1694:	47 70       	andi	r20, 0x07	; 7
    1696:	40 5d       	subi	r20, 0xD0	; 208
    1698:	41 93       	st	Z+, r20
    169a:	b3 e0       	ldi	r27, 0x03	; 3
    169c:	0f d0       	rcall	.+30     	; 0x16bc <__ultoa_invert+0x86>
    169e:	c9 f7       	brne	.-14     	; 0x1692 <__ultoa_invert+0x5c>
    16a0:	f6 cf       	rjmp	.-20     	; 0x168e <__ultoa_invert+0x58>
    16a2:	46 2f       	mov	r20, r22
    16a4:	4f 70       	andi	r20, 0x0F	; 15
    16a6:	40 5d       	subi	r20, 0xD0	; 208
    16a8:	4a 33       	cpi	r20, 0x3A	; 58
    16aa:	18 f0       	brcs	.+6      	; 0x16b2 <__ultoa_invert+0x7c>
    16ac:	49 5d       	subi	r20, 0xD9	; 217
    16ae:	31 fd       	sbrc	r19, 1
    16b0:	40 52       	subi	r20, 0x20	; 32
    16b2:	41 93       	st	Z+, r20
    16b4:	02 d0       	rcall	.+4      	; 0x16ba <__ultoa_invert+0x84>
    16b6:	a9 f7       	brne	.-22     	; 0x16a2 <__ultoa_invert+0x6c>
    16b8:	ea cf       	rjmp	.-44     	; 0x168e <__ultoa_invert+0x58>
    16ba:	b4 e0       	ldi	r27, 0x04	; 4
    16bc:	a6 95       	lsr	r26
    16be:	97 95       	ror	r25
    16c0:	87 95       	ror	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0x86>
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 05       	cpc	r22, r1
    16ce:	71 05       	cpc	r23, r1
    16d0:	08 95       	ret
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	0a 2e       	mov	r0, r26
    16d8:	06 94       	lsr	r0
    16da:	57 95       	ror	r21
    16dc:	47 95       	ror	r20
    16de:	37 95       	ror	r19
    16e0:	27 95       	ror	r18
    16e2:	ba 95       	dec	r27
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0xa2>
    16e6:	62 0f       	add	r22, r18
    16e8:	73 1f       	adc	r23, r19
    16ea:	84 1f       	adc	r24, r20
    16ec:	95 1f       	adc	r25, r21
    16ee:	a0 1d       	adc	r26, r0
    16f0:	08 95       	ret

000016f2 <__ctype_isfalse>:
    16f2:	99 27       	eor	r25, r25
    16f4:	88 27       	eor	r24, r24

000016f6 <__ctype_istrue>:
    16f6:	08 95       	ret

000016f8 <__prologue_saves__>:
    16f8:	2f 92       	push	r2
    16fa:	3f 92       	push	r3
    16fc:	4f 92       	push	r4
    16fe:	5f 92       	push	r5
    1700:	6f 92       	push	r6
    1702:	7f 92       	push	r7
    1704:	8f 92       	push	r8
    1706:	9f 92       	push	r9
    1708:	af 92       	push	r10
    170a:	bf 92       	push	r11
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	ca 1b       	sub	r28, r26
    1722:	db 0b       	sbc	r29, r27
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	09 94       	ijmp

00001730 <__epilogue_restores__>:
    1730:	2a 88       	ldd	r2, Y+18	; 0x12
    1732:	39 88       	ldd	r3, Y+17	; 0x11
    1734:	48 88       	ldd	r4, Y+16	; 0x10
    1736:	5f 84       	ldd	r5, Y+15	; 0x0f
    1738:	6e 84       	ldd	r6, Y+14	; 0x0e
    173a:	7d 84       	ldd	r7, Y+13	; 0x0d
    173c:	8c 84       	ldd	r8, Y+12	; 0x0c
    173e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1740:	aa 84       	ldd	r10, Y+10	; 0x0a
    1742:	b9 84       	ldd	r11, Y+9	; 0x09
    1744:	c8 84       	ldd	r12, Y+8	; 0x08
    1746:	df 80       	ldd	r13, Y+7	; 0x07
    1748:	ee 80       	ldd	r14, Y+6	; 0x06
    174a:	fd 80       	ldd	r15, Y+5	; 0x05
    174c:	0c 81       	ldd	r16, Y+4	; 0x04
    174e:	1b 81       	ldd	r17, Y+3	; 0x03
    1750:	aa 81       	ldd	r26, Y+2	; 0x02
    1752:	b9 81       	ldd	r27, Y+1	; 0x01
    1754:	ce 0f       	add	r28, r30
    1756:	d1 1d       	adc	r29, r1
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	ed 01       	movw	r28, r26
    1764:	08 95       	ret

00001766 <_exit>:
    1766:	f8 94       	cli

00001768 <__stop_program>:
    1768:	ff cf       	rjmp	.-2      	; 0x1768 <__stop_program>
