
SerialSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00001e34  00001ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000139  00800100  00800100  00001f68  2**0
                  ALLOC
  3 .stab         00001d7c  00000000  00000000  00001f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fac  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_4>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_11>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d4 e0       	ldi	r29, 0x04	; 4
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	11 e0       	ldi	r17, 0x01	; 1
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e4 e3       	ldi	r30, 0x34	; 52
      74:	fe e1       	ldi	r31, 0x1E	; 30
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a0 30       	cpi	r26, 0x00	; 0
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	22 e0       	ldi	r18, 0x02	; 2
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a9 33       	cpi	r26, 0x39	; 57
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 ed 07 	call	0xfda	; 0xfda <main>
      96:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <runCmd>:
#include "eeprom.h"

char buf[100];

void runCmd(char code[])
{
      9e:	0f 93       	push	r16
      a0:	1f 93       	push	r17
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	2c 97       	sbiw	r28, 0x0c	; 12
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	9c 87       	std	Y+12, r25	; 0x0c
      b8:	8b 87       	std	Y+11, r24	; 0x0b
	uint16_t i;
	uint16_t addr;
	uint16_t time, time1;
	char port, pin;
	addr = code[1] - '0';
      ba:	8b 85       	ldd	r24, Y+11	; 0x0b
      bc:	9c 85       	ldd	r25, Y+12	; 0x0c
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	fc 01       	movw	r30, r24
      c2:	80 81       	ld	r24, Z
      c4:	88 2f       	mov	r24, r24
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	c0 97       	sbiw	r24, 0x30	; 48
      ca:	9c 83       	std	Y+4, r25	; 0x04
      cc:	8b 83       	std	Y+3, r24	; 0x03
	switch (code[0]) {
      ce:	8b 85       	ldd	r24, Y+11	; 0x0b
      d0:	9c 85       	ldd	r25, Y+12	; 0x0c
      d2:	fc 01       	movw	r30, r24
      d4:	80 81       	ld	r24, Z
      d6:	88 2f       	mov	r24, r24
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	85 34       	cpi	r24, 0x45	; 69
      dc:	91 05       	cpc	r25, r1
      de:	09 f4       	brne	.+2      	; 0xe2 <runCmd+0x44>
      e0:	72 c1       	rjmp	.+740    	; 0x3c6 <runCmd+0x328>
      e2:	86 34       	cpi	r24, 0x46	; 70
      e4:	91 05       	cpc	r25, r1
      e6:	44 f4       	brge	.+16     	; 0xf8 <runCmd+0x5a>
      e8:	81 34       	cpi	r24, 0x41	; 65
      ea:	91 05       	cpc	r25, r1
      ec:	71 f0       	breq	.+28     	; 0x10a <runCmd+0x6c>
      ee:	83 34       	cpi	r24, 0x43	; 67
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <runCmd+0x58>
      f4:	b7 c0       	rjmp	.+366    	; 0x264 <runCmd+0x1c6>
      f6:	70 c3       	rjmp	.+1760   	; 0x7d8 <__stack+0x379>
      f8:	84 35       	cpi	r24, 0x54	; 84
      fa:	91 05       	cpc	r25, r1
      fc:	09 f4       	brne	.+2      	; 0x100 <runCmd+0x62>
      fe:	5f c2       	rjmp	.+1214   	; 0x5be <__stack+0x15f>
     100:	85 35       	cpi	r24, 0x55	; 85
     102:	91 05       	cpc	r25, r1
     104:	09 f4       	brne	.+2      	; 0x108 <runCmd+0x6a>
     106:	de c2       	rjmp	.+1468   	; 0x6c4 <__stack+0x265>
     108:	67 c3       	rjmp	.+1742   	; 0x7d8 <__stack+0x379>
	case 'A':		// control port a
		if (code[2] - '0') {
     10a:	8b 85       	ldd	r24, Y+11	; 0x0b
     10c:	9c 85       	ldd	r25, Y+12	; 0x0c
     10e:	02 96       	adiw	r24, 0x02	; 2
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	80 33       	cpi	r24, 0x30	; 48
     116:	09 f4       	brne	.+2      	; 0x11a <runCmd+0x7c>
     118:	4f c0       	rjmp	.+158    	; 0x1b8 <runCmd+0x11a>
			writeEEPROM(addr, '1');
     11a:	8b 81       	ldd	r24, Y+3	; 0x03
     11c:	9c 81       	ldd	r25, Y+4	; 0x04
     11e:	61 e3       	ldi	r22, 0x31	; 49
     120:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			PORTA |= 1 << addr;
     124:	8b e3       	ldi	r24, 0x3B	; 59
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	2b e3       	ldi	r18, 0x3B	; 59
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	62 2f       	mov	r22, r18
     132:	2b 81       	ldd	r18, Y+3	; 0x03
     134:	3c 81       	ldd	r19, Y+4	; 0x04
     136:	a9 01       	movw	r20, r18
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <runCmd+0xa4>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	4a 95       	dec	r20
     144:	e2 f7       	brpl	.-8      	; 0x13e <runCmd+0xa0>
     146:	26 2b       	or	r18, r22
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
			sprintf(buf, "UA%c65535/0", code[1]);
     14c:	8b 85       	ldd	r24, Y+11	; 0x0b
     14e:	9c 85       	ldd	r25, Y+12	; 0x0c
     150:	01 96       	adiw	r24, 0x01	; 1
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	29 2f       	mov	r18, r25
     15c:	2f 93       	push	r18
     15e:	8f 93       	push	r24
     160:	82 e6       	ldi	r24, 0x62	; 98
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	89 2f       	mov	r24, r25
     166:	8f 93       	push	r24
     168:	82 e6       	ldi	r24, 0x62	; 98
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	8f 93       	push	r24
     16e:	87 e0       	ldi	r24, 0x07	; 7
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	89 2f       	mov	r24, r25
     174:	8f 93       	push	r24
     176:	87 e0       	ldi	r24, 0x07	; 7
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	8f 93       	push	r24
     17c:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
     18a:	0f 90       	pop	r0
			status |= 1 << addr;
     18c:	8b 81       	ldd	r24, Y+3	; 0x03
     18e:	9c 81       	ldd	r25, Y+4	; 0x04
     190:	9c 01       	movw	r18, r24
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 c0       	rjmp	.+4      	; 0x19c <runCmd+0xfe>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	2a 95       	dec	r18
     19e:	e2 f7       	brpl	.-8      	; 0x198 <runCmd+0xfa>
     1a0:	9c 01       	movw	r18, r24
     1a2:	80 91 ad 01 	lds	r24, 0x01AD
     1a6:	90 91 ae 01 	lds	r25, 0x01AE
     1aa:	82 2b       	or	r24, r18
     1ac:	93 2b       	or	r25, r19
     1ae:	90 93 ae 01 	sts	0x01AE, r25
     1b2:	80 93 ad 01 	sts	0x01AD, r24
     1b6:	51 c0       	rjmp	.+162    	; 0x25a <runCmd+0x1bc>
		} else {
			writeEEPROM(addr, '0');
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	60 e3       	ldi	r22, 0x30	; 48
     1be:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			PORTA &= ~(1 << addr);
     1c2:	8b e3       	ldi	r24, 0x3B	; 59
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	2b e3       	ldi	r18, 0x3B	; 59
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	f9 01       	movw	r30, r18
     1cc:	20 81       	ld	r18, Z
     1ce:	62 2f       	mov	r22, r18
     1d0:	2b 81       	ldd	r18, Y+3	; 0x03
     1d2:	3c 81       	ldd	r19, Y+4	; 0x04
     1d4:	a9 01       	movw	r20, r18
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <runCmd+0x142>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	4a 95       	dec	r20
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <runCmd+0x13e>
     1e4:	20 95       	com	r18
     1e6:	26 23       	and	r18, r22
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
			sprintf(buf, "UA%c0/65535", code[1]);
     1ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f0:	01 96       	adiw	r24, 0x01	; 1
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	29 2f       	mov	r18, r25
     1fc:	2f 93       	push	r18
     1fe:	8f 93       	push	r24
     200:	8e e6       	ldi	r24, 0x6E	; 110
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	89 2f       	mov	r24, r25
     206:	8f 93       	push	r24
     208:	8e e6       	ldi	r24, 0x6E	; 110
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	8f 93       	push	r24
     20e:	87 e0       	ldi	r24, 0x07	; 7
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	89 2f       	mov	r24, r25
     214:	8f 93       	push	r24
     216:	87 e0       	ldi	r24, 0x07	; 7
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	8f 93       	push	r24
     21c:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
			status &= ~(1 << addr);
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	9c 81       	ldd	r25, Y+4	; 0x04
     230:	9c 01       	movw	r18, r24
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 c0       	rjmp	.+4      	; 0x23c <runCmd+0x19e>
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	2a 95       	dec	r18
     23e:	e2 f7       	brpl	.-8      	; 0x238 <runCmd+0x19a>
     240:	80 95       	com	r24
     242:	90 95       	com	r25
     244:	9c 01       	movw	r18, r24
     246:	80 91 ad 01 	lds	r24, 0x01AD
     24a:	90 91 ae 01 	lds	r25, 0x01AE
     24e:	82 23       	and	r24, r18
     250:	93 23       	and	r25, r19
     252:	90 93 ae 01 	sts	0x01AE, r25
     256:	80 93 ad 01 	sts	0x01AD, r24
		}
		runCmd(buf);
     25a:	87 e0       	ldi	r24, 0x07	; 7
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
		break;
     262:	d9 c2       	rjmp	.+1458   	; 0x816 <__stack+0x3b7>
	case 'C':		// control port c
		if (code[2] - '0') {
     264:	8b 85       	ldd	r24, Y+11	; 0x0b
     266:	9c 85       	ldd	r25, Y+12	; 0x0c
     268:	02 96       	adiw	r24, 0x02	; 2
     26a:	fc 01       	movw	r30, r24
     26c:	80 81       	ld	r24, Z
     26e:	80 33       	cpi	r24, 0x30	; 48
     270:	09 f4       	brne	.+2      	; 0x274 <runCmd+0x1d6>
     272:	51 c0       	rjmp	.+162    	; 0x316 <runCmd+0x278>
			writeEEPROM(8 + addr, '1');
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	08 96       	adiw	r24, 0x08	; 8
     27a:	61 e3       	ldi	r22, 0x31	; 49
     27c:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			PORTC |= 1 << addr;
     280:	85 e3       	ldi	r24, 0x35	; 53
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	25 e3       	ldi	r18, 0x35	; 53
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	f9 01       	movw	r30, r18
     28a:	20 81       	ld	r18, Z
     28c:	62 2f       	mov	r22, r18
     28e:	2b 81       	ldd	r18, Y+3	; 0x03
     290:	3c 81       	ldd	r19, Y+4	; 0x04
     292:	a9 01       	movw	r20, r18
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <runCmd+0x200>
     29a:	22 0f       	add	r18, r18
     29c:	33 1f       	adc	r19, r19
     29e:	4a 95       	dec	r20
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <runCmd+0x1fc>
     2a2:	26 2b       	or	r18, r22
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
			sprintf(buf, "UC%c65535/0", code[1]);
     2a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	fc 01       	movw	r30, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	88 2f       	mov	r24, r24
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	29 2f       	mov	r18, r25
     2b8:	2f 93       	push	r18
     2ba:	8f 93       	push	r24
     2bc:	8a e7       	ldi	r24, 0x7A	; 122
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	89 2f       	mov	r24, r25
     2c2:	8f 93       	push	r24
     2c4:	8a e7       	ldi	r24, 0x7A	; 122
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8f 93       	push	r24
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	89 2f       	mov	r24, r25
     2d0:	8f 93       	push	r24
     2d2:	87 e0       	ldi	r24, 0x07	; 7
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	8f 93       	push	r24
     2d8:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
			status |= 1 << (8 + addr);
     2e8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ea:	9c 81       	ldd	r25, Y+4	; 0x04
     2ec:	08 96       	adiw	r24, 0x08	; 8
     2ee:	9c 01       	movw	r18, r24
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <runCmd+0x25c>
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	2a 95       	dec	r18
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <runCmd+0x258>
     2fe:	9c 01       	movw	r18, r24
     300:	80 91 ad 01 	lds	r24, 0x01AD
     304:	90 91 ae 01 	lds	r25, 0x01AE
     308:	82 2b       	or	r24, r18
     30a:	93 2b       	or	r25, r19
     30c:	90 93 ae 01 	sts	0x01AE, r25
     310:	80 93 ad 01 	sts	0x01AD, r24
     314:	53 c0       	rjmp	.+166    	; 0x3bc <runCmd+0x31e>
		} else {
			writeEEPROM(8 + addr, '0');
     316:	8b 81       	ldd	r24, Y+3	; 0x03
     318:	9c 81       	ldd	r25, Y+4	; 0x04
     31a:	08 96       	adiw	r24, 0x08	; 8
     31c:	60 e3       	ldi	r22, 0x30	; 48
     31e:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			PORTC &= ~(1 << addr);
     322:	85 e3       	ldi	r24, 0x35	; 53
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	25 e3       	ldi	r18, 0x35	; 53
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	f9 01       	movw	r30, r18
     32c:	20 81       	ld	r18, Z
     32e:	62 2f       	mov	r22, r18
     330:	2b 81       	ldd	r18, Y+3	; 0x03
     332:	3c 81       	ldd	r19, Y+4	; 0x04
     334:	a9 01       	movw	r20, r18
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <runCmd+0x2a2>
     33c:	22 0f       	add	r18, r18
     33e:	33 1f       	adc	r19, r19
     340:	4a 95       	dec	r20
     342:	e2 f7       	brpl	.-8      	; 0x33c <runCmd+0x29e>
     344:	20 95       	com	r18
     346:	26 23       	and	r18, r22
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
			sprintf(buf, "UC%c0/65535", code[1]);
     34c:	8b 85       	ldd	r24, Y+11	; 0x0b
     34e:	9c 85       	ldd	r25, Y+12	; 0x0c
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	fc 01       	movw	r30, r24
     354:	80 81       	ld	r24, Z
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	29 2f       	mov	r18, r25
     35c:	2f 93       	push	r18
     35e:	8f 93       	push	r24
     360:	86 e8       	ldi	r24, 0x86	; 134
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	89 2f       	mov	r24, r25
     366:	8f 93       	push	r24
     368:	86 e8       	ldi	r24, 0x86	; 134
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	8f 93       	push	r24
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	89 2f       	mov	r24, r25
     374:	8f 93       	push	r24
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	8f 93       	push	r24
     37c:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
			status ^= ~(1 << (8 + addr));
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	9c 81       	ldd	r25, Y+4	; 0x04
     390:	08 96       	adiw	r24, 0x08	; 8
     392:	9c 01       	movw	r18, r24
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <runCmd+0x300>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	2a 95       	dec	r18
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <runCmd+0x2fc>
     3a2:	80 95       	com	r24
     3a4:	90 95       	com	r25
     3a6:	9c 01       	movw	r18, r24
     3a8:	80 91 ad 01 	lds	r24, 0x01AD
     3ac:	90 91 ae 01 	lds	r25, 0x01AE
     3b0:	82 27       	eor	r24, r18
     3b2:	93 27       	eor	r25, r19
     3b4:	90 93 ae 01 	sts	0x01AE, r25
     3b8:	80 93 ad 01 	sts	0x01AD, r24
		}
		runCmd(buf);
     3bc:	87 e0       	ldi	r24, 0x07	; 7
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
		break;
     3c4:	28 c2       	rjmp	.+1104   	; 0x816 <__stack+0x3b7>
	case 'E':		// set eeprom data
		if (code[2] == 'i')
     3c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ca:	02 96       	adiw	r24, 0x02	; 2
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	89 36       	cpi	r24, 0x69	; 105
     3d2:	c1 f4       	brne	.+48     	; 0x404 <runCmd+0x366>
			for (i = 0; i < 16; i++)
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	19 82       	std	Y+1, r1	; 0x01
     3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <runCmd+0x35a>
				writeEEPROM(i, code[1]);
     3da:	8b 85       	ldd	r24, Y+11	; 0x0b
     3dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 81       	ld	r18, Z
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	62 2f       	mov	r22, r18
     3ea:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
		}
		runCmd(buf);
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
			for (i = 0; i < 16; i++)
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	9a 81       	ldd	r25, Y+2	; 0x02
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
     3fc:	80 31       	cpi	r24, 0x10	; 16
     3fe:	91 05       	cpc	r25, r1
     400:	60 f3       	brcs	.-40     	; 0x3da <runCmd+0x33c>
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
     402:	09 c2       	rjmp	.+1042   	; 0x816 <__stack+0x3b7>
		break;
	case 'E':		// set eeprom data
		if (code[2] == 'i')
			for (i = 0; i < 16; i++)
				writeEEPROM(i, code[1]);
		else if (code[2] == 'f')
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	02 96       	adiw	r24, 0x02	; 2
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	86 36       	cpi	r24, 0x66	; 102
     410:	29 f5       	brne	.+74     	; 0x45c <runCmd+0x3be>
		{
			if(code[1] == 'a')
     412:	8b 85       	ldd	r24, Y+11	; 0x0b
     414:	9c 85       	ldd	r25, Y+12	; 0x0c
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	81 36       	cpi	r24, 0x61	; 97
     41e:	29 f4       	brne	.+10     	; 0x42a <runCmd+0x38c>
				addr = EEPROM_SIZE;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	9c 83       	std	Y+4, r25	; 0x04
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	04 c0       	rjmp	.+8      	; 0x432 <runCmd+0x394>
			else
				addr = 16;
     42a:	80 e1       	ldi	r24, 0x10	; 16
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03
			for (i = 0; i < addr; i++)
     432:	1a 82       	std	Y+2, r1	; 0x02
     434:	19 82       	std	Y+1, r1	; 0x01
     436:	0a c0       	rjmp	.+20     	; 0x44c <runCmd+0x3ae>
				writeEEPROM(i, 0xff);
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	6f ef       	ldi	r22, 0xFF	; 255
     43e:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
		{
			if(code[1] == 'a')
				addr = EEPROM_SIZE;
			else
				addr = 16;
			for (i = 0; i < addr; i++)
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	9a 83       	std	Y+2, r25	; 0x02
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	8b 81       	ldd	r24, Y+3	; 0x03
     44e:	9c 81       	ldd	r25, Y+4	; 0x04
     450:	29 81       	ldd	r18, Y+1	; 0x01
     452:	3a 81       	ldd	r19, Y+2	; 0x02
     454:	28 17       	cp	r18, r24
     456:	39 07       	cpc	r19, r25
     458:	78 f3       	brcs	.-34     	; 0x438 <runCmd+0x39a>
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
     45a:	dd c1       	rjmp	.+954    	; 0x816 <__stack+0x3b7>
			else
				addr = 16;
			for (i = 0; i < addr; i++)
				writeEEPROM(i, 0xff);
		}
		else if (code[2] == 'r')
     45c:	8b 85       	ldd	r24, Y+11	; 0x0b
     45e:	9c 85       	ldd	r25, Y+12	; 0x0c
     460:	02 96       	adiw	r24, 0x02	; 2
     462:	fc 01       	movw	r30, r24
     464:	80 81       	ld	r24, Z
     466:	82 37       	cpi	r24, 0x72	; 114
     468:	79 f4       	brne	.+30     	; 0x488 <__stack+0x29>
			PORTA = ~readEEPROM(code[1]);
     46a:	0b e3       	ldi	r16, 0x3B	; 59
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	8b 85       	ldd	r24, Y+11	; 0x0b
     470:	9c 85       	ldd	r25, Y+12	; 0x0c
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	88 2f       	mov	r24, r24
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     480:	80 95       	com	r24
     482:	f8 01       	movw	r30, r16
     484:	80 83       	st	Z, r24
     486:	9a c0       	rjmp	.+308    	; 0x5bc <__stack+0x15d>
		else if (code[1] == 'R') {
     488:	8b 85       	ldd	r24, Y+11	; 0x0b
     48a:	9c 85       	ldd	r25, Y+12	; 0x0c
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	82 35       	cpi	r24, 0x52	; 82
     494:	09 f0       	breq	.+2      	; 0x498 <__stack+0x39>
     496:	82 c0       	rjmp	.+260    	; 0x59c <__stack+0x13d>
			if (sscanf(code + 2, "%d", &addr) == 1) {
     498:	8b 85       	ldd	r24, Y+11	; 0x0b
     49a:	9c 85       	ldd	r25, Y+12	; 0x0c
     49c:	02 96       	adiw	r24, 0x02	; 2
     49e:	9e 01       	movw	r18, r28
     4a0:	2d 5f       	subi	r18, 0xFD	; 253
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	43 2f       	mov	r20, r19
     4a6:	4f 93       	push	r20
     4a8:	2f 93       	push	r18
     4aa:	22 e9       	ldi	r18, 0x92	; 146
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	23 2f       	mov	r18, r19
     4b0:	2f 93       	push	r18
     4b2:	22 e9       	ldi	r18, 0x92	; 146
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	2f 93       	push	r18
     4b8:	29 2f       	mov	r18, r25
     4ba:	2f 93       	push	r18
     4bc:	8f 93       	push	r24
     4be:	0e 94 2e 09 	call	0x125c	; 0x125c <sscanf>
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	91 05       	cpc	r25, r1
     4d2:	61 f5       	brne	.+88     	; 0x52c <__stack+0xcd>
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	9c 81       	ldd	r25, Y+4	; 0x04
     4d8:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	9c 81       	ldd	r25, Y+4	; 0x04
     4e4:	43 2f       	mov	r20, r19
     4e6:	4f 93       	push	r20
     4e8:	2f 93       	push	r18
     4ea:	29 2f       	mov	r18, r25
     4ec:	2f 93       	push	r18
     4ee:	8f 93       	push	r24
     4f0:	85 e9       	ldi	r24, 0x95	; 149
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	89 2f       	mov	r24, r25
     4f6:	8f 93       	push	r24
     4f8:	85 e9       	ldi	r24, 0x95	; 149
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	8f 93       	push	r24
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	89 2f       	mov	r24, r25
     504:	8f 93       	push	r24
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	8f 93       	push	r24
     50c:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     510:	2d b7       	in	r18, 0x3d	; 61
     512:	3e b7       	in	r19, 0x3e	; 62
     514:	28 5f       	subi	r18, 0xF8	; 248
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
				print(buf);
     522:	87 e0       	ldi	r24, 0x07	; 7
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
     52a:	48 c0       	rjmp	.+144    	; 0x5bc <__stack+0x15d>
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     52c:	1a 82       	std	Y+2, r1	; 0x02
     52e:	19 82       	std	Y+1, r1	; 0x01
     530:	2e c0       	rjmp	.+92     	; 0x58e <__stack+0x12f>
					sprintf(buf, "%d.%x\n", i,
						readEEPROM(i));
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
					sprintf(buf, "%d.%x\n", i,
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	29 2f       	mov	r18, r25
     540:	2f 93       	push	r18
     542:	8f 93       	push	r24
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	8f 93       	push	r24
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	8f 93       	push	r24
     54c:	85 e9       	ldi	r24, 0x95	; 149
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	89 2f       	mov	r24, r25
     552:	8f 93       	push	r24
     554:	85 e9       	ldi	r24, 0x95	; 149
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	8f 93       	push	r24
     55a:	87 e0       	ldi	r24, 0x07	; 7
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	89 2f       	mov	r24, r25
     560:	8f 93       	push	r24
     562:	87 e0       	ldi	r24, 0x07	; 7
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	8f 93       	push	r24
     568:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     56c:	8d b7       	in	r24, 0x3d	; 61
     56e:	9e b7       	in	r25, 0x3e	; 62
     570:	08 96       	adiw	r24, 0x08	; 8
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
						readEEPROM(i));
					print(buf);
     57c:	87 e0       	ldi	r24, 0x07	; 7
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
		else if (code[1] == 'R') {
			if (sscanf(code + 2, "%d", &addr) == 1) {
				sprintf(buf, "%d.%x\n", addr, readEEPROM(addr));
				print(buf);
			} else {
				for (i = 0; i < EEPROM_SIZE; i++) {
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	9a 83       	std	Y+2, r25	; 0x02
     58c:	89 83       	std	Y+1, r24	; 0x01
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	81 15       	cp	r24, r1
     594:	e2 e0       	ldi	r30, 0x02	; 2
     596:	9e 07       	cpc	r25, r30
     598:	60 f2       	brcs	.-104    	; 0x532 <__stack+0xd3>
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
		break;
     59a:	3d c1       	rjmp	.+634    	; 0x816 <__stack+0x3b7>
						readEEPROM(i));
					print(buf);
				}
			}
		} else
			writeEEPROM(code[1], code[2]);
     59c:	8b 85       	ldd	r24, Y+11	; 0x0b
     59e:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a0:	02 96       	adiw	r24, 0x02	; 2
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 81       	ld	r18, Z
     5a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	88 2f       	mov	r24, r24
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	62 2f       	mov	r22, r18
     5b6:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
		break;
     5ba:	2d c1       	rjmp	.+602    	; 0x816 <__stack+0x3b7>
     5bc:	2c c1       	rjmp	.+600    	; 0x816 <__stack+0x3b7>
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
     5be:	8c 85       	ldd	r24, Y+12	; 0x0c
     5c0:	8f 93       	push	r24
     5c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c4:	8f 93       	push	r24
     5c6:	ce 01       	movw	r24, r28
     5c8:	05 96       	adiw	r24, 0x05	; 5
     5ca:	29 2f       	mov	r18, r25
     5cc:	2f 93       	push	r18
     5ce:	8f 93       	push	r24
     5d0:	8c e9       	ldi	r24, 0x9C	; 156
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	89 2f       	mov	r24, r25
     5d6:	8f 93       	push	r24
     5d8:	8c e9       	ldi	r24, 0x9C	; 156
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	8f 93       	push	r24
     5de:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e0:	8f 93       	push	r24
     5e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e4:	8f 93       	push	r24
     5e6:	0e 94 2e 09 	call	0x125c	; 0x125c <sscanf>
     5ea:	2d b7       	in	r18, 0x3d	; 61
     5ec:	3e b7       	in	r19, 0x3e	; 62
     5ee:	28 5f       	subi	r18, 0xF8	; 248
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	91 05       	cpc	r25, r1
     600:	09 f0       	breq	.+2      	; 0x604 <__stack+0x1a5>
     602:	5b c0       	rjmp	.+182    	; 0x6ba <__stack+0x25b>
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	9e 81       	ldd	r25, Y+6	; 0x06
     608:	89 2f       	mov	r24, r25
     60a:	99 27       	eor	r25, r25
     60c:	48 2f       	mov	r20, r24
     60e:	80 91 6b 01 	lds	r24, 0x016B
     612:	90 91 6c 01 	lds	r25, 0x016C
     616:	9c 01       	movw	r18, r24
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	31 09       	sbc	r19, r1
     61c:	30 93 6c 01 	sts	0x016C, r19
     620:	20 93 6b 01 	sts	0x016B, r18
     624:	64 2f       	mov	r22, r20
     626:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			writeEEPROM(stackTail--, (uint8_t) time);
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	48 2f       	mov	r20, r24
     630:	80 91 6b 01 	lds	r24, 0x016B
     634:	90 91 6c 01 	lds	r25, 0x016C
     638:	9c 01       	movw	r18, r24
     63a:	21 50       	subi	r18, 0x01	; 1
     63c:	31 09       	sbc	r19, r1
     63e:	30 93 6c 01 	sts	0x016C, r19
     642:	20 93 6b 01 	sts	0x016B, r18
     646:	64 2f       	mov	r22, r20
     648:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			for (i = 0; i < strlen(code); i++) {
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	1b c0       	rjmp	.+54     	; 0x688 <__stack+0x229>
				writeEEPROM(stackTail--, code[i]);
     652:	2b 85       	ldd	r18, Y+11	; 0x0b
     654:	3c 85       	ldd	r19, Y+12	; 0x0c
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	fc 01       	movw	r30, r24
     660:	40 81       	ld	r20, Z
     662:	80 91 6b 01 	lds	r24, 0x016B
     666:	90 91 6c 01 	lds	r25, 0x016C
     66a:	9c 01       	movw	r18, r24
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	31 09       	sbc	r19, r1
     670:	30 93 6c 01 	sts	0x016C, r19
     674:	20 93 6b 01 	sts	0x016B, r18
     678:	64 2f       	mov	r22, r20
     67a:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
		break;
	case 'T':		// Timer
		if (sscanf(code, "T%d%s", &time, code) == 2) {
			writeEEPROM(stackTail--, (uint8_t) (time >> 8));
			writeEEPROM(stackTail--, (uint8_t) time);
			for (i = 0; i < strlen(code); i++) {
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	9a 83       	std	Y+2, r25	; 0x02
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	8b 85       	ldd	r24, Y+11	; 0x0b
     68a:	9c 85       	ldd	r25, Y+12	; 0x0c
     68c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <strlen>
     690:	9c 01       	movw	r18, r24
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	82 17       	cp	r24, r18
     698:	93 07       	cpc	r25, r19
     69a:	d8 f2       	brcs	.-74     	; 0x652 <__stack+0x1f3>
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
     69c:	80 91 6b 01 	lds	r24, 0x016B
     6a0:	90 91 6c 01 	lds	r25, 0x016C
     6a4:	9c 01       	movw	r18, r24
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	31 09       	sbc	r19, r1
     6aa:	30 93 6c 01 	sts	0x016C, r19
     6ae:	20 93 6b 01 	sts	0x016B, r18
     6b2:	6a e0       	ldi	r22, 0x0A	; 10
     6b4:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
		} else {
			print("Wrong code!\n");
			return;
		}
		break;
     6b8:	ae c0       	rjmp	.+348    	; 0x816 <__stack+0x3b7>
			for (i = 0; i < strlen(code); i++) {
				writeEEPROM(stackTail--, code[i]);
			}
			writeEEPROM(stackTail--, '\n');
		} else {
			print("Wrong code!\n");
     6ba:	82 ea       	ldi	r24, 0xA2	; 162
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
			return;
     6c2:	a9 c0       	rjmp	.+338    	; 0x816 <__stack+0x3b7>
		}
		break;
	case 'U':		// Duty of each pin
		if (sscanf(code, "U%c%c%d/%d", &port, &pin, &time, &time1) == 4) {
     6c4:	ce 01       	movw	r24, r28
     6c6:	07 96       	adiw	r24, 0x07	; 7
     6c8:	29 2f       	mov	r18, r25
     6ca:	2f 93       	push	r18
     6cc:	8f 93       	push	r24
     6ce:	ce 01       	movw	r24, r28
     6d0:	05 96       	adiw	r24, 0x05	; 5
     6d2:	29 2f       	mov	r18, r25
     6d4:	2f 93       	push	r18
     6d6:	8f 93       	push	r24
     6d8:	ce 01       	movw	r24, r28
     6da:	0a 96       	adiw	r24, 0x0a	; 10
     6dc:	29 2f       	mov	r18, r25
     6de:	2f 93       	push	r18
     6e0:	8f 93       	push	r24
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	29 2f       	mov	r18, r25
     6e8:	2f 93       	push	r18
     6ea:	8f 93       	push	r24
     6ec:	8f ea       	ldi	r24, 0xAF	; 175
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	89 2f       	mov	r24, r25
     6f2:	8f 93       	push	r24
     6f4:	8f ea       	ldi	r24, 0xAF	; 175
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	8f 93       	push	r24
     6fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     6fc:	8f 93       	push	r24
     6fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     700:	8f 93       	push	r24
     702:	0e 94 2e 09 	call	0x125c	; 0x125c <sscanf>
     706:	2d b7       	in	r18, 0x3d	; 61
     708:	3e b7       	in	r19, 0x3e	; 62
     70a:	24 5f       	subi	r18, 0xF4	; 244
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	84 30       	cpi	r24, 0x04	; 4
     71a:	91 05       	cpc	r25, r1
     71c:	09 f0       	breq	.+2      	; 0x720 <__stack+0x2c1>
     71e:	5b c0       	rjmp	.+182    	; 0x7d6 <__stack+0x377>
			if (port == 'A')
     720:	89 85       	ldd	r24, Y+9	; 0x09
     722:	81 34       	cpi	r24, 0x41	; 65
     724:	29 f4       	brne	.+10     	; 0x730 <__stack+0x2d1>
				addr = 16;
     726:	80 e1       	ldi	r24, 0x10	; 16
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9c 83       	std	Y+4, r25	; 0x04
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	0d c0       	rjmp	.+26     	; 0x74a <__stack+0x2eb>
			else if (port == 'C')
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	83 34       	cpi	r24, 0x43	; 67
     734:	29 f4       	brne	.+10     	; 0x740 <__stack+0x2e1>
				addr = 48;
     736:	80 e3       	ldi	r24, 0x30	; 48
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	05 c0       	rjmp	.+10     	; 0x74a <__stack+0x2eb>
			else {
				printf("Wrong port\n");
     740:	8a eb       	ldi	r24, 0xBA	; 186
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 df 08 	call	0x11be	; 0x11be <puts>
				return;
     748:	66 c0       	rjmp	.+204    	; 0x816 <__stack+0x3b7>
			}
			if (pin - '0' < 10 && pin - '0' >= 0)
     74a:	8a 85       	ldd	r24, Y+10	; 0x0a
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	c0 97       	sbiw	r24, 0x30	; 48
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	91 05       	cpc	r25, r1
     756:	ac f4       	brge	.+42     	; 0x782 <__stack+0x323>
     758:	8a 85       	ldd	r24, Y+10	; 0x0a
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	c0 97       	sbiw	r24, 0x30	; 48
     760:	99 23       	and	r25, r25
     762:	7c f0       	brlt	.+30     	; 0x782 <__stack+0x323>
				addr += (pin - '0') * 4;
     764:	8a 85       	ldd	r24, Y+10	; 0x0a
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	c0 97       	sbiw	r24, 0x30	; 48
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	9c 01       	movw	r18, r24
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	82 0f       	add	r24, r18
     77c:	93 1f       	adc	r25, r19
     77e:	9c 83       	std	Y+4, r25	; 0x04
     780:	8b 83       	std	Y+3, r24	; 0x03
			writeEEPROM(addr, time >> 8);
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	89 2f       	mov	r24, r25
     788:	99 27       	eor	r25, r25
     78a:	28 2f       	mov	r18, r24
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	62 2f       	mov	r22, r18
     792:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			writeEEPROM(addr + 1, time);
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	9e 81       	ldd	r25, Y+6	; 0x06
     79a:	28 2f       	mov	r18, r24
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	62 2f       	mov	r22, r18
     7a4:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			writeEEPROM(addr + 2, time1 >> 8);
     7a8:	8f 81       	ldd	r24, Y+7	; 0x07
     7aa:	98 85       	ldd	r25, Y+8	; 0x08
     7ac:	89 2f       	mov	r24, r25
     7ae:	99 27       	eor	r25, r25
     7b0:	28 2f       	mov	r18, r24
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	02 96       	adiw	r24, 0x02	; 2
     7b8:	62 2f       	mov	r22, r18
     7ba:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			writeEEPROM(addr + 3, time1);
     7be:	8f 81       	ldd	r24, Y+7	; 0x07
     7c0:	98 85       	ldd	r25, Y+8	; 0x08
     7c2:	28 2f       	mov	r18, r24
     7c4:	8b 81       	ldd	r24, Y+3	; 0x03
     7c6:	9c 81       	ldd	r25, Y+4	; 0x04
     7c8:	03 96       	adiw	r24, 0x03	; 3
     7ca:	62 2f       	mov	r22, r18
     7cc:	0e 94 16 04 	call	0x82c	; 0x82c <writeEEPROM>
			setDuty();
     7d0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <setDuty>
		}
		break;
     7d4:	20 c0       	rjmp	.+64     	; 0x816 <__stack+0x3b7>
     7d6:	1f c0       	rjmp	.+62     	; 0x816 <__stack+0x3b7>
	default:
		sprintf(buf, "Unrecognised code:%s\n", code);
     7d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7da:	8f 93       	push	r24
     7dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7de:	8f 93       	push	r24
     7e0:	85 ec       	ldi	r24, 0xC5	; 197
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	89 2f       	mov	r24, r25
     7e6:	8f 93       	push	r24
     7e8:	85 ec       	ldi	r24, 0xC5	; 197
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8f 93       	push	r24
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	89 2f       	mov	r24, r25
     7f4:	8f 93       	push	r24
     7f6:	87 e0       	ldi	r24, 0x07	; 7
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	8f 93       	push	r24
     7fc:	0e 94 0c 09 	call	0x1218	; 0x1218 <sprintf>
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
		print(buf);
     80c:	87 e0       	ldi	r24, 0x07	; 7
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
		break;
     814:	00 00       	nop
	}
}
     816:	2c 96       	adiw	r28, 0x0c	; 12
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <writeEEPROM>:
				Bit 2 and bit 2 is the time of low voltage
		X - 511: Commands will be executed at boot
*/

void writeEEPROM(unsigned int addr, unsigned char data)
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <writeEEPROM+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	6b 83       	std	Y+3, r22	; 0x03
	while (EECR & (1 << EEWE)) ;
     83e:	00 00       	nop
     840:	8c e3       	ldi	r24, 0x3C	; 60
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	82 70       	andi	r24, 0x02	; 2
     84e:	99 27       	eor	r25, r25
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	b1 f7       	brne	.-20     	; 0x840 <writeEEPROM+0x14>
	EEAR = addr;
     854:	8e e3       	ldi	r24, 0x3E	; 62
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	29 81       	ldd	r18, Y+1	; 0x01
     85a:	3a 81       	ldd	r19, Y+2	; 0x02
     85c:	fc 01       	movw	r30, r24
     85e:	31 83       	std	Z+1, r19	; 0x01
     860:	20 83       	st	Z, r18
	EEDR = data;
     862:	8d e3       	ldi	r24, 0x3D	; 61
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	2b 81       	ldd	r18, Y+3	; 0x03
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
	EECR |= 1 << EEMWE;
     86c:	8c e3       	ldi	r24, 0x3C	; 60
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2c e3       	ldi	r18, 0x3C	; 60
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	24 60       	ori	r18, 0x04	; 4
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
	EECR |= 1 << EEWE;
     87e:	8c e3       	ldi	r24, 0x3C	; 60
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	2c e3       	ldi	r18, 0x3C	; 60
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	22 60       	ori	r18, 0x02	; 2
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
}
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <readEEPROM>:

unsigned char readEEPROM(unsigned int addr)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <readEEPROM+0x6>
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	89 83       	std	Y+1, r24	; 0x01
	while (EECR & (1 << EEWE)) ;
     8aa:	00 00       	nop
     8ac:	8c e3       	ldi	r24, 0x3C	; 60
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	fc 01       	movw	r30, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	82 70       	andi	r24, 0x02	; 2
     8ba:	99 27       	eor	r25, r25
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	b1 f7       	brne	.-20     	; 0x8ac <readEEPROM+0x10>
	EEAR = addr;
     8c0:	8e e3       	ldi	r24, 0x3E	; 62
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	29 81       	ldd	r18, Y+1	; 0x01
     8c6:	3a 81       	ldd	r19, Y+2	; 0x02
     8c8:	fc 01       	movw	r30, r24
     8ca:	31 83       	std	Z+1, r19	; 0x01
     8cc:	20 83       	st	Z, r18
	EECR |= 1 << EERE;
     8ce:	8c e3       	ldi	r24, 0x3C	; 60
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2c e3       	ldi	r18, 0x3C	; 60
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	21 60       	ori	r18, 0x01	; 1
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
	return EEDR;
     8e0:	8d e3       	ldi	r24, 0x3D	; 61
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
}
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <setDuty>:

void setDuty()
{
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	1f 92       	push	r1
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     904:	80 e1       	ldi	r24, 0x10	; 16
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	54 c0       	rjmp	.+168    	; 0x9b2 <setDuty+0xc0>
		dutyH[(i - 16) / 4] =
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	40 97       	sbiw	r24, 0x10	; 16
     912:	99 23       	and	r25, r25
     914:	0c f4       	brge	.+2      	; 0x918 <setDuty+0x26>
     916:	03 96       	adiw	r24, 0x03	; 3
     918:	95 95       	asr	r25
     91a:	87 95       	ror	r24
     91c:	95 95       	asr	r25
     91e:	87 95       	ror	r24
     920:	8c 01       	movw	r16, r24
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	88 2f       	mov	r24, r24
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	f8 2e       	mov	r15, r24
     932:	ee 24       	eor	r14, r14
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	97 01       	movw	r18, r14
     946:	28 2b       	or	r18, r24
     948:	39 2b       	or	r19, r25

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
     94a:	c8 01       	movw	r24, r16
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	83 59       	subi	r24, 0x93	; 147
     952:	9e 4f       	sbci	r25, 0xFE	; 254
     954:	fc 01       	movw	r30, r24
     956:	31 83       	std	Z+1, r19	; 0x01
     958:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	40 97       	sbiw	r24, 0x10	; 16
     962:	99 23       	and	r25, r25
     964:	0c f4       	brge	.+2      	; 0x968 <setDuty+0x76>
     966:	03 96       	adiw	r24, 0x03	; 3
     968:	95 95       	asr	r25
     96a:	87 95       	ror	r24
     96c:	95 95       	asr	r25
     96e:	87 95       	ror	r24
     970:	8c 01       	movw	r16, r24
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	88 2f       	mov	r24, r24
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	f8 2e       	mov	r15, r24
     984:	ee 24       	eor	r14, r14
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	03 96       	adiw	r24, 0x03	; 3
     98e:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	97 01       	movw	r18, r14
     998:	28 2b       	or	r18, r24
     99a:	39 2b       	or	r19, r25
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
		dutyH[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
     99c:	c8 01       	movw	r24, r16
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	83 57       	subi	r24, 0x73	; 115
     9a4:	9e 4f       	sbci	r25, 0xFE	; 254
     9a6:	fc 01       	movw	r30, r24
     9a8:	31 83       	std	Z+1, r19	; 0x01
     9aa:	20 83       	st	Z, r18
}

void setDuty()
{
	uint8_t i;
	for (i = 0 + 16; i < 64 + 16; i += 4) {
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	8c 5f       	subi	r24, 0xFC	; 252
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	80 35       	cpi	r24, 0x50	; 80
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <setDuty+0xc8>
     9b8:	a8 cf       	rjmp	.-176    	; 0x90a <setDuty+0x18>
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     9ba:	19 82       	std	Y+1, r1	; 0x01
     9bc:	3f c0       	rjmp	.+126    	; 0xa3c <setDuty+0x14a>
		if (status & (1 << i))
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <setDuty+0xdc>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	2a 95       	dec	r18
     9d0:	e2 f7       	brpl	.-8      	; 0x9ca <setDuty+0xd8>
     9d2:	9c 01       	movw	r18, r24
     9d4:	80 91 ad 01 	lds	r24, 0x01AD
     9d8:	90 91 ae 01 	lds	r25, 0x01AE
     9dc:	82 23       	and	r24, r18
     9de:	93 23       	and	r25, r19
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a9 f0       	breq	.+42     	; 0xa0e <setDuty+0x11c>
			m[i] = dutyH[i];
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	29 81       	ldd	r18, Y+1	; 0x01
     9ec:	22 2f       	mov	r18, r18
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	23 59       	subi	r18, 0x93	; 147
     9f6:	3e 4f       	sbci	r19, 0xFE	; 254
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	81 55       	subi	r24, 0x51	; 81
     a04:	9e 4f       	sbci	r25, 0xFE	; 254
     a06:	fc 01       	movw	r30, r24
     a08:	31 83       	std	Z+1, r19	; 0x01
     a0a:	20 83       	st	Z, r18
     a0c:	14 c0       	rjmp	.+40     	; 0xa36 <setDuty+0x144>
		else
			m[i] = dutyL[i];
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	29 81       	ldd	r18, Y+1	; 0x01
     a16:	22 2f       	mov	r18, r18
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
     a1e:	23 57       	subi	r18, 0x73	; 115
     a20:	3e 4f       	sbci	r19, 0xFE	; 254
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	31 81       	ldd	r19, Z+1	; 0x01
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	81 55       	subi	r24, 0x51	; 81
     a2e:	9e 4f       	sbci	r25, 0xFE	; 254
     a30:	fc 01       	movw	r30, r24
     a32:	31 83       	std	Z+1, r19	; 0x01
     a34:	20 83       	st	Z, r18
		    ((uint16_t) readEEPROM(i)) << 8 | readEEPROM(i + 1);
		dutyL[(i - 16) / 4] =
		    ((uint16_t) readEEPROM(i + 2)) << 8 | readEEPROM(i + 3);
	}

	for (i = 0; i < 16; i++) {
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	08 f4       	brcc	.+2      	; 0xa44 <setDuty+0x152>
     a42:	bd cf       	rjmp	.-134    	; 0x9be <setDuty+0xcc>
		if (status & (1 << i))
			m[i] = dutyH[i];
		else
			m[i] = dutyL[i];
	}
}
     a44:	0f 90       	pop	r0
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <__vector_9>:

uint16_t m[16];


ISR(TIMER0_OVF_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	00 90 5f 00 	lds	r0, 0x005F
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	c8 56       	subi	r28, 0x68	; 104
     a86:	d1 09       	sbc	r29, r1
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	cd bf       	out	0x3d, r28	; 61
	static uint16_t seconds;
	static uint16_t p = EEPROM_SIZE - 1;
	uint16_t time, i;
	char cmd[100];

	t++;
     a8c:	80 91 00 01 	lds	r24, 0x0100
     a90:	90 91 01 01 	lds	r25, 0x0101
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	90 93 01 01 	sts	0x0101, r25
     a9a:	80 93 00 01 	sts	0x0100, r24
	if (t > F_CPU / 256 / 1024) {
     a9e:	80 91 00 01 	lds	r24, 0x0100
     aa2:	90 91 01 01 	lds	r25, 0x0101
     aa6:	8e 33       	cpi	r24, 0x3E	; 62
     aa8:	91 05       	cpc	r25, r1
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__vector_9+0x5a>
     aac:	9a c0       	rjmp	.+308    	; 0xbe2 <__vector_9+0x18e>
		t = 0;
     aae:	10 92 01 01 	sts	0x0101, r1
     ab2:	10 92 00 01 	sts	0x0100, r1
		seconds++;
     ab6:	80 91 02 01 	lds	r24, 0x0102
     aba:	90 91 03 01 	lds	r25, 0x0103
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	90 93 03 01 	sts	0x0103, r25
     ac4:	80 93 02 01 	sts	0x0102, r24
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     ac8:	80 91 60 00 	lds	r24, 0x0060
     acc:	90 91 61 00 	lds	r25, 0x0061
     ad0:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	18 2f       	mov	r17, r24
     ada:	00 27       	eor	r16, r16
		    readEEPROM(p - 1);
     adc:	80 91 60 00 	lds	r24, 0x0060
     ae0:	90 91 61 00 	lds	r25, 0x0061
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
		    ((uint16_t) readEEPROM(p)) << 8 |
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0

	t++;
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		seconds++;
		time =
     aee:	80 2b       	or	r24, r16
     af0:	91 2b       	or	r25, r17
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	8f 3f       	cpi	r24, 0xFF	; 255
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	92 07       	cpc	r25, r18
     b00:	09 f4       	brne	.+2      	; 0xb04 <__vector_9+0xb0>
     b02:	6f c0       	rjmp	.+222    	; 0xbe2 <__vector_9+0x18e>
			if (seconds >= time) {
     b04:	20 91 02 01 	lds	r18, 0x0102
     b08:	30 91 03 01 	lds	r19, 0x0103
     b0c:	8b 81       	ldd	r24, Y+3	; 0x03
     b0e:	9c 81       	ldd	r25, Y+4	; 0x04
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	08 f4       	brcc	.+2      	; 0xb18 <__vector_9+0xc4>
     b16:	65 c0       	rjmp	.+202    	; 0xbe2 <__vector_9+0x18e>
				p -= 2;
     b18:	80 91 60 00 	lds	r24, 0x0060
     b1c:	90 91 61 00 	lds	r25, 0x0061
     b20:	02 97       	sbiw	r24, 0x02	; 2
     b22:	90 93 61 00 	sts	0x0061, r25
     b26:	80 93 60 00 	sts	0x0060, r24
				for (i = 0;; i++, p--) {
     b2a:	1a 82       	std	Y+2, r1	; 0x02
     b2c:	19 82       	std	Y+1, r1	; 0x01
					cmd[i] = readEEPROM(p);
     b2e:	80 91 60 00 	lds	r24, 0x0060
     b32:	90 91 61 00 	lds	r25, 0x0061
     b36:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
     b3a:	48 2f       	mov	r20, r24
     b3c:	9e 01       	movw	r18, r28
     b3e:	2b 5f       	subi	r18, 0xFB	; 251
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	9a 81       	ldd	r25, Y+2	; 0x02
     b46:	82 0f       	add	r24, r18
     b48:	93 1f       	adc	r25, r19
     b4a:	fc 01       	movw	r30, r24
     b4c:	40 83       	st	Z, r20
					if (cmd[i] == '\n' || cmd[i] == 19) {
     b4e:	9e 01       	movw	r18, r28
     b50:	2b 5f       	subi	r18, 0xFB	; 251
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	8a 30       	cpi	r24, 0x0A	; 10
     b62:	59 f0       	breq	.+22     	; 0xb7a <__vector_9+0x126>
     b64:	9e 01       	movw	r18, r28
     b66:	2b 5f       	subi	r18, 0xFB	; 251
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	83 31       	cpi	r24, 0x13	; 19
     b78:	29 f5       	brne	.+74     	; 0xbc4 <__vector_9+0x170>
					    cmd[i + 1] = 0;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	9e 01       	movw	r18, r28
     b82:	2b 5f       	subi	r18, 0xFB	; 251
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	82 0f       	add	r24, r18
     b88:	93 1f       	adc	r25, r19
     b8a:	fc 01       	movw	r30, r24
     b8c:	10 82       	st	Z, r1
						p--;
     b8e:	80 91 60 00 	lds	r24, 0x0060
     b92:	90 91 61 00 	lds	r25, 0x0061
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	90 93 61 00 	sts	0x0061, r25
     b9c:	80 93 60 00 	sts	0x0060, r24
						break;
     ba0:	00 00       	nop
					}
				}
				print("Auto running command:");
     ba2:	8b ed       	ldi	r24, 0xDB	; 219
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
				print(cmd);
     baa:	ce 01       	movw	r24, r28
     bac:	05 96       	adiw	r24, 0x05	; 5
     bae:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
				runCmd(cmd);
     bb2:	ce 01       	movw	r24, r28
     bb4:	05 96       	adiw	r24, 0x05	; 5
     bb6:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
				seconds = 0;
     bba:	10 92 03 01 	sts	0x0103, r1
     bbe:	10 92 02 01 	sts	0x0102, r1
     bc2:	0f c0       	rjmp	.+30     	; 0xbe2 <__vector_9+0x18e>
		    ((uint16_t) readEEPROM(p)) << 8 |
		    readEEPROM(p - 1);
		if (time != 0xffff) {
			if (seconds >= time) {
				p -= 2;
				for (i = 0;; i++, p--) {
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	9a 81       	ldd	r25, Y+2	; 0x02
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	80 91 60 00 	lds	r24, 0x0060
     bd2:	90 91 61 00 	lds	r25, 0x0061
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	90 93 61 00 	sts	0x0061, r25
     bdc:	80 93 60 00 	sts	0x0060, r24
					if (cmd[i] == '\n' || cmd[i] == 19) {
					    cmd[i + 1] = 0;
						p--;
						break;
					}
				}
     be0:	a6 cf       	rjmp	.-180    	; 0xb2e <__vector_9+0xda>
				runCmd(cmd);
				seconds = 0;
			}
		}
	}
}
     be2:	c8 59       	subi	r28, 0x98	; 152
     be4:	df 4f       	sbci	r29, 0xFF	; 255
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	bf 91       	pop	r27
     bfa:	af 91       	pop	r26
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	7f 91       	pop	r23
     c02:	6f 91       	pop	r22
     c04:	5f 91       	pop	r21
     c06:	4f 91       	pop	r20
     c08:	3f 91       	pop	r19
     c0a:	2f 91       	pop	r18
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	0f 90       	pop	r0
     c12:	00 92 5f 00 	sts	0x005F, r0
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <__vector_4>:

ISR(TIMER2_OVF_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	00 90 5f 00 	lds	r0, 0x005F
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <__vector_4+0x24>
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
	static uint16_t t;
	static uint8_t sec;
	uint16_t i;

	t++;
     c44:	80 91 04 01 	lds	r24, 0x0104
     c48:	90 91 05 01 	lds	r25, 0x0105
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	90 93 05 01 	sts	0x0105, r25
     c52:	80 93 04 01 	sts	0x0104, r24
	if (t > F_CPU / 256 / 1024) {
     c56:	80 91 04 01 	lds	r24, 0x0104
     c5a:	90 91 05 01 	lds	r25, 0x0105
     c5e:	8e 33       	cpi	r24, 0x3E	; 62
     c60:	91 05       	cpc	r25, r1
     c62:	08 f4       	brcc	.+2      	; 0xc66 <__vector_4+0x4a>
     c64:	bb c0       	rjmp	.+374    	; 0xddc <__vector_4+0x1c0>
		t = 0;
     c66:	10 92 05 01 	sts	0x0105, r1
     c6a:	10 92 04 01 	sts	0x0104, r1
		sec++;
     c6e:	80 91 06 01 	lds	r24, 0x0106
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	80 93 06 01 	sts	0x0106, r24
		if (sec >= 60) {
     c78:	80 91 06 01 	lds	r24, 0x0106
     c7c:	8c 33       	cpi	r24, 0x3C	; 60
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <__vector_4+0x66>
     c80:	ad c0       	rjmp	.+346    	; 0xddc <__vector_4+0x1c0>
			sec = 0;
     c82:	10 92 06 01 	sts	0x0106, r1
			for (i = 0; i < 16; i++) {
     c86:	1a 82       	std	Y+2, r1	; 0x02
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	a2 c0       	rjmp	.+324    	; 0xdd0 <__vector_4+0x1b4>
				if (m[i] > 0) {
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	81 55       	subi	r24, 0x51	; 81
     c96:	9e 4f       	sbci	r25, 0xFE	; 254
     c98:	fc 01       	movw	r30, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	b1 f0       	breq	.+44     	; 0xcce <__vector_4+0xb2>
					m[i]--;
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	81 55       	subi	r24, 0x51	; 81
     cac:	9e 4f       	sbci	r25, 0xFE	; 254
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	9c 01       	movw	r18, r24
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	31 09       	sbc	r19, r1
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	81 55       	subi	r24, 0x51	; 81
     cc4:	9e 4f       	sbci	r25, 0xFE	; 254
     cc6:	fc 01       	movw	r30, r24
     cc8:	31 83       	std	Z+1, r19	; 0x01
     cca:	20 83       	st	Z, r18
     ccc:	7c c0       	rjmp	.+248    	; 0xdc6 <__vector_4+0x1aa>
				} else {
					if (i < 8) {
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	88 30       	cpi	r24, 0x08	; 8
     cd4:	91 05       	cpc	r25, r1
     cd6:	a8 f4       	brcc	.+42     	; 0xd02 <__vector_4+0xe6>
						PORTA ^= 1 << i;
     cd8:	8b e3       	ldi	r24, 0x3B	; 59
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	2b e3       	ldi	r18, 0x3B	; 59
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	f9 01       	movw	r30, r18
     ce2:	20 81       	ld	r18, Z
     ce4:	62 2f       	mov	r22, r18
     ce6:	49 81       	ldd	r20, Y+1	; 0x01
     ce8:	5a 81       	ldd	r21, Y+2	; 0x02
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	04 2e       	mov	r0, r20
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <__vector_4+0xda>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <__vector_4+0xd6>
     cfa:	26 27       	eor	r18, r22
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
     d00:	17 c0       	rjmp	.+46     	; 0xd30 <__vector_4+0x114>
					} else {
						PORTC ^= 1 << (i - 8);
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	25 e3       	ldi	r18, 0x35	; 53
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	62 2f       	mov	r22, r18
     d10:	29 81       	ldd	r18, Y+1	; 0x01
     d12:	3a 81       	ldd	r19, Y+2	; 0x02
     d14:	28 50       	subi	r18, 0x08	; 8
     d16:	31 09       	sbc	r19, r1
     d18:	a9 01       	movw	r20, r18
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	04 2e       	mov	r0, r20
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <__vector_4+0x10a>
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <__vector_4+0x106>
     d2a:	26 27       	eor	r18, r22
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
					}

					if (status & 1 << i) {
     d30:	29 81       	ldd	r18, Y+1	; 0x01
     d32:	3a 81       	ldd	r19, Y+2	; 0x02
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <__vector_4+0x122>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	2a 95       	dec	r18
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <__vector_4+0x11e>
     d42:	9c 01       	movw	r18, r24
     d44:	80 91 ad 01 	lds	r24, 0x01AD
     d48:	90 91 ae 01 	lds	r25, 0x01AE
     d4c:	82 23       	and	r24, r18
     d4e:	93 23       	and	r25, r19
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	99 f0       	breq	.+38     	; 0xd7a <__vector_4+0x15e>
						m[i] = dutyL[i];
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	83 57       	subi	r24, 0x73	; 115
     d5e:	9e 4f       	sbci	r25, 0xFE	; 254
     d60:	fc 01       	movw	r30, r24
     d62:	20 81       	ld	r18, Z
     d64:	31 81       	ldd	r19, Z+1	; 0x01
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	81 55       	subi	r24, 0x51	; 81
     d70:	9e 4f       	sbci	r25, 0xFE	; 254
     d72:	fc 01       	movw	r30, r24
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
     d78:	12 c0       	rjmp	.+36     	; 0xd9e <__vector_4+0x182>
					} else {
						m[i] = dutyH[i];
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	83 59       	subi	r24, 0x93	; 147
     d84:	9e 4f       	sbci	r25, 0xFE	; 254
     d86:	fc 01       	movw	r30, r24
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	81 55       	subi	r24, 0x51	; 81
     d96:	9e 4f       	sbci	r25, 0xFE	; 254
     d98:	fc 01       	movw	r30, r24
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	20 83       	st	Z, r18
					}
					status ^= 1 << i;
     d9e:	29 81       	ldd	r18, Y+1	; 0x01
     da0:	3a 81       	ldd	r19, Y+2	; 0x02
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <__vector_4+0x190>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	2a 95       	dec	r18
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <__vector_4+0x18c>
     db0:	9c 01       	movw	r18, r24
     db2:	80 91 ad 01 	lds	r24, 0x01AD
     db6:	90 91 ae 01 	lds	r25, 0x01AE
     dba:	82 27       	eor	r24, r18
     dbc:	93 27       	eor	r25, r19
     dbe:	90 93 ae 01 	sts	0x01AE, r25
     dc2:	80 93 ad 01 	sts	0x01AD, r24
	if (t > F_CPU / 256 / 1024) {
		t = 0;
		sec++;
		if (sec >= 60) {
			sec = 0;
			for (i = 0; i < 16; i++) {
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	80 31       	cpi	r24, 0x10	; 16
     dd6:	91 05       	cpc	r25, r1
     dd8:	08 f4       	brcc	.+2      	; 0xddc <__vector_4+0x1c0>
     dda:	58 cf       	rjmp	.-336    	; 0xc8c <__vector_4+0x70>
					status ^= 1 << i;
				}
			}
		}
	}
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	00 92 5f 00 	sts	0x005F, r0
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_11>:

ISR(USART_RXC_vect)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	00 90 5f 00 	lds	r0, 0x005F
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	c5 56       	subi	r28, 0x65	; 101
     e34:	d1 09       	sbc	r29, r1
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	cd bf       	out	0x3d, r28	; 61
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     e3a:	19 82       	std	Y+1, r1	; 0x01
     e3c:	32 c0       	rjmp	.+100    	; 0xea2 <__vector_11+0xa0>
		codeUSART[i] = receiveUSART();
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	08 2f       	mov	r16, r24
     e42:	10 e0       	ldi	r17, 0x00	; 0
     e44:	0e 94 a6 08 	call	0x114c	; 0x114c <receiveUSART>
     e48:	28 2f       	mov	r18, r24
     e4a:	ce 01       	movw	r24, r28
     e4c:	02 96       	adiw	r24, 0x02	; 2
     e4e:	80 0f       	add	r24, r16
     e50:	91 1f       	adc	r25, r17
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
		if (codeUSART[i] == 19 || codeUSART[i] == '\n') {
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9e 01       	movw	r18, r28
     e5e:	2e 5f       	subi	r18, 0xFE	; 254
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	83 31       	cpi	r24, 0x13	; 19
     e6c:	61 f0       	breq	.+24     	; 0xe86 <__vector_11+0x84>
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9e 01       	movw	r18, r28
     e76:	2e 5f       	subi	r18, 0xFE	; 254
     e78:	3f 4f       	sbci	r19, 0xFF	; 255
     e7a:	82 0f       	add	r24, r18
     e7c:	93 1f       	adc	r25, r19
     e7e:	fc 01       	movw	r30, r24
     e80:	80 81       	ld	r24, Z
     e82:	8a 30       	cpi	r24, 0x0A	; 10
     e84:	59 f4       	brne	.+22     	; 0xe9c <__vector_11+0x9a>
			codeUSART[i] = '\0';
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9e 01       	movw	r18, r28
     e8e:	2e 5f       	subi	r18, 0xFE	; 254
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	fc 01       	movw	r30, r24
     e98:	10 82       	st	Z, r1
			break;
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <__vector_11+0xa6>
ISR(USART_RXC_vect)
{
	char codeUSART[MAXCMDLEN];
	uint8_t i;

	for (i = 0; i < MAXCMDLEN; i++) {
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	84 36       	cpi	r24, 0x64	; 100
     ea6:	58 f2       	brcs	.-106    	; 0xe3e <__vector_11+0x3c>
			codeUSART[i] = '\0';
			break;
		}
	}

	if (codeUSART[0]) {
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 23       	and	r24, r24
     eac:	49 f1       	breq	.+82     	; 0xf00 <__vector_11+0xfe>
		print("\nReceived:\n");
     eae:	81 ef       	ldi	r24, 0xF1	; 241
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
		for (i = 0; i < MAXCMDLEN; i++) {
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <__vector_11+0xf0>
			sendUSART(codeUSART[i]);
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9e 01       	movw	r18, r28
     ec2:	2e 5f       	subi	r18, 0xFE	; 254
     ec4:	3f 4f       	sbci	r19, 0xFF	; 255
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	fc 01       	movw	r30, r24
     ecc:	80 81       	ld	r24, Z
     ece:	0e 94 8c 08 	call	0x1118	; 0x1118 <sendUSART>
			if (codeUSART[i] == '\0')
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 01       	movw	r18, r28
     eda:	2e 5f       	subi	r18, 0xFE	; 254
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	fc 01       	movw	r30, r24
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_11+0xea>
				break;
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <__vector_11+0xf6>
		}
	}

	if (codeUSART[0]) {
		print("\nReceived:\n");
		for (i = 0; i < MAXCMDLEN; i++) {
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	84 36       	cpi	r24, 0x64	; 100
     ef6:	08 f3       	brcs	.-62     	; 0xeba <__vector_11+0xb8>
			sendUSART(codeUSART[i]);
			if (codeUSART[i] == '\0')
				break;
		}
		print("\n");
     ef8:	8d ef       	ldi	r24, 0xFD	; 253
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 b8 08 	call	0x1170	; 0x1170 <print>
	}

	runCmd(codeUSART);
     f00:	ce 01       	movw	r24, r28
     f02:	02 96       	adiw	r24, 0x02	; 2
     f04:	0e 94 4f 00 	call	0x9e	; 0x9e <runCmd>
}
     f08:	cb 59       	subi	r28, 0x9B	; 155
     f0a:	df 4f       	sbci	r29, 0xFF	; 255
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	0f 90       	pop	r0
     f38:	00 92 5f 00 	sts	0x005F, r0
     f3c:	0f 90       	pop	r0
     f3e:	1f 90       	pop	r1
     f40:	18 95       	reti

00000f42 <initUSART>:

void initUSART()
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	UBRRH = 0;
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	fc 01       	movw	r30, r24
     f50:	10 82       	st	Z, r1
	UBRRL = 103;		// 9600Hz on 16MHz F_CPU
     f52:	89 e2       	ldi	r24, 0x29	; 41
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	27 e6       	ldi	r18, 0x67	; 103
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     f5c:	8a e2       	ldi	r24, 0x2A	; 42
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	28 e9       	ldi	r18, 0x98	; 152
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     f66:	80 e4       	ldi	r24, 0x40	; 64
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	26 e8       	ldi	r18, 0x86	; 134
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <initTimer0>:

void initTimer0()
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1 << CS02) | (1 << CS00);	// CLKio / 1024
     f7e:	83 e5       	ldi	r24, 0x53	; 83
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	25 e0       	ldi	r18, 0x05	; 5
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
	TCNT0 = 0;
     f88:	82 e5       	ldi	r24, 0x52	; 82
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	fc 01       	movw	r30, r24
     f8e:	10 82       	st	Z, r1
	TIMSK |= _BV(TOIE0);
     f90:	89 e5       	ldi	r24, 0x59	; 89
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	29 e5       	ldi	r18, 0x59	; 89
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	f9 01       	movw	r30, r18
     f9a:	20 81       	ld	r18, Z
     f9c:	21 60       	ori	r18, 0x01	; 1
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <initTimer2>:

void initTimer2()
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = (1 << CS22) | (1 << CS21) | (1 << CS20);	// CLKio / 1024
     fb0:	85 e4       	ldi	r24, 0x45	; 69
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	27 e0       	ldi	r18, 0x07	; 7
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
	TCNT2 = 0;
     fba:	84 e4       	ldi	r24, 0x44	; 68
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	fc 01       	movw	r30, r24
     fc0:	10 82       	st	Z, r1
	TIMSK |= _BV(TOIE2);
     fc2:	89 e5       	ldi	r24, 0x59	; 89
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	29 e5       	ldi	r18, 0x59	; 89
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	f9 01       	movw	r30, r18
     fcc:	20 81       	ld	r18, Z
     fce:	20 64       	ori	r18, 0x40	; 64
     fd0:	fc 01       	movw	r30, r24
     fd2:	20 83       	st	Z, r18
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <main>:

char debugStr[100];


int main()
{
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	1f 92       	push	r1
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	DDRA = 0xff;
     fea:	8a e3       	ldi	r24, 0x3A	; 58
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
	DDRC = 0xff;
     ff4:	84 e3       	ldi	r24, 0x34	; 52
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	2f ef       	ldi	r18, 0xFF	; 255
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
	PORTA = 0x00;
     ffe:	8b e3       	ldi	r24, 0x3B	; 59
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	10 82       	st	Z, r1
	PORTC = 0x00;
    1006:	85 e3       	ldi	r24, 0x35	; 53
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	10 82       	st	Z, r1

	for (i = 0; i < 8; i++) {
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	22 c0       	rjmp	.+68     	; 0x1056 <main+0x7c>
		PORTA = PORTA >> 1;
    1012:	8b e3       	ldi	r24, 0x3B	; 59
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	2b e3       	ldi	r18, 0x3B	; 59
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	26 95       	lsr	r18
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
    1024:	0b e3       	ldi	r16, 0x3B	; 59
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	8b e3       	ldi	r24, 0x3B	; 59
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	f8 2e       	mov	r15, r24
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	96 95       	lsr	r25
    1042:	98 2f       	mov	r25, r24
    1044:	88 27       	eor	r24, r24
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	8f 29       	or	r24, r15
    104c:	f8 01       	movw	r30, r16
    104e:	80 83       	st	Z, r24
	DDRA = 0xff;
	DDRC = 0xff;
	PORTA = 0x00;
	PORTC = 0x00;

	for (i = 0; i < 8; i++) {
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	d8 f2       	brcs	.-74     	; 0x1012 <main+0x38>
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
    105c:	88 e0       	ldi	r24, 0x08	; 8
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	22 c0       	rjmp	.+68     	; 0x10a6 <main+0xcc>
		PORTC = PORTC >> 1;
    1062:	85 e3       	ldi	r24, 0x35	; 53
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	25 e3       	ldi	r18, 0x35	; 53
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	f9 01       	movw	r30, r18
    106c:	20 81       	ld	r18, Z
    106e:	26 95       	lsr	r18
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
    1074:	05 e3       	ldi	r16, 0x35	; 53
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	85 e3       	ldi	r24, 0x35	; 53
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	f8 2e       	mov	r15, r24
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	96 95       	lsr	r25
    1092:	98 2f       	mov	r25, r24
    1094:	88 27       	eor	r24, r24
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	8f 29       	or	r24, r15
    109c:	f8 01       	movw	r30, r16
    109e:	80 83       	st	Z, r24
	for (i = 0; i < 8; i++) {
		PORTA = PORTA >> 1;
		PORTA |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (i = 8; i < 16; i++) {
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	80 31       	cpi	r24, 0x10	; 16
    10aa:	d8 f2       	brcs	.-74     	; 0x1062 <main+0x88>
		PORTC = PORTC >> 1;
		PORTC |= ((readEEPROM(i) - '0') & 0x01) << 7;
	}

	for (stackTail = EEPROM_SIZE - 1; readEEPROM(stackTail) != 0xff; stackTail--);
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	90 93 6c 01 	sts	0x016C, r25
    10b4:	80 93 6b 01 	sts	0x016B, r24
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <main+0xf2>
    10ba:	80 91 6b 01 	lds	r24, 0x016B
    10be:	90 91 6c 01 	lds	r25, 0x016C
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	90 93 6c 01 	sts	0x016C, r25
    10c8:	80 93 6b 01 	sts	0x016B, r24
    10cc:	80 91 6b 01 	lds	r24, 0x016B
    10d0:	90 91 6c 01 	lds	r25, 0x016C
    10d4:	0e 94 4e 04 	call	0x89c	; 0x89c <readEEPROM>
    10d8:	8f 3f       	cpi	r24, 0xFF	; 255
    10da:	79 f7       	brne	.-34     	; 0x10ba <main+0xe0>

	status = ((uint16_t) PORTC) << 8 | (uint16_t) PORTA;
    10dc:	85 e3       	ldi	r24, 0x35	; 53
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	fc 01       	movw	r30, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	38 2f       	mov	r19, r24
    10ea:	22 27       	eor	r18, r18
    10ec:	8b e3       	ldi	r24, 0x3B	; 59
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	82 2b       	or	r24, r18
    10fa:	93 2b       	or	r25, r19
    10fc:	90 93 ae 01 	sts	0x01AE, r25
    1100:	80 93 ad 01 	sts	0x01AD, r24

	initUSART();
    1104:	0e 94 a1 07 	call	0xf42	; 0xf42 <initUSART>

	setDuty();
    1108:	0e 94 79 04 	call	0x8f2	; 0x8f2 <setDuty>

	initTimer0();
    110c:	0e 94 bb 07 	call	0xf76	; 0xf76 <initTimer0>

	initTimer2();
    1110:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <initTimer2>

	sei();
    1114:	78 94       	sei

	while (1);
    1116:	ff cf       	rjmp	.-2      	; 0x1116 <main+0x13c>

00001118 <sendUSART>:
#include <avr/io.h>

#include "usart.h"

void sendUSART(unsigned char data)
{
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	1f 92       	push	r1
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE))) ;
    1124:	00 00       	nop
    1126:	8b e2       	ldi	r24, 0x2B	; 43
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	80 72       	andi	r24, 0x20	; 32
    1134:	99 27       	eor	r25, r25
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	b1 f3       	breq	.-20     	; 0x1126 <sendUSART+0xe>
	UDR = data;
    113a:	8c e2       	ldi	r24, 0x2C	; 44
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	29 81       	ldd	r18, Y+1	; 0x01
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
}
    1144:	0f 90       	pop	r0
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <receiveUSART>:

unsigned char receiveUSART()
{
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC))) ;
    1154:	00 00       	nop
    1156:	8b e2       	ldi	r24, 0x2B	; 43
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	88 23       	and	r24, r24
    1160:	d4 f7       	brge	.-12     	; 0x1156 <receiveUSART+0xa>
	return UDR;
    1162:	8c e2       	ldi	r24, 0x2C	; 44
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	fc 01       	movw	r30, r24
    1168:	80 81       	ld	r24, Z
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <print>:

void print(char *s)
{
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	00 d0       	rcall	.+0      	; 0x1176 <print+0x6>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
	while (*s) {
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <print+0x26>
		sendUSART(*s);
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	fc 01       	movw	r30, r24
    1186:	80 81       	ld	r24, Z
    1188:	0e 94 8c 08 	call	0x1118	; 0x1118 <sendUSART>
		s++;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void print(char *s)
{
	while (*s) {
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	fc 01       	movw	r30, r24
    119c:	80 81       	ld	r24, Z
    119e:	88 23       	and	r24, r24
    11a0:	79 f7       	brne	.-34     	; 0x1180 <print+0x10>
		sendUSART(*s);
		s++;
	}
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <strlen>:
    11ac:	fc 01       	movw	r30, r24
    11ae:	01 90       	ld	r0, Z+
    11b0:	00 20       	and	r0, r0
    11b2:	e9 f7       	brne	.-6      	; 0x11ae <strlen+0x2>
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	8e 0f       	add	r24, r30
    11ba:	9f 1f       	adc	r25, r31
    11bc:	08 95       	ret

000011be <puts>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	e0 91 35 02 	lds	r30, 0x0235
    11ca:	f0 91 36 02 	lds	r31, 0x0236
    11ce:	23 81       	ldd	r18, Z+3	; 0x03
    11d0:	21 ff       	sbrs	r18, 1
    11d2:	1b c0       	rjmp	.+54     	; 0x120a <puts+0x4c>
    11d4:	ec 01       	movw	r28, r24
    11d6:	00 e0       	ldi	r16, 0x00	; 0
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	89 91       	ld	r24, Y+
    11dc:	60 91 35 02 	lds	r22, 0x0235
    11e0:	70 91 36 02 	lds	r23, 0x0236
    11e4:	db 01       	movw	r26, r22
    11e6:	18 96       	adiw	r26, 0x08	; 8
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	19 97       	sbiw	r26, 0x09	; 9
    11ee:	88 23       	and	r24, r24
    11f0:	31 f0       	breq	.+12     	; 0x11fe <puts+0x40>
    11f2:	09 95       	icall
    11f4:	89 2b       	or	r24, r25
    11f6:	89 f3       	breq	.-30     	; 0x11da <puts+0x1c>
    11f8:	0f ef       	ldi	r16, 0xFF	; 255
    11fa:	1f ef       	ldi	r17, 0xFF	; 255
    11fc:	ee cf       	rjmp	.-36     	; 0x11da <puts+0x1c>
    11fe:	8a e0       	ldi	r24, 0x0A	; 10
    1200:	09 95       	icall
    1202:	89 2b       	or	r24, r25
    1204:	11 f4       	brne	.+4      	; 0x120a <puts+0x4c>
    1206:	c8 01       	movw	r24, r16
    1208:	02 c0       	rjmp	.+4      	; 0x120e <puts+0x50>
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <sprintf>:
    1218:	ae e0       	ldi	r26, 0x0E	; 14
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x1c>
    1224:	0d 89       	ldd	r16, Y+21	; 0x15
    1226:	1e 89       	ldd	r17, Y+22	; 0x16
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	8c 83       	std	Y+4, r24	; 0x04
    122c:	1a 83       	std	Y+2, r17	; 0x02
    122e:	09 83       	std	Y+1, r16	; 0x01
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	9f e7       	ldi	r25, 0x7F	; 127
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	ae 01       	movw	r20, r28
    123a:	47 5e       	subi	r20, 0xE7	; 231
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	6f 89       	ldd	r22, Y+23	; 0x17
    1240:	78 8d       	ldd	r23, Y+24	; 0x18
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	0e 94 47 09 	call	0x128e	; 0x128e <vfprintf>
    124a:	ef 81       	ldd	r30, Y+7	; 0x07
    124c:	f8 85       	ldd	r31, Y+8	; 0x08
    124e:	e0 0f       	add	r30, r16
    1250:	f1 1f       	adc	r31, r17
    1252:	10 82       	st	Z, r1
    1254:	2e 96       	adiw	r28, 0x0e	; 14
    1256:	e4 e0       	ldi	r30, 0x04	; 4
    1258:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x1c>

0000125c <sscanf>:
    125c:	ae e0       	ldi	r26, 0x0E	; 14
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e4 e3       	ldi	r30, 0x34	; 52
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__prologue_saves__+0x20>
    1268:	85 e0       	ldi	r24, 0x05	; 5
    126a:	8c 83       	std	Y+4, r24	; 0x04
    126c:	8b 89       	ldd	r24, Y+19	; 0x13
    126e:	9c 89       	ldd	r25, Y+20	; 0x14
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	ae 01       	movw	r20, r28
    1276:	49 5e       	subi	r20, 0xE9	; 233
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 97 0c 	call	0x192e	; 0x192e <vfscanf>
    1286:	2e 96       	adiw	r28, 0x0e	; 14
    1288:	e2 e0       	ldi	r30, 0x02	; 2
    128a:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__epilogue_restores__+0x20>

0000128e <vfprintf>:
    128e:	ac e0       	ldi	r26, 0x0C	; 12
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ed e4       	ldi	r30, 0x4D	; 77
    1294:	f9 e0       	ldi	r31, 0x09	; 9
    1296:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__prologue_saves__>
    129a:	7c 01       	movw	r14, r24
    129c:	6b 01       	movw	r12, r22
    129e:	8a 01       	movw	r16, r20
    12a0:	fc 01       	movw	r30, r24
    12a2:	17 82       	std	Z+7, r1	; 0x07
    12a4:	16 82       	std	Z+6, r1	; 0x06
    12a6:	83 81       	ldd	r24, Z+3	; 0x03
    12a8:	81 ff       	sbrs	r24, 1
    12aa:	bd c1       	rjmp	.+890    	; 0x1626 <vfprintf+0x398>
    12ac:	ce 01       	movw	r24, r28
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	4c 01       	movw	r8, r24
    12b2:	f7 01       	movw	r30, r14
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	f6 01       	movw	r30, r12
    12b8:	93 fd       	sbrc	r25, 3
    12ba:	85 91       	lpm	r24, Z+
    12bc:	93 ff       	sbrs	r25, 3
    12be:	81 91       	ld	r24, Z+
    12c0:	6f 01       	movw	r12, r30
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <vfprintf+0x3a>
    12c6:	ab c1       	rjmp	.+854    	; 0x161e <vfprintf+0x390>
    12c8:	85 32       	cpi	r24, 0x25	; 37
    12ca:	39 f4       	brne	.+14     	; 0x12da <vfprintf+0x4c>
    12cc:	93 fd       	sbrc	r25, 3
    12ce:	85 91       	lpm	r24, Z+
    12d0:	93 ff       	sbrs	r25, 3
    12d2:	81 91       	ld	r24, Z+
    12d4:	6f 01       	movw	r12, r30
    12d6:	85 32       	cpi	r24, 0x25	; 37
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <vfprintf+0x56>
    12da:	b7 01       	movw	r22, r14
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    12e2:	e7 cf       	rjmp	.-50     	; 0x12b2 <vfprintf+0x24>
    12e4:	51 2c       	mov	r5, r1
    12e6:	31 2c       	mov	r3, r1
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	20 32       	cpi	r18, 0x20	; 32
    12ec:	a0 f4       	brcc	.+40     	; 0x1316 <vfprintf+0x88>
    12ee:	8b 32       	cpi	r24, 0x2B	; 43
    12f0:	69 f0       	breq	.+26     	; 0x130c <vfprintf+0x7e>
    12f2:	30 f4       	brcc	.+12     	; 0x1300 <vfprintf+0x72>
    12f4:	80 32       	cpi	r24, 0x20	; 32
    12f6:	59 f0       	breq	.+22     	; 0x130e <vfprintf+0x80>
    12f8:	83 32       	cpi	r24, 0x23	; 35
    12fa:	69 f4       	brne	.+26     	; 0x1316 <vfprintf+0x88>
    12fc:	20 61       	ori	r18, 0x10	; 16
    12fe:	2c c0       	rjmp	.+88     	; 0x1358 <vfprintf+0xca>
    1300:	8d 32       	cpi	r24, 0x2D	; 45
    1302:	39 f0       	breq	.+14     	; 0x1312 <vfprintf+0x84>
    1304:	80 33       	cpi	r24, 0x30	; 48
    1306:	39 f4       	brne	.+14     	; 0x1316 <vfprintf+0x88>
    1308:	21 60       	ori	r18, 0x01	; 1
    130a:	26 c0       	rjmp	.+76     	; 0x1358 <vfprintf+0xca>
    130c:	22 60       	ori	r18, 0x02	; 2
    130e:	24 60       	ori	r18, 0x04	; 4
    1310:	23 c0       	rjmp	.+70     	; 0x1358 <vfprintf+0xca>
    1312:	28 60       	ori	r18, 0x08	; 8
    1314:	21 c0       	rjmp	.+66     	; 0x1358 <vfprintf+0xca>
    1316:	27 fd       	sbrc	r18, 7
    1318:	27 c0       	rjmp	.+78     	; 0x1368 <vfprintf+0xda>
    131a:	30 ed       	ldi	r19, 0xD0	; 208
    131c:	38 0f       	add	r19, r24
    131e:	3a 30       	cpi	r19, 0x0A	; 10
    1320:	78 f4       	brcc	.+30     	; 0x1340 <vfprintf+0xb2>
    1322:	26 ff       	sbrs	r18, 6
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0xa4>
    1326:	fa e0       	ldi	r31, 0x0A	; 10
    1328:	5f 9e       	mul	r5, r31
    132a:	30 0d       	add	r19, r0
    132c:	11 24       	eor	r1, r1
    132e:	53 2e       	mov	r5, r19
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <vfprintf+0xca>
    1332:	8a e0       	ldi	r24, 0x0A	; 10
    1334:	38 9e       	mul	r3, r24
    1336:	30 0d       	add	r19, r0
    1338:	11 24       	eor	r1, r1
    133a:	33 2e       	mov	r3, r19
    133c:	20 62       	ori	r18, 0x20	; 32
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <vfprintf+0xca>
    1340:	8e 32       	cpi	r24, 0x2E	; 46
    1342:	21 f4       	brne	.+8      	; 0x134c <vfprintf+0xbe>
    1344:	26 fd       	sbrc	r18, 6
    1346:	6b c1       	rjmp	.+726    	; 0x161e <vfprintf+0x390>
    1348:	20 64       	ori	r18, 0x40	; 64
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0xca>
    134c:	8c 36       	cpi	r24, 0x6C	; 108
    134e:	11 f4       	brne	.+4      	; 0x1354 <vfprintf+0xc6>
    1350:	20 68       	ori	r18, 0x80	; 128
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <vfprintf+0xca>
    1354:	88 36       	cpi	r24, 0x68	; 104
    1356:	41 f4       	brne	.+16     	; 0x1368 <vfprintf+0xda>
    1358:	f6 01       	movw	r30, r12
    135a:	93 fd       	sbrc	r25, 3
    135c:	85 91       	lpm	r24, Z+
    135e:	93 ff       	sbrs	r25, 3
    1360:	81 91       	ld	r24, Z+
    1362:	6f 01       	movw	r12, r30
    1364:	81 11       	cpse	r24, r1
    1366:	c1 cf       	rjmp	.-126    	; 0x12ea <vfprintf+0x5c>
    1368:	98 2f       	mov	r25, r24
    136a:	9f 7d       	andi	r25, 0xDF	; 223
    136c:	95 54       	subi	r25, 0x45	; 69
    136e:	93 30       	cpi	r25, 0x03	; 3
    1370:	28 f4       	brcc	.+10     	; 0x137c <vfprintf+0xee>
    1372:	0c 5f       	subi	r16, 0xFC	; 252
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	ff e3       	ldi	r31, 0x3F	; 63
    1378:	f9 83       	std	Y+1, r31	; 0x01
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <vfprintf+0x108>
    137c:	83 36       	cpi	r24, 0x63	; 99
    137e:	31 f0       	breq	.+12     	; 0x138c <vfprintf+0xfe>
    1380:	83 37       	cpi	r24, 0x73	; 115
    1382:	71 f0       	breq	.+28     	; 0x13a0 <vfprintf+0x112>
    1384:	83 35       	cpi	r24, 0x53	; 83
    1386:	09 f0       	breq	.+2      	; 0x138a <vfprintf+0xfc>
    1388:	5b c0       	rjmp	.+182    	; 0x1440 <vfprintf+0x1b2>
    138a:	22 c0       	rjmp	.+68     	; 0x13d0 <vfprintf+0x142>
    138c:	f8 01       	movw	r30, r16
    138e:	80 81       	ld	r24, Z
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	0e 5f       	subi	r16, 0xFE	; 254
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	44 24       	eor	r4, r4
    1398:	43 94       	inc	r4
    139a:	51 2c       	mov	r5, r1
    139c:	54 01       	movw	r10, r8
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <vfprintf+0x13c>
    13a0:	38 01       	movw	r6, r16
    13a2:	f2 e0       	ldi	r31, 0x02	; 2
    13a4:	6f 0e       	add	r6, r31
    13a6:	71 1c       	adc	r7, r1
    13a8:	f8 01       	movw	r30, r16
    13aa:	a0 80       	ld	r10, Z
    13ac:	b1 80       	ldd	r11, Z+1	; 0x01
    13ae:	26 ff       	sbrs	r18, 6
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfprintf+0x12a>
    13b2:	65 2d       	mov	r22, r5
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x12e>
    13b8:	6f ef       	ldi	r22, 0xFF	; 255
    13ba:	7f ef       	ldi	r23, 0xFF	; 255
    13bc:	c5 01       	movw	r24, r10
    13be:	2c 87       	std	Y+12, r18	; 0x0c
    13c0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <strnlen>
    13c4:	2c 01       	movw	r4, r24
    13c6:	83 01       	movw	r16, r6
    13c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ca:	2f 77       	andi	r18, 0x7F	; 127
    13cc:	22 2e       	mov	r2, r18
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <vfprintf+0x170>
    13d0:	38 01       	movw	r6, r16
    13d2:	f2 e0       	ldi	r31, 0x02	; 2
    13d4:	6f 0e       	add	r6, r31
    13d6:	71 1c       	adc	r7, r1
    13d8:	f8 01       	movw	r30, r16
    13da:	a0 80       	ld	r10, Z
    13dc:	b1 80       	ldd	r11, Z+1	; 0x01
    13de:	26 ff       	sbrs	r18, 6
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <vfprintf+0x15a>
    13e2:	65 2d       	mov	r22, r5
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x15e>
    13e8:	6f ef       	ldi	r22, 0xFF	; 255
    13ea:	7f ef       	ldi	r23, 0xFF	; 255
    13ec:	c5 01       	movw	r24, r10
    13ee:	2c 87       	std	Y+12, r18	; 0x0c
    13f0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <strnlen_P>
    13f4:	2c 01       	movw	r4, r24
    13f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13f8:	20 68       	ori	r18, 0x80	; 128
    13fa:	22 2e       	mov	r2, r18
    13fc:	83 01       	movw	r16, r6
    13fe:	23 fc       	sbrc	r2, 3
    1400:	1b c0       	rjmp	.+54     	; 0x1438 <vfprintf+0x1aa>
    1402:	83 2d       	mov	r24, r3
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	48 16       	cp	r4, r24
    1408:	59 06       	cpc	r5, r25
    140a:	b0 f4       	brcc	.+44     	; 0x1438 <vfprintf+0x1aa>
    140c:	b7 01       	movw	r22, r14
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    1416:	3a 94       	dec	r3
    1418:	f4 cf       	rjmp	.-24     	; 0x1402 <vfprintf+0x174>
    141a:	f5 01       	movw	r30, r10
    141c:	27 fc       	sbrc	r2, 7
    141e:	85 91       	lpm	r24, Z+
    1420:	27 fe       	sbrs	r2, 7
    1422:	81 91       	ld	r24, Z+
    1424:	5f 01       	movw	r10, r30
    1426:	b7 01       	movw	r22, r14
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    142e:	31 10       	cpse	r3, r1
    1430:	3a 94       	dec	r3
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	4f 1a       	sub	r4, r31
    1436:	51 08       	sbc	r5, r1
    1438:	41 14       	cp	r4, r1
    143a:	51 04       	cpc	r5, r1
    143c:	71 f7       	brne	.-36     	; 0x141a <vfprintf+0x18c>
    143e:	e5 c0       	rjmp	.+458    	; 0x160a <vfprintf+0x37c>
    1440:	84 36       	cpi	r24, 0x64	; 100
    1442:	11 f0       	breq	.+4      	; 0x1448 <vfprintf+0x1ba>
    1444:	89 36       	cpi	r24, 0x69	; 105
    1446:	39 f5       	brne	.+78     	; 0x1496 <vfprintf+0x208>
    1448:	f8 01       	movw	r30, r16
    144a:	27 ff       	sbrs	r18, 7
    144c:	07 c0       	rjmp	.+14     	; 0x145c <vfprintf+0x1ce>
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	0c 5f       	subi	r16, 0xFC	; 252
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	08 c0       	rjmp	.+16     	; 0x146c <vfprintf+0x1de>
    145c:	60 81       	ld	r22, Z
    145e:	71 81       	ldd	r23, Z+1	; 0x01
    1460:	88 27       	eor	r24, r24
    1462:	77 fd       	sbrc	r23, 7
    1464:	80 95       	com	r24
    1466:	98 2f       	mov	r25, r24
    1468:	0e 5f       	subi	r16, 0xFE	; 254
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	2f 76       	andi	r18, 0x6F	; 111
    146e:	b2 2e       	mov	r11, r18
    1470:	97 ff       	sbrs	r25, 7
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x1f8>
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	20 68       	ori	r18, 0x80	; 128
    1484:	b2 2e       	mov	r11, r18
    1486:	2a e0       	ldi	r18, 0x0A	; 10
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	a4 01       	movw	r20, r8
    148c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__ultoa_invert>
    1490:	a8 2e       	mov	r10, r24
    1492:	a8 18       	sub	r10, r8
    1494:	44 c0       	rjmp	.+136    	; 0x151e <vfprintf+0x290>
    1496:	85 37       	cpi	r24, 0x75	; 117
    1498:	29 f4       	brne	.+10     	; 0x14a4 <vfprintf+0x216>
    149a:	2f 7e       	andi	r18, 0xEF	; 239
    149c:	b2 2e       	mov	r11, r18
    149e:	2a e0       	ldi	r18, 0x0A	; 10
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	25 c0       	rjmp	.+74     	; 0x14ee <vfprintf+0x260>
    14a4:	f2 2f       	mov	r31, r18
    14a6:	f9 7f       	andi	r31, 0xF9	; 249
    14a8:	bf 2e       	mov	r11, r31
    14aa:	8f 36       	cpi	r24, 0x6F	; 111
    14ac:	c1 f0       	breq	.+48     	; 0x14de <vfprintf+0x250>
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <vfprintf+0x228>
    14b0:	88 35       	cpi	r24, 0x58	; 88
    14b2:	79 f0       	breq	.+30     	; 0x14d2 <vfprintf+0x244>
    14b4:	b4 c0       	rjmp	.+360    	; 0x161e <vfprintf+0x390>
    14b6:	80 37       	cpi	r24, 0x70	; 112
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <vfprintf+0x232>
    14ba:	88 37       	cpi	r24, 0x78	; 120
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <vfprintf+0x238>
    14be:	af c0       	rjmp	.+350    	; 0x161e <vfprintf+0x390>
    14c0:	2f 2f       	mov	r18, r31
    14c2:	20 61       	ori	r18, 0x10	; 16
    14c4:	b2 2e       	mov	r11, r18
    14c6:	b4 fe       	sbrs	r11, 4
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <vfprintf+0x256>
    14ca:	8b 2d       	mov	r24, r11
    14cc:	84 60       	ori	r24, 0x04	; 4
    14ce:	b8 2e       	mov	r11, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x256>
    14d2:	24 ff       	sbrs	r18, 4
    14d4:	0a c0       	rjmp	.+20     	; 0x14ea <vfprintf+0x25c>
    14d6:	9f 2f       	mov	r25, r31
    14d8:	96 60       	ori	r25, 0x06	; 6
    14da:	b9 2e       	mov	r11, r25
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0x25c>
    14de:	28 e0       	ldi	r18, 0x08	; 8
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <vfprintf+0x260>
    14e4:	20 e1       	ldi	r18, 0x10	; 16
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <vfprintf+0x260>
    14ea:	20 e1       	ldi	r18, 0x10	; 16
    14ec:	32 e0       	ldi	r19, 0x02	; 2
    14ee:	f8 01       	movw	r30, r16
    14f0:	b7 fe       	sbrs	r11, 7
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <vfprintf+0x274>
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	0c 5f       	subi	r16, 0xFC	; 252
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	06 c0       	rjmp	.+12     	; 0x150e <vfprintf+0x280>
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 5f       	subi	r16, 0xFE	; 254
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	a4 01       	movw	r20, r8
    1510:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__ultoa_invert>
    1514:	a8 2e       	mov	r10, r24
    1516:	a8 18       	sub	r10, r8
    1518:	fb 2d       	mov	r31, r11
    151a:	ff 77       	andi	r31, 0x7F	; 127
    151c:	bf 2e       	mov	r11, r31
    151e:	b6 fe       	sbrs	r11, 6
    1520:	0b c0       	rjmp	.+22     	; 0x1538 <vfprintf+0x2aa>
    1522:	2b 2d       	mov	r18, r11
    1524:	2e 7f       	andi	r18, 0xFE	; 254
    1526:	a5 14       	cp	r10, r5
    1528:	50 f4       	brcc	.+20     	; 0x153e <vfprintf+0x2b0>
    152a:	b4 fe       	sbrs	r11, 4
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <vfprintf+0x2b4>
    152e:	b2 fc       	sbrc	r11, 2
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <vfprintf+0x2b4>
    1532:	2b 2d       	mov	r18, r11
    1534:	2e 7e       	andi	r18, 0xEE	; 238
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <vfprintf+0x2b4>
    1538:	7a 2c       	mov	r7, r10
    153a:	2b 2d       	mov	r18, r11
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <vfprintf+0x2b6>
    153e:	7a 2c       	mov	r7, r10
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <vfprintf+0x2b6>
    1542:	75 2c       	mov	r7, r5
    1544:	24 ff       	sbrs	r18, 4
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <vfprintf+0x2d4>
    1548:	fe 01       	movw	r30, r28
    154a:	ea 0d       	add	r30, r10
    154c:	f1 1d       	adc	r31, r1
    154e:	80 81       	ld	r24, Z
    1550:	80 33       	cpi	r24, 0x30	; 48
    1552:	11 f4       	brne	.+4      	; 0x1558 <vfprintf+0x2ca>
    1554:	29 7e       	andi	r18, 0xE9	; 233
    1556:	09 c0       	rjmp	.+18     	; 0x156a <vfprintf+0x2dc>
    1558:	22 ff       	sbrs	r18, 2
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x2da>
    155c:	73 94       	inc	r7
    155e:	73 94       	inc	r7
    1560:	04 c0       	rjmp	.+8      	; 0x156a <vfprintf+0x2dc>
    1562:	82 2f       	mov	r24, r18
    1564:	86 78       	andi	r24, 0x86	; 134
    1566:	09 f0       	breq	.+2      	; 0x156a <vfprintf+0x2dc>
    1568:	73 94       	inc	r7
    156a:	23 fd       	sbrc	r18, 3
    156c:	13 c0       	rjmp	.+38     	; 0x1594 <vfprintf+0x306>
    156e:	20 ff       	sbrs	r18, 0
    1570:	06 c0       	rjmp	.+12     	; 0x157e <vfprintf+0x2f0>
    1572:	5a 2c       	mov	r5, r10
    1574:	73 14       	cp	r7, r3
    1576:	18 f4       	brcc	.+6      	; 0x157e <vfprintf+0x2f0>
    1578:	53 0c       	add	r5, r3
    157a:	57 18       	sub	r5, r7
    157c:	73 2c       	mov	r7, r3
    157e:	73 14       	cp	r7, r3
    1580:	68 f4       	brcc	.+26     	; 0x159c <vfprintf+0x30e>
    1582:	b7 01       	movw	r22, r14
    1584:	80 e2       	ldi	r24, 0x20	; 32
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	2c 87       	std	Y+12, r18	; 0x0c
    158a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    158e:	73 94       	inc	r7
    1590:	2c 85       	ldd	r18, Y+12	; 0x0c
    1592:	f5 cf       	rjmp	.-22     	; 0x157e <vfprintf+0x2f0>
    1594:	73 14       	cp	r7, r3
    1596:	10 f4       	brcc	.+4      	; 0x159c <vfprintf+0x30e>
    1598:	37 18       	sub	r3, r7
    159a:	01 c0       	rjmp	.+2      	; 0x159e <vfprintf+0x310>
    159c:	31 2c       	mov	r3, r1
    159e:	24 ff       	sbrs	r18, 4
    15a0:	12 c0       	rjmp	.+36     	; 0x15c6 <vfprintf+0x338>
    15a2:	b7 01       	movw	r22, r14
    15a4:	80 e3       	ldi	r24, 0x30	; 48
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	2c 87       	std	Y+12, r18	; 0x0c
    15aa:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    15ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b0:	22 ff       	sbrs	r18, 2
    15b2:	17 c0       	rjmp	.+46     	; 0x15e2 <vfprintf+0x354>
    15b4:	21 ff       	sbrs	r18, 1
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <vfprintf+0x330>
    15b8:	88 e5       	ldi	r24, 0x58	; 88
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0x334>
    15be:	88 e7       	ldi	r24, 0x78	; 120
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	b7 01       	movw	r22, r14
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <vfprintf+0x350>
    15c6:	82 2f       	mov	r24, r18
    15c8:	86 78       	andi	r24, 0x86	; 134
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <vfprintf+0x354>
    15cc:	21 fd       	sbrc	r18, 1
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x346>
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <vfprintf+0x348>
    15d4:	8b e2       	ldi	r24, 0x2B	; 43
    15d6:	27 fd       	sbrc	r18, 7
    15d8:	8d e2       	ldi	r24, 0x2D	; 45
    15da:	b7 01       	movw	r22, r14
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    15e2:	a5 14       	cp	r10, r5
    15e4:	38 f4       	brcc	.+14     	; 0x15f4 <vfprintf+0x366>
    15e6:	b7 01       	movw	r22, r14
    15e8:	80 e3       	ldi	r24, 0x30	; 48
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    15f0:	5a 94       	dec	r5
    15f2:	f7 cf       	rjmp	.-18     	; 0x15e2 <vfprintf+0x354>
    15f4:	aa 94       	dec	r10
    15f6:	f4 01       	movw	r30, r8
    15f8:	ea 0d       	add	r30, r10
    15fa:	f1 1d       	adc	r31, r1
    15fc:	80 81       	ld	r24, Z
    15fe:	b7 01       	movw	r22, r14
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    1606:	a1 10       	cpse	r10, r1
    1608:	f5 cf       	rjmp	.-22     	; 0x15f4 <vfprintf+0x366>
    160a:	33 20       	and	r3, r3
    160c:	09 f4       	brne	.+2      	; 0x1610 <vfprintf+0x382>
    160e:	51 ce       	rjmp	.-862    	; 0x12b2 <vfprintf+0x24>
    1610:	b7 01       	movw	r22, r14
    1612:	80 e2       	ldi	r24, 0x20	; 32
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputc>
    161a:	3a 94       	dec	r3
    161c:	f6 cf       	rjmp	.-20     	; 0x160a <vfprintf+0x37c>
    161e:	f7 01       	movw	r30, r14
    1620:	86 81       	ldd	r24, Z+6	; 0x06
    1622:	97 81       	ldd	r25, Z+7	; 0x07
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x39c>
    1626:	8f ef       	ldi	r24, 0xFF	; 255
    1628:	9f ef       	ldi	r25, 0xFF	; 255
    162a:	2c 96       	adiw	r28, 0x0c	; 12
    162c:	e2 e1       	ldi	r30, 0x12	; 18
    162e:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__epilogue_restores__>

00001632 <putval>:
    1632:	20 fd       	sbrc	r18, 0
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <putval+0x16>
    1636:	fc 01       	movw	r30, r24
    1638:	23 fd       	sbrc	r18, 3
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <putval+0x14>
    163c:	22 ff       	sbrs	r18, 2
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <putval+0x12>
    1640:	73 83       	std	Z+3, r23	; 0x03
    1642:	62 83       	std	Z+2, r22	; 0x02
    1644:	51 83       	std	Z+1, r21	; 0x01
    1646:	40 83       	st	Z, r20
    1648:	08 95       	ret

0000164a <mulacc>:
    164a:	44 fd       	sbrc	r20, 4
    164c:	10 c0       	rjmp	.+32     	; 0x166e <mulacc+0x24>
    164e:	46 fd       	sbrc	r20, 6
    1650:	10 c0       	rjmp	.+32     	; 0x1672 <mulacc+0x28>
    1652:	db 01       	movw	r26, r22
    1654:	fc 01       	movw	r30, r24
    1656:	aa 0f       	add	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	ee 1f       	adc	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	10 94       	com	r1
    1660:	d1 f7       	brne	.-12     	; 0x1656 <mulacc+0xc>
    1662:	6a 0f       	add	r22, r26
    1664:	7b 1f       	adc	r23, r27
    1666:	8e 1f       	adc	r24, r30
    1668:	9f 1f       	adc	r25, r31
    166a:	31 e0       	ldi	r19, 0x01	; 1
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <mulacc+0x2a>
    166e:	33 e0       	ldi	r19, 0x03	; 3
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <mulacc+0x2a>
    1672:	34 e0       	ldi	r19, 0x04	; 4
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	31 50       	subi	r19, 0x01	; 1
    167e:	d1 f7       	brne	.-12     	; 0x1674 <mulacc+0x2a>
    1680:	62 0f       	add	r22, r18
    1682:	71 1d       	adc	r23, r1
    1684:	81 1d       	adc	r24, r1
    1686:	91 1d       	adc	r25, r1
    1688:	08 95       	ret

0000168a <skip_spaces>:
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	8c 01       	movw	r16, r24
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    169a:	ec 01       	movw	r28, r24
    169c:	97 fd       	sbrc	r25, 7
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <skip_spaces+0x26>
    16a0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <isspace>
    16a4:	89 2b       	or	r24, r25
    16a6:	b1 f7       	brne	.-20     	; 0x1694 <skip_spaces+0xa>
    16a8:	b8 01       	movw	r22, r16
    16aa:	ce 01       	movw	r24, r28
    16ac:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ungetc>
    16b0:	ce 01       	movw	r24, r28
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	08 95       	ret

000016bc <conv_int>:
    16bc:	8f 92       	push	r8
    16be:	9f 92       	push	r9
    16c0:	af 92       	push	r10
    16c2:	cf 92       	push	r12
    16c4:	df 92       	push	r13
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	ec 01       	movw	r28, r24
    16d4:	a6 2e       	mov	r10, r22
    16d6:	4a 01       	movw	r8, r20
    16d8:	02 2f       	mov	r16, r18
    16da:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    16de:	ac 01       	movw	r20, r24
    16e0:	55 27       	eor	r21, r21
    16e2:	4b 32       	cpi	r20, 0x2B	; 43
    16e4:	51 05       	cpc	r21, r1
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <conv_int+0x34>
    16e8:	4d 32       	cpi	r20, 0x2D	; 45
    16ea:	51 05       	cpc	r21, r1
    16ec:	51 f4       	brne	.+20     	; 0x1702 <conv_int+0x46>
    16ee:	00 68       	ori	r16, 0x80	; 128
    16f0:	aa 94       	dec	r10
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <conv_int+0x3c>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	67 c0       	rjmp	.+206    	; 0x17c6 <conv_int+0x10a>
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    16fe:	97 fd       	sbrc	r25, 7
    1700:	f9 cf       	rjmp	.-14     	; 0x16f4 <conv_int+0x38>
    1702:	10 2f       	mov	r17, r16
    1704:	1d 7f       	andi	r17, 0xFD	; 253
    1706:	30 2f       	mov	r19, r16
    1708:	30 73       	andi	r19, 0x30	; 48
    170a:	01 f5       	brne	.+64     	; 0x174c <conv_int+0x90>
    170c:	80 33       	cpi	r24, 0x30	; 48
    170e:	f1 f4       	brne	.+60     	; 0x174c <conv_int+0x90>
    1710:	ff 24       	eor	r15, r15
    1712:	fa 94       	dec	r15
    1714:	fa 0c       	add	r15, r10
    1716:	09 f4       	brne	.+2      	; 0x171a <conv_int+0x5e>
    1718:	42 c0       	rjmp	.+132    	; 0x179e <conv_int+0xe2>
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    1720:	97 fd       	sbrc	r25, 7
    1722:	3d c0       	rjmp	.+122    	; 0x179e <conv_int+0xe2>
    1724:	38 2f       	mov	r19, r24
    1726:	3f 7d       	andi	r19, 0xDF	; 223
    1728:	38 35       	cpi	r19, 0x58	; 88
    172a:	51 f4       	brne	.+20     	; 0x1740 <conv_int+0x84>
    172c:	12 64       	ori	r17, 0x42	; 66
    172e:	aa 94       	dec	r10
    1730:	aa 94       	dec	r10
    1732:	a9 f1       	breq	.+106    	; 0x179e <conv_int+0xe2>
    1734:	ce 01       	movw	r24, r28
    1736:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    173a:	97 ff       	sbrs	r25, 7
    173c:	07 c0       	rjmp	.+14     	; 0x174c <conv_int+0x90>
    173e:	2f c0       	rjmp	.+94     	; 0x179e <conv_int+0xe2>
    1740:	06 ff       	sbrs	r16, 6
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <conv_int+0x8c>
    1744:	12 60       	ori	r17, 0x02	; 2
    1746:	01 c0       	rjmp	.+2      	; 0x174a <conv_int+0x8e>
    1748:	12 61       	ori	r17, 0x12	; 18
    174a:	af 2c       	mov	r10, r15
    174c:	c1 2c       	mov	r12, r1
    174e:	d1 2c       	mov	r13, r1
    1750:	76 01       	movw	r14, r12
    1752:	20 ed       	ldi	r18, 0xD0	; 208
    1754:	28 0f       	add	r18, r24
    1756:	28 30       	cpi	r18, 0x08	; 8
    1758:	80 f0       	brcs	.+32     	; 0x177a <conv_int+0xbe>
    175a:	14 ff       	sbrs	r17, 4
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <conv_int+0xaa>
    175e:	be 01       	movw	r22, r28
    1760:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ungetc>
    1764:	19 c0       	rjmp	.+50     	; 0x1798 <conv_int+0xdc>
    1766:	2a 30       	cpi	r18, 0x0A	; 10
    1768:	40 f0       	brcs	.+16     	; 0x177a <conv_int+0xbe>
    176a:	16 ff       	sbrs	r17, 6
    176c:	f8 cf       	rjmp	.-16     	; 0x175e <conv_int+0xa2>
    176e:	2f 7d       	andi	r18, 0xDF	; 223
    1770:	3f ee       	ldi	r19, 0xEF	; 239
    1772:	32 0f       	add	r19, r18
    1774:	36 30       	cpi	r19, 0x06	; 6
    1776:	98 f7       	brcc	.-26     	; 0x175e <conv_int+0xa2>
    1778:	27 50       	subi	r18, 0x07	; 7
    177a:	41 2f       	mov	r20, r17
    177c:	c7 01       	movw	r24, r14
    177e:	b6 01       	movw	r22, r12
    1780:	0e 94 25 0b 	call	0x164a	; 0x164a <mulacc>
    1784:	6b 01       	movw	r12, r22
    1786:	7c 01       	movw	r14, r24
    1788:	12 60       	ori	r17, 0x02	; 2
    178a:	aa 94       	dec	r10
    178c:	59 f0       	breq	.+22     	; 0x17a4 <conv_int+0xe8>
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    1794:	97 ff       	sbrs	r25, 7
    1796:	dd cf       	rjmp	.-70     	; 0x1752 <conv_int+0x96>
    1798:	11 fd       	sbrc	r17, 1
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <conv_int+0xe8>
    179c:	ab cf       	rjmp	.-170    	; 0x16f4 <conv_int+0x38>
    179e:	c1 2c       	mov	r12, r1
    17a0:	d1 2c       	mov	r13, r1
    17a2:	76 01       	movw	r14, r12
    17a4:	17 ff       	sbrs	r17, 7
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <conv_int+0xfc>
    17a8:	f0 94       	com	r15
    17aa:	e0 94       	com	r14
    17ac:	d0 94       	com	r13
    17ae:	c0 94       	com	r12
    17b0:	c1 1c       	adc	r12, r1
    17b2:	d1 1c       	adc	r13, r1
    17b4:	e1 1c       	adc	r14, r1
    17b6:	f1 1c       	adc	r15, r1
    17b8:	21 2f       	mov	r18, r17
    17ba:	b7 01       	movw	r22, r14
    17bc:	a6 01       	movw	r20, r12
    17be:	c4 01       	movw	r24, r8
    17c0:	0e 94 19 0b 	call	0x1632	; 0x1632 <putval>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	af 90       	pop	r10
    17d8:	9f 90       	pop	r9
    17da:	8f 90       	pop	r8
    17dc:	08 95       	ret

000017de <conv_brk>:
    17de:	a1 e2       	ldi	r26, 0x21	; 33
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e5 ef       	ldi	r30, 0xF5	; 245
    17e4:	fb e0       	ldi	r31, 0x0B	; 11
    17e6:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__prologue_saves__+0xa>
    17ea:	5c 01       	movw	r10, r24
    17ec:	7a 01       	movw	r14, r20
    17ee:	8e 01       	movw	r16, r28
    17f0:	0f 5f       	subi	r16, 0xFF	; 255
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	68 01       	movw	r12, r16
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	d8 01       	movw	r26, r16
    17fa:	1d 92       	st	X+, r1
    17fc:	8a 95       	dec	r24
    17fe:	e9 f7       	brne	.-6      	; 0x17fa <conv_brk+0x1c>
    1800:	f5 01       	movw	r30, r10
    1802:	73 80       	ldd	r7, Z+3	; 0x03
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	81 2c       	mov	r8, r1
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	91 2c       	mov	r9, r1
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	f9 01       	movw	r30, r18
    1814:	73 fc       	sbrc	r7, 3
    1816:	a5 91       	lpm	r26, Z+
    1818:	73 fe       	sbrs	r7, 3
    181a:	a1 91       	ld	r26, Z+
    181c:	8f 01       	movw	r16, r30
    181e:	7a 2f       	mov	r23, r26
    1820:	9f 01       	movw	r18, r30
    1822:	a1 11       	cpse	r26, r1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <conv_brk+0x4e>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	7d c0       	rjmp	.+250    	; 0x1926 <conv_brk+0x148>
    182c:	ae 35       	cpi	r26, 0x5E	; 94
    182e:	19 f4       	brne	.+6      	; 0x1836 <conv_brk+0x58>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	59 f1       	breq	.+86     	; 0x188c <conv_brk+0xae>
    1836:	e9 2d       	mov	r30, r9
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	e4 17       	cp	r30, r20
    183c:	f5 07       	cpc	r31, r21
    183e:	3c f4       	brge	.+14     	; 0x184e <conv_brk+0x70>
    1840:	ad 35       	cpi	r26, 0x5D	; 93
    1842:	69 f1       	breq	.+90     	; 0x189e <conv_brk+0xc0>
    1844:	ad 32       	cpi	r26, 0x2D	; 45
    1846:	19 f4       	brne	.+6      	; 0x184e <conv_brk+0x70>
    1848:	bb 23       	and	r27, r27
    184a:	19 f1       	breq	.+70     	; 0x1892 <conv_brk+0xb4>
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <conv_brk+0x76>
    184e:	b1 11       	cpse	r27, r1
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <conv_brk+0x76>
    1852:	8a 2e       	mov	r8, r26
    1854:	e7 2f       	mov	r30, r23
    1856:	e6 95       	lsr	r30
    1858:	e6 95       	lsr	r30
    185a:	e6 95       	lsr	r30
    185c:	86 01       	movw	r16, r12
    185e:	0e 0f       	add	r16, r30
    1860:	11 1d       	adc	r17, r1
    1862:	f8 01       	movw	r30, r16
    1864:	a7 2f       	mov	r26, r23
    1866:	a7 70       	andi	r26, 0x07	; 7
    1868:	8c 01       	movw	r16, r24
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <conv_brk+0x92>
    186c:	00 0f       	add	r16, r16
    186e:	11 1f       	adc	r17, r17
    1870:	aa 95       	dec	r26
    1872:	e2 f7       	brpl	.-8      	; 0x186c <conv_brk+0x8e>
    1874:	d8 01       	movw	r26, r16
    1876:	b0 81       	ld	r27, Z
    1878:	ba 2b       	or	r27, r26
    187a:	b0 83       	st	Z, r27
    187c:	78 15       	cp	r23, r8
    187e:	59 f0       	breq	.+22     	; 0x1896 <conv_brk+0xb8>
    1880:	78 15       	cp	r23, r8
    1882:	10 f4       	brcc	.+4      	; 0x1888 <conv_brk+0xaa>
    1884:	7f 5f       	subi	r23, 0xFF	; 255
    1886:	e6 cf       	rjmp	.-52     	; 0x1854 <conv_brk+0x76>
    1888:	71 50       	subi	r23, 0x01	; 1
    188a:	e4 cf       	rjmp	.-56     	; 0x1854 <conv_brk+0x76>
    188c:	99 24       	eor	r9, r9
    188e:	93 94       	inc	r9
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <conv_brk+0xba>
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <conv_brk+0xba>
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	4f 5f       	subi	r20, 0xFF	; 255
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	ba cf       	rjmp	.-140    	; 0x1812 <conv_brk+0x34>
    189e:	bb 23       	and	r27, r27
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <conv_brk+0xca>
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	8e 83       	std	Y+6, r24	; 0x06
    18a8:	91 10       	cpse	r9, r1
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <conv_brk+0xd4>
    18ac:	99 24       	eor	r9, r9
    18ae:	93 94       	inc	r9
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <conv_brk+0xfe>
    18b2:	f6 01       	movw	r30, r12
    18b4:	ce 01       	movw	r24, r28
    18b6:	81 96       	adiw	r24, 0x21	; 33
    18b8:	20 81       	ld	r18, Z
    18ba:	20 95       	com	r18
    18bc:	21 93       	st	Z+, r18
    18be:	e8 17       	cp	r30, r24
    18c0:	f9 07       	cpc	r31, r25
    18c2:	d1 f7       	brne	.-12     	; 0x18b8 <conv_brk+0xda>
    18c4:	f3 cf       	rjmp	.-26     	; 0x18ac <conv_brk+0xce>
    18c6:	e1 14       	cp	r14, r1
    18c8:	f1 04       	cpc	r15, r1
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <conv_brk+0xf8>
    18cc:	d7 01       	movw	r26, r14
    18ce:	8c 93       	st	X, r24
    18d0:	f7 01       	movw	r30, r14
    18d2:	31 96       	adiw	r30, 0x01	; 1
    18d4:	7f 01       	movw	r14, r30
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	01 f1       	breq	.+64     	; 0x191a <conv_brk+0x13c>
    18da:	91 2c       	mov	r9, r1
    18dc:	c5 01       	movw	r24, r10
    18de:	69 a3       	std	Y+33, r22	; 0x21
    18e0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    18e4:	69 a1       	ldd	r22, Y+33	; 0x21
    18e6:	97 fd       	sbrc	r25, 7
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <conv_brk+0x138>
    18ea:	28 2f       	mov	r18, r24
    18ec:	26 95       	lsr	r18
    18ee:	26 95       	lsr	r18
    18f0:	26 95       	lsr	r18
    18f2:	f6 01       	movw	r30, r12
    18f4:	e2 0f       	add	r30, r18
    18f6:	f1 1d       	adc	r31, r1
    18f8:	20 81       	ld	r18, Z
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	ac 01       	movw	r20, r24
    18fe:	47 70       	andi	r20, 0x07	; 7
    1900:	55 27       	eor	r21, r21
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <conv_brk+0x12a>
    1904:	35 95       	asr	r19
    1906:	27 95       	ror	r18
    1908:	4a 95       	dec	r20
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <conv_brk+0x126>
    190c:	20 fd       	sbrc	r18, 0
    190e:	db cf       	rjmp	.-74     	; 0x18c6 <conv_brk+0xe8>
    1910:	b5 01       	movw	r22, r10
    1912:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ungetc>
    1916:	91 10       	cpse	r9, r1
    1918:	86 cf       	rjmp	.-244    	; 0x1826 <conv_brk+0x48>
    191a:	e1 14       	cp	r14, r1
    191c:	f1 04       	cpc	r15, r1
    191e:	11 f0       	breq	.+4      	; 0x1924 <conv_brk+0x146>
    1920:	d7 01       	movw	r26, r14
    1922:	1c 92       	st	X, r1
    1924:	c8 01       	movw	r24, r16
    1926:	a1 96       	adiw	r28, 0x21	; 33
    1928:	ed e0       	ldi	r30, 0x0D	; 13
    192a:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__epilogue_restores__+0xa>

0000192e <vfscanf>:
    192e:	4f 92       	push	r4
    1930:	5f 92       	push	r5
    1932:	7f 92       	push	r7
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	1f 92       	push	r1
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8c 01       	movw	r16, r24
    1954:	2b 01       	movw	r4, r22
    1956:	7a 01       	movw	r14, r20
    1958:	fc 01       	movw	r30, r24
    195a:	17 82       	std	Z+7, r1	; 0x07
    195c:	16 82       	std	Z+6, r1	; 0x06
    195e:	a1 2c       	mov	r10, r1
    1960:	f8 01       	movw	r30, r16
    1962:	d3 80       	ldd	r13, Z+3	; 0x03
    1964:	f2 01       	movw	r30, r4
    1966:	d3 fc       	sbrc	r13, 3
    1968:	85 91       	lpm	r24, Z+
    196a:	d3 fe       	sbrs	r13, 3
    196c:	81 91       	ld	r24, Z+
    196e:	38 2f       	mov	r19, r24
    1970:	2f 01       	movw	r4, r30
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <vfscanf+0x4a>
    1976:	fc c0       	rjmp	.+504    	; 0x1b70 <vfscanf+0x242>
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	39 83       	std	Y+1, r19	; 0x01
    197c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <isspace>
    1980:	39 81       	ldd	r19, Y+1	; 0x01
    1982:	89 2b       	or	r24, r25
    1984:	21 f0       	breq	.+8      	; 0x198e <vfscanf+0x60>
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 45 0b 	call	0x168a	; 0x168a <skip_spaces>
    198c:	e9 cf       	rjmp	.-46     	; 0x1960 <vfscanf+0x32>
    198e:	35 32       	cpi	r19, 0x25	; 37
    1990:	41 f4       	brne	.+16     	; 0x19a2 <vfscanf+0x74>
    1992:	f2 01       	movw	r30, r4
    1994:	d3 fc       	sbrc	r13, 3
    1996:	35 91       	lpm	r19, Z+
    1998:	d3 fe       	sbrs	r13, 3
    199a:	31 91       	ld	r19, Z+
    199c:	2f 01       	movw	r4, r30
    199e:	35 32       	cpi	r19, 0x25	; 37
    19a0:	69 f4       	brne	.+26     	; 0x19bc <vfscanf+0x8e>
    19a2:	c8 01       	movw	r24, r16
    19a4:	39 83       	std	Y+1, r19	; 0x01
    19a6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    19aa:	39 81       	ldd	r19, Y+1	; 0x01
    19ac:	97 fd       	sbrc	r25, 7
    19ae:	de c0       	rjmp	.+444    	; 0x1b6c <vfscanf+0x23e>
    19b0:	38 17       	cp	r19, r24
    19b2:	b1 f2       	breq	.-84     	; 0x1960 <vfscanf+0x32>
    19b4:	b8 01       	movw	r22, r16
    19b6:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ungetc>
    19ba:	da c0       	rjmp	.+436    	; 0x1b70 <vfscanf+0x242>
    19bc:	3a 32       	cpi	r19, 0x2A	; 42
    19be:	41 f4       	brne	.+16     	; 0x19d0 <vfscanf+0xa2>
    19c0:	d3 fc       	sbrc	r13, 3
    19c2:	35 91       	lpm	r19, Z+
    19c4:	d3 fe       	sbrs	r13, 3
    19c6:	31 91       	ld	r19, Z+
    19c8:	2f 01       	movw	r4, r30
    19ca:	bb 24       	eor	r11, r11
    19cc:	b3 94       	inc	r11
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vfscanf+0xa4>
    19d0:	b1 2c       	mov	r11, r1
    19d2:	71 2c       	mov	r7, r1
    19d4:	20 ed       	ldi	r18, 0xD0	; 208
    19d6:	23 0f       	add	r18, r19
    19d8:	2a 30       	cpi	r18, 0x0A	; 10
    19da:	90 f4       	brcc	.+36     	; 0x1a00 <vfscanf+0xd2>
    19dc:	fb 2d       	mov	r31, r11
    19de:	f2 60       	ori	r31, 0x02	; 2
    19e0:	bf 2e       	mov	r11, r31
    19e2:	67 2d       	mov	r22, r7
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	0e 94 25 0b 	call	0x164a	; 0x164a <mulacc>
    19f0:	76 2e       	mov	r7, r22
    19f2:	f2 01       	movw	r30, r4
    19f4:	d3 fc       	sbrc	r13, 3
    19f6:	35 91       	lpm	r19, Z+
    19f8:	d3 fe       	sbrs	r13, 3
    19fa:	31 91       	ld	r19, Z+
    19fc:	2f 01       	movw	r4, r30
    19fe:	ea cf       	rjmp	.-44     	; 0x19d4 <vfscanf+0xa6>
    1a00:	b1 fe       	sbrs	r11, 1
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <vfscanf+0xdc>
    1a04:	71 10       	cpse	r7, r1
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <vfscanf+0xe0>
    1a08:	b3 c0       	rjmp	.+358    	; 0x1b70 <vfscanf+0x242>
    1a0a:	77 24       	eor	r7, r7
    1a0c:	7a 94       	dec	r7
    1a0e:	38 36       	cpi	r19, 0x68	; 104
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <vfscanf+0xea>
    1a12:	3c 36       	cpi	r19, 0x6C	; 108
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <vfscanf+0x100>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <vfscanf+0x112>
    1a18:	f2 01       	movw	r30, r4
    1a1a:	d3 fc       	sbrc	r13, 3
    1a1c:	35 91       	lpm	r19, Z+
    1a1e:	d3 fe       	sbrs	r13, 3
    1a20:	31 91       	ld	r19, Z+
    1a22:	2f 01       	movw	r4, r30
    1a24:	38 36       	cpi	r19, 0x68	; 104
    1a26:	61 f4       	brne	.+24     	; 0x1a40 <vfscanf+0x112>
    1a28:	fb 2d       	mov	r31, r11
    1a2a:	f8 60       	ori	r31, 0x08	; 8
    1a2c:	bf 2e       	mov	r11, r31
    1a2e:	8b 2d       	mov	r24, r11
    1a30:	84 60       	ori	r24, 0x04	; 4
    1a32:	b8 2e       	mov	r11, r24
    1a34:	f2 01       	movw	r30, r4
    1a36:	d3 fc       	sbrc	r13, 3
    1a38:	35 91       	lpm	r19, Z+
    1a3a:	d3 fe       	sbrs	r13, 3
    1a3c:	31 91       	ld	r19, Z+
    1a3e:	2f 01       	movw	r4, r30
    1a40:	33 23       	and	r19, r19
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <vfscanf+0x118>
    1a44:	95 c0       	rjmp	.+298    	; 0x1b70 <vfscanf+0x242>
    1a46:	63 2f       	mov	r22, r19
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	84 e5       	ldi	r24, 0x54	; 84
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	39 83       	std	Y+1, r19	; 0x01
    1a50:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <strchr_P>
    1a54:	39 81       	ldd	r19, Y+1	; 0x01
    1a56:	89 2b       	or	r24, r25
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <vfscanf+0x12e>
    1a5a:	8a c0       	rjmp	.+276    	; 0x1b70 <vfscanf+0x242>
    1a5c:	b0 fc       	sbrc	r11, 0
    1a5e:	07 c0       	rjmp	.+14     	; 0x1a6e <vfscanf+0x140>
    1a60:	f7 01       	movw	r30, r14
    1a62:	c0 80       	ld	r12, Z
    1a64:	d1 80       	ldd	r13, Z+1	; 0x01
    1a66:	c7 01       	movw	r24, r14
    1a68:	02 96       	adiw	r24, 0x02	; 2
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <vfscanf+0x144>
    1a6e:	c1 2c       	mov	r12, r1
    1a70:	d1 2c       	mov	r13, r1
    1a72:	3e 36       	cpi	r19, 0x6E	; 110
    1a74:	51 f4       	brne	.+20     	; 0x1a8a <vfscanf+0x15c>
    1a76:	f8 01       	movw	r30, r16
    1a78:	46 81       	ldd	r20, Z+6	; 0x06
    1a7a:	57 81       	ldd	r21, Z+7	; 0x07
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	2b 2d       	mov	r18, r11
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 19 0b 	call	0x1632	; 0x1632 <putval>
    1a88:	6b cf       	rjmp	.-298    	; 0x1960 <vfscanf+0x32>
    1a8a:	33 36       	cpi	r19, 0x63	; 99
    1a8c:	a1 f4       	brne	.+40     	; 0x1ab6 <vfscanf+0x188>
    1a8e:	b1 fc       	sbrc	r11, 1
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <vfscanf+0x168>
    1a92:	77 24       	eor	r7, r7
    1a94:	73 94       	inc	r7
    1a96:	c8 01       	movw	r24, r16
    1a98:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    1a9c:	97 fd       	sbrc	r25, 7
    1a9e:	66 c0       	rjmp	.+204    	; 0x1b6c <vfscanf+0x23e>
    1aa0:	c1 14       	cp	r12, r1
    1aa2:	d1 04       	cpc	r13, r1
    1aa4:	29 f0       	breq	.+10     	; 0x1ab0 <vfscanf+0x182>
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	80 83       	st	Z, r24
    1aaa:	c6 01       	movw	r24, r12
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	6c 01       	movw	r12, r24
    1ab0:	7a 94       	dec	r7
    1ab2:	89 f7       	brne	.-30     	; 0x1a96 <vfscanf+0x168>
    1ab4:	57 c0       	rjmp	.+174    	; 0x1b64 <vfscanf+0x236>
    1ab6:	3b 35       	cpi	r19, 0x5B	; 91
    1ab8:	59 f4       	brne	.+22     	; 0x1ad0 <vfscanf+0x1a2>
    1aba:	92 01       	movw	r18, r4
    1abc:	a6 01       	movw	r20, r12
    1abe:	67 2d       	mov	r22, r7
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	0e 94 ef 0b 	call	0x17de	; 0x17de <conv_brk>
    1ac6:	2c 01       	movw	r4, r24
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	09 f0       	breq	.+2      	; 0x1ace <vfscanf+0x1a0>
    1acc:	4b c0       	rjmp	.+150    	; 0x1b64 <vfscanf+0x236>
    1ace:	45 c0       	rjmp	.+138    	; 0x1b5a <vfscanf+0x22c>
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	39 83       	std	Y+1, r19	; 0x01
    1ad4:	0e 94 45 0b 	call	0x168a	; 0x168a <skip_spaces>
    1ad8:	39 81       	ldd	r19, Y+1	; 0x01
    1ada:	97 fd       	sbrc	r25, 7
    1adc:	47 c0       	rjmp	.+142    	; 0x1b6c <vfscanf+0x23e>
    1ade:	3f 36       	cpi	r19, 0x6F	; 111
    1ae0:	69 f1       	breq	.+90     	; 0x1b3c <vfscanf+0x20e>
    1ae2:	28 f4       	brcc	.+10     	; 0x1aee <vfscanf+0x1c0>
    1ae4:	34 36       	cpi	r19, 0x64	; 100
    1ae6:	31 f1       	breq	.+76     	; 0x1b34 <vfscanf+0x206>
    1ae8:	39 36       	cpi	r19, 0x69	; 105
    1aea:	79 f1       	breq	.+94     	; 0x1b4a <vfscanf+0x21c>
    1aec:	2b c0       	rjmp	.+86     	; 0x1b44 <vfscanf+0x216>
    1aee:	33 37       	cpi	r19, 0x73	; 115
    1af0:	69 f0       	breq	.+26     	; 0x1b0c <vfscanf+0x1de>
    1af2:	35 37       	cpi	r19, 0x75	; 117
    1af4:	f9 f0       	breq	.+62     	; 0x1b34 <vfscanf+0x206>
    1af6:	26 c0       	rjmp	.+76     	; 0x1b44 <vfscanf+0x216>
    1af8:	c1 14       	cp	r12, r1
    1afa:	d1 04       	cpc	r13, r1
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <vfscanf+0x1da>
    1afe:	f6 01       	movw	r30, r12
    1b00:	80 82       	st	Z, r8
    1b02:	c6 01       	movw	r24, r12
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	6c 01       	movw	r12, r24
    1b08:	7a 94       	dec	r7
    1b0a:	71 f0       	breq	.+28     	; 0x1b28 <vfscanf+0x1fa>
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <fgetc>
    1b12:	4c 01       	movw	r8, r24
    1b14:	97 fd       	sbrc	r25, 7
    1b16:	08 c0       	rjmp	.+16     	; 0x1b28 <vfscanf+0x1fa>
    1b18:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <isspace>
    1b1c:	89 2b       	or	r24, r25
    1b1e:	61 f3       	breq	.-40     	; 0x1af8 <vfscanf+0x1ca>
    1b20:	b8 01       	movw	r22, r16
    1b22:	c4 01       	movw	r24, r8
    1b24:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ungetc>
    1b28:	c1 14       	cp	r12, r1
    1b2a:	d1 04       	cpc	r13, r1
    1b2c:	d9 f0       	breq	.+54     	; 0x1b64 <vfscanf+0x236>
    1b2e:	f6 01       	movw	r30, r12
    1b30:	10 82       	st	Z, r1
    1b32:	18 c0       	rjmp	.+48     	; 0x1b64 <vfscanf+0x236>
    1b34:	fb 2d       	mov	r31, r11
    1b36:	f0 62       	ori	r31, 0x20	; 32
    1b38:	bf 2e       	mov	r11, r31
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <vfscanf+0x21c>
    1b3c:	8b 2d       	mov	r24, r11
    1b3e:	80 61       	ori	r24, 0x10	; 16
    1b40:	b8 2e       	mov	r11, r24
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <vfscanf+0x21c>
    1b44:	9b 2d       	mov	r25, r11
    1b46:	90 64       	ori	r25, 0x40	; 64
    1b48:	b9 2e       	mov	r11, r25
    1b4a:	2b 2d       	mov	r18, r11
    1b4c:	a6 01       	movw	r20, r12
    1b4e:	67 2d       	mov	r22, r7
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <conv_int>
    1b56:	81 11       	cpse	r24, r1
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <vfscanf+0x236>
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	83 81       	ldd	r24, Z+3	; 0x03
    1b5e:	80 73       	andi	r24, 0x30	; 48
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <vfscanf+0x23e>
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfscanf+0x242>
    1b64:	b0 fc       	sbrc	r11, 0
    1b66:	fc ce       	rjmp	.-520    	; 0x1960 <vfscanf+0x32>
    1b68:	a3 94       	inc	r10
    1b6a:	fa ce       	rjmp	.-524    	; 0x1960 <vfscanf+0x32>
    1b6c:	aa 20       	and	r10, r10
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <vfscanf+0x248>
    1b70:	8a 2d       	mov	r24, r10
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <vfscanf+0x24c>
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	9f ef       	ldi	r25, 0xFF	; 255
    1b7a:	0f 90       	pop	r0
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	7f 90       	pop	r7
    1b96:	5f 90       	pop	r5
    1b98:	4f 90       	pop	r4
    1b9a:	08 95       	ret

00001b9c <isspace>:
    1b9c:	91 11       	cpse	r25, r1
    1b9e:	0e c1       	rjmp	.+540    	; 0x1dbc <__ctype_isfalse>
    1ba0:	80 32       	cpi	r24, 0x20	; 32
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <isspace+0xe>
    1ba4:	89 50       	subi	r24, 0x09	; 9
    1ba6:	85 50       	subi	r24, 0x05	; 5
    1ba8:	d0 f7       	brcc	.-12     	; 0x1b9e <isspace+0x2>
    1baa:	08 95       	ret

00001bac <strchr_P>:
    1bac:	fc 01       	movw	r30, r24
    1bae:	05 90       	lpm	r0, Z+
    1bb0:	06 16       	cp	r0, r22
    1bb2:	21 f0       	breq	.+8      	; 0x1bbc <strchr_P+0x10>
    1bb4:	00 20       	and	r0, r0
    1bb6:	d9 f7       	brne	.-10     	; 0x1bae <strchr_P+0x2>
    1bb8:	c0 01       	movw	r24, r0
    1bba:	08 95       	ret
    1bbc:	31 97       	sbiw	r30, 0x01	; 1
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret

00001bc2 <strnlen_P>:
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	05 90       	lpm	r0, Z+
    1bc6:	61 50       	subi	r22, 0x01	; 1
    1bc8:	70 40       	sbci	r23, 0x00	; 0
    1bca:	01 10       	cpse	r0, r1
    1bcc:	d8 f7       	brcc	.-10     	; 0x1bc4 <strnlen_P+0x2>
    1bce:	80 95       	com	r24
    1bd0:	90 95       	com	r25
    1bd2:	8e 0f       	add	r24, r30
    1bd4:	9f 1f       	adc	r25, r31
    1bd6:	08 95       	ret

00001bd8 <strnlen>:
    1bd8:	fc 01       	movw	r30, r24
    1bda:	61 50       	subi	r22, 0x01	; 1
    1bdc:	70 40       	sbci	r23, 0x00	; 0
    1bde:	01 90       	ld	r0, Z+
    1be0:	01 10       	cpse	r0, r1
    1be2:	d8 f7       	brcc	.-10     	; 0x1bda <strnlen+0x2>
    1be4:	80 95       	com	r24
    1be6:	90 95       	com	r25
    1be8:	8e 0f       	add	r24, r30
    1bea:	9f 1f       	adc	r25, r31
    1bec:	08 95       	ret

00001bee <fgetc>:
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	20 ff       	sbrs	r18, 0
    1bf8:	33 c0       	rjmp	.+102    	; 0x1c60 <fgetc+0x72>
    1bfa:	26 ff       	sbrs	r18, 6
    1bfc:	0a c0       	rjmp	.+20     	; 0x1c12 <fgetc+0x24>
    1bfe:	2f 7b       	andi	r18, 0xBF	; 191
    1c00:	2b 83       	std	Y+3, r18	; 0x03
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	9f 81       	ldd	r25, Y+7	; 0x07
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	9f 83       	std	Y+7, r25	; 0x07
    1c0a:	8e 83       	std	Y+6, r24	; 0x06
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	29 c0       	rjmp	.+82     	; 0x1c64 <fgetc+0x76>
    1c12:	22 ff       	sbrs	r18, 2
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <fgetc+0x46>
    1c16:	e8 81       	ld	r30, Y
    1c18:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1a:	80 81       	ld	r24, Z
    1c1c:	99 27       	eor	r25, r25
    1c1e:	87 fd       	sbrc	r24, 7
    1c20:	90 95       	com	r25
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	19 f4       	brne	.+6      	; 0x1c2c <fgetc+0x3e>
    1c26:	20 62       	ori	r18, 0x20	; 32
    1c28:	2b 83       	std	Y+3, r18	; 0x03
    1c2a:	1a c0       	rjmp	.+52     	; 0x1c60 <fgetc+0x72>
    1c2c:	31 96       	adiw	r30, 0x01	; 1
    1c2e:	f9 83       	std	Y+1, r31	; 0x01
    1c30:	e8 83       	st	Y, r30
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <fgetc+0x62>
    1c34:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c36:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c38:	09 95       	icall
    1c3a:	97 ff       	sbrs	r25, 7
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <fgetc+0x62>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <fgetc+0x5a>
    1c44:	80 e1       	ldi	r24, 0x10	; 16
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <fgetc+0x5c>
    1c48:	80 e2       	ldi	r24, 0x20	; 32
    1c4a:	82 2b       	or	r24, r18
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <fgetc+0x72>
    1c50:	2e 81       	ldd	r18, Y+6	; 0x06
    1c52:	3f 81       	ldd	r19, Y+7	; 0x07
    1c54:	2f 5f       	subi	r18, 0xFF	; 255
    1c56:	3f 4f       	sbci	r19, 0xFF	; 255
    1c58:	3f 83       	std	Y+7, r19	; 0x07
    1c5a:	2e 83       	std	Y+6, r18	; 0x06
    1c5c:	99 27       	eor	r25, r25
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <fgetc+0x76>
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	9f ef       	ldi	r25, 0xFF	; 255
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <fputc>:
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	18 2f       	mov	r17, r24
    1c74:	09 2f       	mov	r16, r25
    1c76:	eb 01       	movw	r28, r22
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	81 fd       	sbrc	r24, 1
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <fputc+0x1a>
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	20 c0       	rjmp	.+64     	; 0x1cc4 <fputc+0x5a>
    1c84:	82 ff       	sbrs	r24, 2
    1c86:	10 c0       	rjmp	.+32     	; 0x1ca8 <fputc+0x3e>
    1c88:	4e 81       	ldd	r20, Y+6	; 0x06
    1c8a:	5f 81       	ldd	r21, Y+7	; 0x07
    1c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c90:	42 17       	cp	r20, r18
    1c92:	53 07       	cpc	r21, r19
    1c94:	7c f4       	brge	.+30     	; 0x1cb4 <fputc+0x4a>
    1c96:	e8 81       	ld	r30, Y
    1c98:	f9 81       	ldd	r31, Y+1	; 0x01
    1c9a:	9f 01       	movw	r18, r30
    1c9c:	2f 5f       	subi	r18, 0xFF	; 255
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	39 83       	std	Y+1, r19	; 0x01
    1ca2:	28 83       	st	Y, r18
    1ca4:	10 83       	st	Z, r17
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <fputc+0x4a>
    1ca8:	e8 85       	ldd	r30, Y+8	; 0x08
    1caa:	f9 85       	ldd	r31, Y+9	; 0x09
    1cac:	81 2f       	mov	r24, r17
    1cae:	09 95       	icall
    1cb0:	89 2b       	or	r24, r25
    1cb2:	29 f7       	brne	.-54     	; 0x1c7e <fputc+0x14>
    1cb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb8:	2f 5f       	subi	r18, 0xFF	; 255
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	3f 83       	std	Y+7, r19	; 0x07
    1cbe:	2e 83       	std	Y+6, r18	; 0x06
    1cc0:	81 2f       	mov	r24, r17
    1cc2:	90 2f       	mov	r25, r16
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <ungetc>:
    1cce:	fb 01       	movw	r30, r22
    1cd0:	23 81       	ldd	r18, Z+3	; 0x03
    1cd2:	20 ff       	sbrs	r18, 0
    1cd4:	12 c0       	rjmp	.+36     	; 0x1cfa <ungetc+0x2c>
    1cd6:	26 fd       	sbrc	r18, 6
    1cd8:	10 c0       	rjmp	.+32     	; 0x1cfa <ungetc+0x2c>
    1cda:	8f 3f       	cpi	r24, 0xFF	; 255
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	93 07       	cpc	r25, r19
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <ungetc+0x2c>
    1ce2:	82 83       	std	Z+2, r24	; 0x02
    1ce4:	2f 7d       	andi	r18, 0xDF	; 223
    1ce6:	20 64       	ori	r18, 0x40	; 64
    1ce8:	23 83       	std	Z+3, r18	; 0x03
    1cea:	26 81       	ldd	r18, Z+6	; 0x06
    1cec:	37 81       	ldd	r19, Z+7	; 0x07
    1cee:	21 50       	subi	r18, 0x01	; 1
    1cf0:	31 09       	sbc	r19, r1
    1cf2:	37 83       	std	Z+7, r19	; 0x07
    1cf4:	26 83       	std	Z+6, r18	; 0x06
    1cf6:	99 27       	eor	r25, r25
    1cf8:	08 95       	ret
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	08 95       	ret

00001d00 <__ultoa_invert>:
    1d00:	fa 01       	movw	r30, r20
    1d02:	aa 27       	eor	r26, r26
    1d04:	28 30       	cpi	r18, 0x08	; 8
    1d06:	51 f1       	breq	.+84     	; 0x1d5c <__ultoa_invert+0x5c>
    1d08:	20 31       	cpi	r18, 0x10	; 16
    1d0a:	81 f1       	breq	.+96     	; 0x1d6c <__ultoa_invert+0x6c>
    1d0c:	e8 94       	clt
    1d0e:	6f 93       	push	r22
    1d10:	6e 7f       	andi	r22, 0xFE	; 254
    1d12:	6e 5f       	subi	r22, 0xFE	; 254
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	af 4f       	sbci	r26, 0xFF	; 255
    1d1c:	b1 e0       	ldi	r27, 0x01	; 1
    1d1e:	3e d0       	rcall	.+124    	; 0x1d9c <__ultoa_invert+0x9c>
    1d20:	b4 e0       	ldi	r27, 0x04	; 4
    1d22:	3c d0       	rcall	.+120    	; 0x1d9c <__ultoa_invert+0x9c>
    1d24:	67 0f       	add	r22, r23
    1d26:	78 1f       	adc	r23, r24
    1d28:	89 1f       	adc	r24, r25
    1d2a:	9a 1f       	adc	r25, r26
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	68 0f       	add	r22, r24
    1d30:	79 1f       	adc	r23, r25
    1d32:	8a 1f       	adc	r24, r26
    1d34:	91 1d       	adc	r25, r1
    1d36:	a1 1d       	adc	r26, r1
    1d38:	6a 0f       	add	r22, r26
    1d3a:	71 1d       	adc	r23, r1
    1d3c:	81 1d       	adc	r24, r1
    1d3e:	91 1d       	adc	r25, r1
    1d40:	a1 1d       	adc	r26, r1
    1d42:	20 d0       	rcall	.+64     	; 0x1d84 <__ultoa_invert+0x84>
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__ultoa_invert+0x48>
    1d46:	68 94       	set
    1d48:	3f 91       	pop	r19
    1d4a:	2a e0       	ldi	r18, 0x0A	; 10
    1d4c:	26 9f       	mul	r18, r22
    1d4e:	11 24       	eor	r1, r1
    1d50:	30 19       	sub	r19, r0
    1d52:	30 5d       	subi	r19, 0xD0	; 208
    1d54:	31 93       	st	Z+, r19
    1d56:	de f6       	brtc	.-74     	; 0x1d0e <__ultoa_invert+0xe>
    1d58:	cf 01       	movw	r24, r30
    1d5a:	08 95       	ret
    1d5c:	46 2f       	mov	r20, r22
    1d5e:	47 70       	andi	r20, 0x07	; 7
    1d60:	40 5d       	subi	r20, 0xD0	; 208
    1d62:	41 93       	st	Z+, r20
    1d64:	b3 e0       	ldi	r27, 0x03	; 3
    1d66:	0f d0       	rcall	.+30     	; 0x1d86 <__ultoa_invert+0x86>
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0x5c>
    1d6a:	f6 cf       	rjmp	.-20     	; 0x1d58 <__ultoa_invert+0x58>
    1d6c:	46 2f       	mov	r20, r22
    1d6e:	4f 70       	andi	r20, 0x0F	; 15
    1d70:	40 5d       	subi	r20, 0xD0	; 208
    1d72:	4a 33       	cpi	r20, 0x3A	; 58
    1d74:	18 f0       	brcs	.+6      	; 0x1d7c <__ultoa_invert+0x7c>
    1d76:	49 5d       	subi	r20, 0xD9	; 217
    1d78:	31 fd       	sbrc	r19, 1
    1d7a:	40 52       	subi	r20, 0x20	; 32
    1d7c:	41 93       	st	Z+, r20
    1d7e:	02 d0       	rcall	.+4      	; 0x1d84 <__ultoa_invert+0x84>
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <__ultoa_invert+0x6c>
    1d82:	ea cf       	rjmp	.-44     	; 0x1d58 <__ultoa_invert+0x58>
    1d84:	b4 e0       	ldi	r27, 0x04	; 4
    1d86:	a6 95       	lsr	r26
    1d88:	97 95       	ror	r25
    1d8a:	87 95       	ror	r24
    1d8c:	77 95       	ror	r23
    1d8e:	67 95       	ror	r22
    1d90:	ba 95       	dec	r27
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__ultoa_invert+0x86>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	61 05       	cpc	r22, r1
    1d98:	71 05       	cpc	r23, r1
    1d9a:	08 95       	ret
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	0a 2e       	mov	r0, r26
    1da2:	06 94       	lsr	r0
    1da4:	57 95       	ror	r21
    1da6:	47 95       	ror	r20
    1da8:	37 95       	ror	r19
    1daa:	27 95       	ror	r18
    1dac:	ba 95       	dec	r27
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__ultoa_invert+0xa2>
    1db0:	62 0f       	add	r22, r18
    1db2:	73 1f       	adc	r23, r19
    1db4:	84 1f       	adc	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	a0 1d       	adc	r26, r0
    1dba:	08 95       	ret

00001dbc <__ctype_isfalse>:
    1dbc:	99 27       	eor	r25, r25
    1dbe:	88 27       	eor	r24, r24

00001dc0 <__ctype_istrue>:
    1dc0:	08 95       	ret

00001dc2 <__prologue_saves__>:
    1dc2:	2f 92       	push	r2
    1dc4:	3f 92       	push	r3
    1dc6:	4f 92       	push	r4
    1dc8:	5f 92       	push	r5
    1dca:	6f 92       	push	r6
    1dcc:	7f 92       	push	r7
    1dce:	8f 92       	push	r8
    1dd0:	9f 92       	push	r9
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	ca 1b       	sub	r28, r26
    1dec:	db 0b       	sbc	r29, r27
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	09 94       	ijmp

00001dfa <__epilogue_restores__>:
    1dfa:	2a 88       	ldd	r2, Y+18	; 0x12
    1dfc:	39 88       	ldd	r3, Y+17	; 0x11
    1dfe:	48 88       	ldd	r4, Y+16	; 0x10
    1e00:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e02:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e04:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e06:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e08:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e0c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e0e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e10:	df 80       	ldd	r13, Y+7	; 0x07
    1e12:	ee 80       	ldd	r14, Y+6	; 0x06
    1e14:	fd 80       	ldd	r15, Y+5	; 0x05
    1e16:	0c 81       	ldd	r16, Y+4	; 0x04
    1e18:	1b 81       	ldd	r17, Y+3	; 0x03
    1e1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e1e:	ce 0f       	add	r28, r30
    1e20:	d1 1d       	adc	r29, r1
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	ed 01       	movw	r28, r26
    1e2e:	08 95       	ret

00001e30 <_exit>:
    1e30:	f8 94       	cli

00001e32 <__stop_program>:
    1e32:	ff cf       	rjmp	.-2      	; 0x1e32 <__stop_program>
